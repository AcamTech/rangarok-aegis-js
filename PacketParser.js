// 2010-08-03aRagexeRE/packetver 25? (26?)

var PacketParser = {

	// autogenerated:

	0x64: function PACKET_CA_LOGIN( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Version = lp.getUint32( 0x2, true );
		ret.ID = new Uint8Array( buf.slice( 0x6, 0x1e ) );
		ret.Passwd = new Uint8Array( buf.slice( 0x1e, 0x36 ) );
		ret.clienttype = lp.getUint8( 0x36 );

		return ret;
	},

	0x65: function PACKET_CH_ENTER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.AuthCode = lp.getInt32( 0x6, true );
		ret.userLevel = lp.getUint32( 0xa, true );
		ret.clientType = lp.getUint16( 0xe, true );
		ret.Sex = lp.getUint8( 0x10 );

		return ret;
	},

	0x66: function PACKET_CH_SELECT_CHAR( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.CharNum = lp.getUint8( 0x2 );

		return ret;
	},

	0x67: function PACKET_CH_MAKE_CHAR( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.name = new Uint8Array( buf.slice( 0x2, 0x1a ) );
		ret.Str = lp.getUint8( 0x1a );
		ret.Agi = lp.getUint8( 0x1b );
		ret.Vit = lp.getUint8( 0x1c );
		ret.Int = lp.getUint8( 0x1d );
		ret.Dex = lp.getUint8( 0x1e );
		ret.Luk = lp.getUint8( 0x1f );
		ret.CharNum = lp.getUint8( 0x20 );
		ret.headPal = lp.getInt16( 0x21, true );
		ret.head = lp.getInt16( 0x23, true );

		return ret;
	},

	0x68: function PACKET_CH_DELETE_CHAR( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );
		ret.key = new Uint8Array( buf.slice( 0x6, 0x2e ) );

		return ret;
	},

	0x69: function PACKET_AC_ACCEPT_LOGIN( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.AuthCode = lp.getInt32( 0x4, true );
		ret.AID = lp.getUint32( 0x8, true );
		ret.userLevel = lp.getUint32( 0xc, true );
		ret.lastLoginIP = lp.getUint32( 0x10, true );
		ret.lastLoginTime = new Uint8Array( buf.slice( 0x14, 0x2e ) );
		ret.Sex = lp.getUint8( 0x2e );
		
		ret.ServerList = [];

		// SERVER_ADDR
		for( p = 0x2f; p < buf.byteLength; p += 32 ) {

			var ret2 = {};

			ret2.ip = lp.getUint32( p + 0x0, true );
			ret2.port = lp.getInt16( p + 0x4, true );
			ret2.name = new Uint8Array( buf.slice( p + 0x6, p + 0x1a ) );
			ret2.usercount = lp.getUint16( p + 0x1a, true );
			ret2.state = lp.getUint16( p + 0x1c, true );
			ret2.property = lp.getUint16( p + 0x1e, true );

			ret.ServerList.push( ret2 );

		}

		return ret;
	},

	0x6a: function PACKET_AC_REFUSE_LOGIN( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.ErrorCode = lp.getUint8( 0x2 );
		ret.blockDate = new Uint8Array( buf.slice( 0x3, 0x17 ) );

		return ret;
	},

	0x6b: function PACKET_HC_ACCEPT_ENTER_NEO_UNION( buf ) {

 		var lp = new DataView( buf );
		var ret = {};
		
		console.log( buf.byteLength, ( buf.byteLength - 0x1b ) / 2 );

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.TotalSlotNum = lp.getUint8( 0x4 );
		ret.PremiumStartSlot = lp.getUint8( 0x5 );
		ret.PremiumEndSlot = lp.getUint8( 0x6 );
		ret.dummy1_beginbilling = lp.getUint8( 0x7 );
		ret.code = lp.getUint32( 0x8, true );
		ret.time1 = lp.getUint32( 0xc, true );
		ret.time2 = lp.getUint32( 0x10, true );
		ret.dummy2_endbilling = new Uint8Array( buf.slice( 0x14, 0x1b ) );
		
		ret.charInfo = [];

		// CHARACTER_INFO_NEO_UNION
		for( p = 0x1b; p < buf.byteLength; p += 144 ) {

			var ret2 = {};

			ret2.GID = lp.getUint32( p + 0x0, true );
			ret2.exp = lp.getInt32( p + 0x4, true );
			ret2.money = lp.getInt32( p + 0x8, true );
			ret2.jobexp = lp.getInt32( p + 0xc, true );
			ret2.joblevel = lp.getInt32( p + 0x10, true );
			ret2.bodystate = lp.getInt32( p + 0x14, true );
			ret2.healthstate = lp.getInt32( p + 0x18, true );
			ret2.effectstate = lp.getInt32( p + 0x1c, true );
			ret2.virtue = lp.getInt32( p + 0x20, true );
			ret2.honor = lp.getInt32( p + 0x24, true );
			ret2.jobpoint = lp.getInt16( p + 0x28, true );
			ret2.hp = lp.getInt32( p + 0x2a, true );
			ret2.maxhp = lp.getInt32( p + 0x2e, true );
			ret2.sp = lp.getInt16( p + 0x32, true );
			ret2.maxsp = lp.getInt16( p + 0x34, true );
			ret2.speed = lp.getInt16( p + 0x36, true );
			ret2.job = lp.getInt16( p + 0x38, true );
			ret2.head = lp.getInt16( p + 0x3a, true );
			ret2.weapon = lp.getInt16( p + 0x3c, true );
			ret2.level = lp.getInt16( p + 0x3e, true );
			ret2.sppoint = lp.getInt16( p + 0x40, true );
			ret2.accessory = lp.getInt16( p + 0x42, true );
			ret2.shield = lp.getInt16( p + 0x44, true );
			ret2.accessory2 = lp.getInt16( p + 0x46, true );
			ret2.accessory3 = lp.getInt16( p + 0x48, true );
			ret2.headpalette = lp.getInt16( p + 0x4a, true );
			ret2.bodypalette = lp.getInt16( p + 0x4c, true );
			ret2.name = new Uint8Array( buf.slice( p + 0x4e, p + 0x66 ) );
			ret2.Str = lp.getUint8( p + 0x66 );
			ret2.Agi = lp.getUint8( p + 0x67 );
			ret2.Vit = lp.getUint8( p + 0x68 );
			ret2.Int = lp.getUint8( p + 0x69 );
			ret2.Dex = lp.getUint8( p + 0x6a );
			ret2.Luk = lp.getUint8( p + 0x6b );
			ret2.CharNum = lp.getUint8( p + 0x6c );
			ret2.haircolor = lp.getUint8( p + 0x6d );
			ret2.bIsChangedCharName = lp.getInt16( p + 0x6e, true );
			ret2.lastMap = new Uint8Array( buf.slice( p + 0x70, p + 0x80 ) );
			ret2.DeleteDate = lp.getInt32( p + 0x80, true );
			ret2.Robe = lp.getInt32( p + 0x84, true );
			ret2.SlotAddon = lp.getInt32( p + 0x88, true );
			ret2.RenameAddon = lp.getInt32( p + 0x8c, true );

			ret.charInfo.push( ret2 );

		}

		return ret;
	},

	0x6c: function PACKET_HC_REFUSE_ENTER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.ErrorCode = lp.getUint8( 0x2 );

		return ret;
	},

	0x6d: function PACKET_HC_ACCEPT_MAKECHAR_NEO_UNION( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		
		// CHARACTER_INFO_NEO_UNION
		ret.charinfo = {
			GID: lp.getUint32( p + 0x2, true ),
			exp: lp.getInt32( p + 0x6, true ),
			money: lp.getInt32( p + 0xa, true ),
			jobexp: lp.getInt32( p + 0xe, true ),
			joblevel: lp.getInt32( p + 0x12, true ),
			bodystate: lp.getInt32( p + 0x16, true ),
			healthstate: lp.getInt32( p + 0x1a, true ),
			effectstate: lp.getInt32( p + 0x1e, true ),
			virtue: lp.getInt32( p + 0x22, true ),
			honor: lp.getInt32( p + 0x26, true ),
			jobpoint: lp.getInt16( p + 0x2a, true ),
			hp: lp.getInt32( p + 0x2c, true ),
			maxhp: lp.getInt32( p + 0x30, true ),
			sp: lp.getInt16( p + 0x34, true ),
			maxsp: lp.getInt16( p + 0x36, true ),
			speed: lp.getInt16( p + 0x38, true ),
			job: lp.getInt16( p + 0x3a, true ),
			head: lp.getInt16( p + 0x3c, true ),
			weapon: lp.getInt16( p + 0x3e, true ),
			level: lp.getInt16( p + 0x40, true ),
			sppoint: lp.getInt16( p + 0x42, true ),
			accessory: lp.getInt16( p + 0x44, true ),
			shield: lp.getInt16( p + 0x46, true ),
			accessory2: lp.getInt16( p + 0x48, true ),
			accessory3: lp.getInt16( p + 0x4a, true ),
			headpalette: lp.getInt16( p + 0x4c, true ),
			bodypalette: lp.getInt16( p + 0x4e, true ),
			name: new Uint8Array( buf.slice( p + 0x50, p + 0x68 ) ),
			Str: lp.getUint8( p + 0x68 ),
			Agi: lp.getUint8( p + 0x69 ),
			Vit: lp.getUint8( p + 0x6a ),
			Int: lp.getUint8( p + 0x6b ),
			Dex: lp.getUint8( p + 0x6c ),
			Luk: lp.getUint8( p + 0x6d ),
			CharNum: lp.getUint8( p + 0x6e ),
			haircolor: lp.getUint8( p + 0x6f ),
			bIsChangedCharName: lp.getInt16( p + 0x70, true ),
		};


		return ret;
	},

	0x6e: function PACKET_HC_REFUSE_MAKECHAR( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.ErrorCode = lp.getUint8( 0x2 );

		return ret;
	},

	0x6f: function PACKET_HC_ACCEPT_DELETECHAR( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x70: function PACKET_HC_REFUSE_DELETECHAR( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.ErrorCode = lp.getUint8( 0x2 );

		return ret;
	},

	0x71: function PACKET_HC_NOTIFY_ZONESVR( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );
		ret.mapName = new Uint8Array( buf.slice( 0x6, 0x16 ) );
		
		// ZSERVER_ADDR
		ret.addr = {
			ip: lp.getUint32( 0x16, true ),
			port: lp.getInt16( 0x1a, true ),
		};


		return ret;
	},

	0x72: function PACKET_CZ_ENTER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.GID = lp.getUint32( 0x6, true );
		ret.AuthCode = lp.getInt32( 0xa, true );
		ret.clientTime = lp.getUint32( 0xe, true );
		ret.Sex = lp.getUint8( 0x12 );

		return ret;
	},

	0x73: function PACKET_ZC_ACCEPT_ENTER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.startTime = lp.getUint32( 0x2, true );
		ret.PosDir = new Uint8Array( buf.slice( 0x6, 0x9 ) );
		ret.xSize = lp.getUint8( 0x9 );
		ret.ySize = lp.getUint8( 0xa );

		return ret;
	},

	0x74: function PACKET_ZC_REFUSE_ENTER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.ErrorCode = lp.getUint8( 0x2 );

		return ret;
	},

	0x75: function PACKET_ZC_NOTIFY_INITCHAR( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.GID = lp.getUint32( 0x4, true );
		ret.Style = lp.getInt16( 0x8, true );
		ret.Item = lp.getUint8( 0xa );

		return ret;
	},

	0x76: function PACKET_ZC_NOTIFY_UPDATECHAR( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );
		ret.Style = lp.getInt16( 0x6, true );
		ret.Item = lp.getUint8( 0x8 );

		return ret;
	},

	0x77: function PACKET_ZC_NOTIFY_UPDATEPLAYER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Style = lp.getInt16( 0x2, true );
		ret.Item = lp.getUint8( 0x4 );

		return ret;
	},

	0x78: function PACKET_ZC_NOTIFY_STANDENTRY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.objecttype = lp.getUint8( 0x2 );
		ret.GID = lp.getUint32( 0x3, true );
		ret.speed = lp.getInt16( 0x7, true );
		ret.bodyState = lp.getInt16( 0x9, true );
		ret.healthState = lp.getInt16( 0xb, true );
		ret.effectState = lp.getInt16( 0xd, true );
		ret.job = lp.getInt16( 0xf, true );
		ret.head = lp.getInt16( 0x11, true );
		ret.weapon = lp.getInt16( 0x13, true );
		ret.accessory = lp.getInt16( 0x15, true );
		ret.shield = lp.getInt16( 0x17, true );
		ret.accessory2 = lp.getInt16( 0x19, true );
		ret.accessory3 = lp.getInt16( 0x1b, true );
		ret.headpalette = lp.getInt16( 0x1d, true );
		ret.bodypalette = lp.getInt16( 0x1f, true );
		ret.headDir = lp.getInt16( 0x21, true );
		ret.GUID = lp.getUint32( 0x23, true );
		ret.GEmblemVer = lp.getInt16( 0x27, true );
		ret.honor = lp.getInt16( 0x29, true );
		ret.virtue = lp.getInt16( 0x2b, true );
		ret.isPKModeON = lp.getUint8( 0x2d );
		ret.sex = lp.getUint8( 0x2e );
		ret.PosDir = new Uint8Array( buf.slice( 0x2f, 0x32 ) );
		ret.xSize = lp.getUint8( 0x32 );
		ret.ySize = lp.getUint8( 0x33 );
		ret.state = lp.getUint8( 0x34 );
		ret.clevel = lp.getInt16( 0x35, true );

		return ret;
	},

	0x79: function PACKET_ZC_NOTIFY_NEWENTRY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );
		ret.speed = lp.getInt16( 0x6, true );
		ret.bodyState = lp.getInt16( 0x8, true );
		ret.healthState = lp.getInt16( 0xa, true );
		ret.effectState = lp.getInt16( 0xc, true );
		ret.job = lp.getInt16( 0xe, true );
		ret.head = lp.getInt16( 0x10, true );
		ret.weapon = lp.getInt16( 0x12, true );
		ret.accessory = lp.getInt16( 0x14, true );
		ret.shield = lp.getInt16( 0x16, true );
		ret.accessory2 = lp.getInt16( 0x18, true );
		ret.accessory3 = lp.getInt16( 0x1a, true );
		ret.headpalette = lp.getInt16( 0x1c, true );
		ret.bodypalette = lp.getInt16( 0x1e, true );
		ret.headDir = lp.getInt16( 0x20, true );
		ret.GUID = lp.getUint32( 0x22, true );
		ret.GEmblemVer = lp.getInt16( 0x26, true );
		ret.honor = lp.getInt16( 0x28, true );
		ret.virtue = lp.getInt16( 0x2a, true );
		ret.isPKModeON = lp.getUint8( 0x2c );
		ret.sex = lp.getUint8( 0x2d );
		ret.PosDir = new Uint8Array( buf.slice( 0x2e, 0x31 ) );
		ret.xSize = lp.getUint8( 0x31 );
		ret.ySize = lp.getUint8( 0x32 );
		ret.clevel = lp.getInt16( 0x33, true );

		return ret;
	},

	0x7a: function PACKET_ZC_NOTIFY_ACTENTRY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );
		ret.speed = lp.getInt16( 0x6, true );
		ret.bodyState = lp.getInt16( 0x8, true );
		ret.healthState = lp.getInt16( 0xa, true );
		ret.effectState = lp.getInt16( 0xc, true );
		ret.job = lp.getInt16( 0xe, true );
		ret.head = lp.getInt16( 0x10, true );
		ret.weapon = lp.getInt16( 0x12, true );
		ret.accessory = lp.getInt16( 0x14, true );
		ret.shield = lp.getInt16( 0x16, true );
		ret.accessory2 = lp.getInt16( 0x18, true );
		ret.accessory3 = lp.getInt16( 0x1a, true );
		ret.headpalette = lp.getInt16( 0x1c, true );
		ret.bodypalette = lp.getInt16( 0x1e, true );
		ret.headDir = lp.getInt16( 0x20, true );
		ret.GUID = lp.getUint32( 0x22, true );
		ret.GEmblemVer = lp.getInt16( 0x26, true );
		ret.honor = lp.getInt16( 0x28, true );
		ret.virtue = lp.getInt16( 0x2a, true );
		ret.isPKModeON = lp.getUint8( 0x2c );
		ret.sex = lp.getUint8( 0x2d );
		ret.PosDir = new Uint8Array( buf.slice( 0x2e, 0x31 ) );
		ret.xSize = lp.getUint8( 0x31 );
		ret.ySize = lp.getUint8( 0x32 );
		ret.action = lp.getUint8( 0x33 );
		ret.actStartTime = lp.getUint32( 0x34, true );
		ret.clevel = lp.getInt16( 0x38, true );

		return ret;
	},

	0x7b: function PACKET_ZC_NOTIFY_MOVEENTRY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );
		ret.speed = lp.getInt16( 0x6, true );
		ret.bodyState = lp.getInt16( 0x8, true );
		ret.healthState = lp.getInt16( 0xa, true );
		ret.effectState = lp.getInt16( 0xc, true );
		ret.job = lp.getInt16( 0xe, true );
		ret.head = lp.getInt16( 0x10, true );
		ret.weapon = lp.getInt16( 0x12, true );
		ret.accessory = lp.getInt16( 0x14, true );
		ret.moveStartTime = lp.getUint32( 0x16, true );
		ret.shield = lp.getInt16( 0x1a, true );
		ret.accessory2 = lp.getInt16( 0x1c, true );
		ret.accessory3 = lp.getInt16( 0x1e, true );
		ret.headpalette = lp.getInt16( 0x20, true );
		ret.bodypalette = lp.getInt16( 0x22, true );
		ret.headDir = lp.getInt16( 0x24, true );
		ret.GUID = lp.getUint32( 0x26, true );
		ret.GEmblemVer = lp.getInt16( 0x2a, true );
		ret.honor = lp.getInt16( 0x2c, true );
		ret.virtue = lp.getInt16( 0x2e, true );
		ret.isPKModeON = lp.getUint8( 0x30 );
		ret.sex = lp.getUint8( 0x31 );
		ret.MoveData = new Uint8Array( buf.slice( 0x32, 0x38 ) );
		ret.xSize = lp.getUint8( 0x38 );
		ret.ySize = lp.getUint8( 0x39 );
		ret.clevel = lp.getInt16( 0x3a, true );

		return ret;
	},

	0x7c: function PACKET_ZC_NOTIFY_STANDENTRY_NPC( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.objecttype = lp.getUint8( 0x2 );
		ret.GID = lp.getUint32( 0x3, true );
		ret.speed = lp.getInt16( 0x7, true );
		ret.bodyState = lp.getInt16( 0x9, true );
		ret.healthState = lp.getInt16( 0xb, true );
		ret.effectState = lp.getInt16( 0xd, true );
		ret.head = lp.getInt16( 0xf, true );
		ret.weapon = lp.getInt16( 0x11, true );
		ret.accessory = lp.getInt16( 0x13, true );
		ret.job = lp.getInt16( 0x15, true );
		ret.shield = lp.getInt16( 0x17, true );
		ret.accessory2 = lp.getInt16( 0x19, true );
		ret.accessory3 = lp.getInt16( 0x1b, true );
		ret.headpalette = lp.getInt16( 0x1d, true );
		ret.bodypalette = lp.getInt16( 0x1f, true );
		ret.headDir = lp.getInt16( 0x21, true );
		ret.isPKModeON = lp.getUint8( 0x23 );
		ret.sex = lp.getUint8( 0x24 );
		ret.PosDir = new Uint8Array( buf.slice( 0x25, 0x28 ) );
		ret.xSize = lp.getUint8( 0x28 );
		ret.ySize = lp.getUint8( 0x29 );

		return ret;
	},

	0x7d: function PACKET_CZ_NOTIFY_ACTORINIT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	/*0x7e: function PACKET_CZ_REQUEST_TIME( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.clientTime = lp.getUint32( 0x2, true );

		return ret;
	},*/ // #PACKERVER 5 ticksend

	0x7f: function PACKET_ZC_NOTIFY_TIME( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.time = lp.getUint32( 0x2, true );

		return ret;
	},

	0x80: function PACKET_ZC_NOTIFY_VANISH( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );
		ret.type = lp.getUint8( 0x6 );

		return ret;
	},

	0x81: function PACKET_SC_NOTIFY_BAN( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.ErrorCode = lp.getUint8( 0x2 );

		return ret;
	},

	0x82: function PACKET_CZ_REQUEST_QUIT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x83: function PACKET_ZC_ACCEPT_QUIT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x84: function PACKET_ZC_REFUSE_QUIT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x85: function PACKET_CZ_REQUEST_MOVE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.dest = new Uint8Array( buf.slice( 0x2, 0x5 ) );

		return ret;
	},

	0x86: function PACKET_ZC_NOTIFY_MOVE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );
		ret.MoveData = new Uint8Array( buf.slice( 0x6, 0xc ) );
		ret.moveStartTime = lp.getUint32( 0xc, true );

		return ret;
	},

	0x87: function PACKET_ZC_NOTIFY_PLAYERMOVE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.moveStartTime = lp.getUint32( 0x2, true );
		ret.MoveData = new Uint8Array( buf.slice( 0x6, 0xc ) );

		return ret;
	},

	0x88: function PACKET_ZC_STOPMOVE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.xPos = lp.getInt16( 0x6, true );
		ret.yPos = lp.getInt16( 0x8, true );

		return ret;
	},

	/*0x89: function PACKET_CZ_REQUEST_ACT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.targetGID = lp.getUint32( 0x2, true );
		ret.action = lp.getUint8( 0x6 );

		return ret;
	},*/ // #PACKETVER 5

	0x8a: function PACKET_ZC_NOTIFY_ACT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );
		ret.targetGID = lp.getUint32( 0x6, true );
		ret.startTime = lp.getUint32( 0xa, true );
		ret.attackMT = lp.getInt32( 0xe, true );
		ret.attackedMT = lp.getInt32( 0x12, true );
		ret.damage = lp.getInt16( 0x16, true );
		ret.count = lp.getInt16( 0x18, true );
		ret.action = lp.getUint8( 0x1a );
		ret.leftDamage = lp.getInt16( 0x1b, true );

		return ret;
	},

	0x8b: function PACKET_ZC_NOTIFY_ACT_POSITION( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );
		ret.targetGID = lp.getUint32( 0x6, true );
		ret.startTime = lp.getUint32( 0xa, true );
		ret.xPos = lp.getInt16( 0xe, true );
		ret.yPos = lp.getInt16( 0x10, true );
		ret.damage = lp.getInt16( 0x12, true );
		ret.count = lp.getInt16( 0x14, true );
		ret.action = lp.getUint8( 0x16 );

		return ret;
	},

	0x8c: function PACKET_CZ_REQUEST_CHAT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.msg = new Uint8Array( buf.slice( 0x4 ) );

		return ret;
	},

	0x8d: function PACKET_ZC_NOTIFY_CHAT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.GID = lp.getUint32( 0x4, true );
		ret.msg = new Uint8Array( buf.slice( 0x8 ) );

		return ret;
	},

	0x8e: function PACKET_ZC_NOTIFY_PLAYERCHAT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.msg = new Uint8Array( buf.slice( 0x4 ) );

		return ret;
	},

	0x8f: function PACKET_SERVER_ENTRY_ACK( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.Header = lp.getInt16( 0x0, true );
		ret.AID = lp.getInt32( 0x2, true );

		return ret;
	},

	0x90: function PACKET_CZ_CONTACTNPC( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.NAID = lp.getUint32( 0x2, true );
		ret.type = lp.getUint8( 0x6 );

		return ret;
	},

	0x91: function PACKET_ZC_NPCACK_MAPMOVE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.mapName = new Uint8Array( buf.slice( 0x2, 0x12 ) );
		ret.xPos = lp.getInt16( 0x12, true );
		ret.yPos = lp.getInt16( 0x14, true );

		return ret;
	},

	0x92: function PACKET_ZC_NPCACK_SERVERMOVE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.mapName = new Uint8Array( buf.slice( 0x2, 0x12 ) );
		ret.xPos = lp.getInt16( 0x12, true );
		ret.yPos = lp.getInt16( 0x14, true );
		
		// ZSERVER_ADDR
		ret.addr = {
			ip: lp.getUint32( 0x16, true ),
			port: lp.getInt16( 0x1a, true ),
		};


		return ret;
	},

	0x93: function PACKET_ZC_NPCACK_ENABLE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x94: function PACKET_CZ_REQNAME( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );

		return ret;
	},

	0x95: function PACKET_ZC_ACK_REQNAME( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.CName = new Uint8Array( buf.slice( 0x6, 0x1e ) );

		return ret;
	},

	0x96: function PACKET_CZ_WHISPER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.receiver = new Uint8Array( buf.slice( 0x4, 0x1c ) );
		ret.msg = new Uint8Array( buf.slice( 0x2c ) );

		return ret;
	},

	0x97: function PACKET_ZC_WHISPER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.sender = new Uint8Array( buf.slice( 0x4, 0x1c ) );
		ret.msg = new Uint8Array( buf.slice( 0x2c ) );

		return ret;
	},

	0x98: function PACKET_ZC_ACK_WHISPER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.result = lp.getUint8( 0x2 );

		return ret;
	},

	0x99: function PACKET_CZ_BROADCAST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.msg = new Uint8Array( buf.slice( 0x4 ) );

		return ret;
	},

	0x9a: function PACKET_ZC_BROADCAST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.msg = new Uint8Array( buf.slice( 0x4 ) );

		return ret;
	},

	0x9b: function PACKET_CZ_CHANGE_DIRECTION( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.headDir = lp.getInt16( 0x2, true );
		ret.dir = lp.getUint8( 0x4 );

		return ret;
	},

	0x9c: function PACKET_ZC_CHANGE_DIRECTION( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.headDir = lp.getInt16( 0x6, true );
		ret.dir = lp.getUint8( 0x8 );

		return ret;
	},

	0x9d: function PACKET_ZC_ITEM_ENTRY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.ITAID = lp.getUint32( 0x2, true );
		ret.ITID = lp.getUint16( 0x6, true );
		ret.IsIdentified = lp.getUint8( 0x8 );
		ret.xPos = lp.getInt16( 0x9, true );
		ret.yPos = lp.getInt16( 0xb, true );
		ret.count = lp.getInt16( 0xd, true );
		ret.subX = lp.getUint8( 0xf );
		ret.subY = lp.getUint8( 0x10 );

		return ret;
	},

	0x9e: function PACKET_ZC_ITEM_FALL_ENTRY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.ITAID = lp.getUint32( 0x2, true );
		ret.ITID = lp.getUint16( 0x6, true );
		ret.IsIdentified = lp.getUint8( 0x8 );
		ret.xPos = lp.getInt16( 0x9, true );
		ret.yPos = lp.getInt16( 0xb, true );
		ret.subX = lp.getUint8( 0xd );
		ret.subY = lp.getUint8( 0xe );
		ret.count = lp.getInt16( 0xf, true );

		return ret;
	},

	0x9f: function PACKET_CZ_ITEM_PICKUP( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.ITAID = lp.getUint32( 0x2, true );

		return ret;
	},

	0xa0: function PACKET_ZC_ITEM_PICKUP_ACK( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Index = lp.getUint16( 0x2, true );
		ret.count = lp.getUint16( 0x4, true );
		ret.ITID = lp.getUint16( 0x6, true );
		ret.IsIdentified = lp.getUint8( 0x8 );
		ret.IsDamaged = lp.getUint8( 0x9 );
		ret.refiningLevel = lp.getUint8( 0xa );
		
		// EQUIPSLOTINFOEQUIPSLOTINFO
		ret.slot = {
			card1: lp.getUint16( 0xb, true ),
			card2: lp.getUint16( 0xd, true ),
			card3: lp.getUint16( 0xf, true ),
			card4: lp.getUint16( 0x11, true ),
		};

		ret.location = lp.getUint16( 0x13, true );
		ret.type = lp.getUint8( 0x15 );
		ret.result = lp.getUint8( 0x16 );

		return ret;
	},

	0xa1: function PACKET_ZC_ITEM_DISAPPEAR( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.ITAID = lp.getUint32( 0x2, true );

		return ret;
	},

	0xa2: function PACKET_CZ_ITEM_THROW( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Index = lp.getUint16( 0x2, true );
		ret.count = lp.getInt16( 0x4, true );

		return ret;
	},

	0xa3: function PACKET_ZC_NORMAL_ITEMLIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.itemInfo = [];

		// NORMALITEM_EXTRAINFO
		for( p = 0x4; p < buf.byteLength; p += 10 ) {

			var ret2 = {};

			ret2.index = lp.getInt16( p + 0x0, true );
			ret2.ITID = lp.getUint16( p + 0x2, true );
			ret2.type = lp.getUint8( p + 0x4 );
			ret2.IsIdentified = lp.getUint8( p + 0x5 );
			ret2.count = lp.getInt16( p + 0x6, true );
			ret2.WearState = lp.getUint16( p + 0x8, true );

			ret.itemInfo.push( ret2 );

		}

		return ret;
	},

	0xa4: function PACKET_ZC_EQUIPMENT_ITEMLIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.itemInfo = [];

		// EQUIPMENTITEM_EXTRAINFO
		for( p = 0x4; p < buf.byteLength; p += 20 ) {

			var ret2 = {};

			ret2.index = lp.getInt16( p + 0x0, true );
			ret2.ITID = lp.getUint16( p + 0x2, true );
			ret2.type = lp.getUint8( p + 0x4 );
			ret2.IsIdentified = lp.getUint8( p + 0x5 );
			ret2.location = lp.getUint16( p + 0x6, true );
			ret2.WearState = lp.getUint16( p + 0x8, true );
			ret2.IsDamaged = lp.getUint8( p + 0xa );
			ret2.RefiningLevel = lp.getUint8( p + 0xb );
			
			// EQUIPSLOTINFO
			ret2.slot = {
				card1: lp.getUint16( p + 0xc, true ),
				card2: lp.getUint16( p + 0xe, true ),
				card3: lp.getUint16( p + 0x10, true ),
				card4: lp.getUint16( p + 0x12, true ),
			};


			ret.itemInfo.push( ret2 );

		}

		return ret;
	},

	0xa5: function PACKET_ZC_STORE_NORMAL_ITEMLIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.itemInfo = [];

		// NORMALITEM_EXTRAINFO
		for( p = 0x4; p < buf.byteLength; p += 10 ) {

			var ret2 = {};

			ret2.index = lp.getInt16( p + 0x0, true );
			ret2.ITID = lp.getUint16( p + 0x2, true );
			ret2.type = lp.getUint8( p + 0x4 );
			ret2.IsIdentified = lp.getUint8( p + 0x5 );
			ret2.count = lp.getInt16( p + 0x6, true );
			ret2.WearState = lp.getUint16( p + 0x8, true );

			ret.itemInfo.push( ret2 );

		}

		return ret;
	},

	0xa6: function PACKET_ZC_STORE_EQUIPMENT_ITEMLIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.itemInfo = [];

		// EQUIPMENTITEM_EXTRAINFO
		for( p = 0x4; p < buf.byteLength; p += 20 ) {

			var ret2 = {};

			ret2.index = lp.getInt16( p + 0x0, true );
			ret2.ITID = lp.getUint16( p + 0x2, true );
			ret2.type = lp.getUint8( p + 0x4 );
			ret2.IsIdentified = lp.getUint8( p + 0x5 );
			ret2.location = lp.getUint16( p + 0x6, true );
			ret2.WearState = lp.getUint16( p + 0x8, true );
			ret2.IsDamaged = lp.getUint8( p + 0xa );
			ret2.RefiningLevel = lp.getUint8( p + 0xb );
			
			// EQUIPSLOTINFO
			ret2.slot = {
				card1: lp.getUint16( p + 0xc, true ),
				card2: lp.getUint16( p + 0xe, true ),
				card3: lp.getUint16( p + 0x10, true ),
				card4: lp.getUint16( p + 0x12, true ),
			};


			ret.itemInfo.push( ret2 );

		}

		return ret;
	},

	0xa7: function PACKET_CZ_USE_ITEM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getUint16( 0x2, true );
		ret.AID = lp.getUint32( 0x4, true );

		return ret;
	},

	0xa8: function PACKET_ZC_USE_ITEM_ACK( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getUint16( 0x2, true );
		ret.count = lp.getInt16( 0x4, true );
		ret.result = lp.getUint8( 0x6 );

		return ret;
	},

	0xa9: function PACKET_CZ_REQ_WEAR_EQUIP( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getUint16( 0x2, true );
		ret.wearLocation = lp.getUint16( 0x4, true );

		return ret;
	},

	0xaa: function PACKET_ZC_REQ_WEAR_EQUIP_ACK( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getUint16( 0x2, true );
		ret.wearLocation = lp.getUint16( 0x4, true );
		ret.result = lp.getUint8( 0x6 );

		return ret;
	},

	0xab: function PACKET_CZ_REQ_TAKEOFF_EQUIP( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getUint16( 0x2, true );

		return ret;
	},

	0xac: function PACKET_ZC_REQ_TAKEOFF_EQUIP_ACK( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getUint16( 0x2, true );
		ret.wearLocation = lp.getUint16( 0x4, true );
		ret.result = lp.getUint8( 0x6 );

		return ret;
	},

	0xaf: function PACKET_ZC_ITEM_THROW_ACK( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Index = lp.getUint16( 0x2, true );
		ret.count = lp.getInt16( 0x4, true );

		return ret;
	},

	0xb0: function PACKET_ZC_PAR_CHANGE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.varID = lp.getUint16( 0x2, true );
		ret.count = lp.getInt32( 0x4, true );

		return ret;
	},

	0xb1: function PACKET_ZC_LONGPAR_CHANGE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.varID = lp.getUint16( 0x2, true );
		ret.amount = lp.getInt32( 0x4, true );

		return ret;
	},

	0xb2: function PACKET_CZ_RESTART( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.type = lp.getUint8( 0x2 );

		return ret;
	},

	0xb3: function PACKET_ZC_RESTART_ACK( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.type = lp.getUint8( 0x2 );

		return ret;
	},

	0xb4: function PACKET_ZC_SAY_DIALOG( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.NAID = lp.getUint32( 0x4, true );
		ret.msg = new Uint8Array( buf.slice( 0x8 ) );

		return ret;
	},

	0xb5: function PACKET_ZC_WAIT_DIALOG( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.NAID = lp.getUint32( 0x2, true );

		return ret;
	},

	0xb6: function PACKET_ZC_CLOSE_DIALOG( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.NAID = lp.getUint32( 0x2, true );

		return ret;
	},

	0xb7: function PACKET_ZC_MENU_LIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.NAID = lp.getUint32( 0x4, true );
		ret.msg = new Uint8Array( buf.slice( 0x8 ) );

		return ret;
	},

	0xb8: function PACKET_CZ_CHOOSE_MENU( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.NAID = lp.getUint32( 0x2, true );
		ret.num = lp.getUint8( 0x6 );

		return ret;
	},

	0xb9: function PACKET_CZ_REQ_NEXT_SCRIPT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.NAID = lp.getUint32( 0x2, true );

		return ret;
	},

	0xba: function PACKET_CZ_REQ_STATUS( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0xbb: function PACKET_CZ_STATUS_CHANGE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.statusID = lp.getUint16( 0x2, true );
		ret.changeAmount = lp.getUint8( 0x4 );

		return ret;
	},

	0xbc: function PACKET_ZC_STATUS_CHANGE_ACK( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.statusID = lp.getUint16( 0x2, true );
		ret.result = lp.getUint8( 0x4 );
		ret.value = lp.getUint8( 0x5 );

		return ret;
	},

	0xbd: function PACKET_ZC_STATUS( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.point = lp.getInt16( 0x2, true );
		ret.str = lp.getUint8( 0x4 );
		ret.standardStr = lp.getUint8( 0x5 );
		ret.agi = lp.getUint8( 0x6 );
		ret.standardAgi = lp.getUint8( 0x7 );
		ret.vit = lp.getUint8( 0x8 );
		ret.standardVit = lp.getUint8( 0x9 );
		ret.Int = lp.getUint8( 0xa );
		ret.standardInt = lp.getUint8( 0xb );
		ret.dex = lp.getUint8( 0xc );
		ret.standardDex = lp.getUint8( 0xd );
		ret.luk = lp.getUint8( 0xe );
		ret.standardLuk = lp.getUint8( 0xf );
		ret.attPower = lp.getInt16( 0x10, true );
		ret.refiningPower = lp.getInt16( 0x12, true );
		ret.max_mattPower = lp.getInt16( 0x14, true );
		ret.min_mattPower = lp.getInt16( 0x16, true );
		ret.itemdefPower = lp.getInt16( 0x18, true );
		ret.plusdefPower = lp.getInt16( 0x1a, true );
		ret.mdefPower = lp.getInt16( 0x1c, true );
		ret.plusmdefPower = lp.getInt16( 0x1e, true );
		ret.hitSuccessValue = lp.getInt16( 0x20, true );
		ret.avoidSuccessValue = lp.getInt16( 0x22, true );
		ret.plusAvoidSuccessValue = lp.getInt16( 0x24, true );
		ret.criticalSuccessValue = lp.getInt16( 0x26, true );
		ret.ASPD = lp.getInt16( 0x28, true );
		ret.plusASPD = lp.getInt16( 0x2a, true );

		return ret;
	},

	0xbe: function PACKET_ZC_STATUS_CHANGE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.statusID = lp.getUint16( 0x2, true );
		ret.value = lp.getUint8( 0x4 );

		return ret;
	},

	0xbf: function PACKET_CZ_REQ_EMOTION( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.type = lp.getUint8( 0x2 );

		return ret;
	},

	0xc0: function PACKET_ZC_EMOTION( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );
		ret.type = lp.getUint8( 0x6 );

		return ret;
	},

	0xc1: function PACKET_CZ_REQ_USER_COUNT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0xc2: function PACKET_ZC_USER_COUNT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.count = lp.getInt32( 0x2, true );

		return ret;
	},

	0xc3: function PACKET_ZC_SPRITE_CHANGE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );
		ret.type = lp.getUint8( 0x6 );
		ret.value = lp.getUint8( 0x7 );

		return ret;
	},

	0xc4: function PACKET_ZC_SELECT_DEALTYPE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.NAID = lp.getUint32( 0x2, true );

		return ret;
	},

	0xc5: function PACKET_CZ_ACK_SELECT_DEALTYPE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.NAID = lp.getUint32( 0x2, true );
		ret.type = lp.getUint8( 0x6 );

		return ret;
	},

	0xc6: function PACKET_ZC_PC_PURCHASE_ITEMLIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.itemList = [];

		// PURCHASE_ITEM
		for( p = 0x4; p < buf.byteLength; p += 11 ) {

			var ret2 = {};

			ret2.price = lp.getInt32( p + 0x0, true );
			ret2.discountprice = lp.getInt32( p + 0x4, true );
			ret2.type = lp.getUint8( p + 0x8 );
			ret2.ITID = lp.getUint16( p + 0x9, true );

			ret.itemList.push( ret2 );

		}

		return ret;
	},

	0xc7: function PACKET_ZC_PC_SELL_ITEMLIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.itemList = [];

		// SELL_ITEM
		for( p = 0x4; p < buf.byteLength; p += 10 ) {

			var ret2 = {};

			ret2.index = lp.getInt16( p + 0x0, true );
			ret2.price = lp.getInt32( p + 0x2, true );
			ret2.overchargeprice = lp.getInt32( p + 0x6, true );

			ret.itemList.push( ret2 );

		}

		return ret;
	},

	0xc8: function PACKET_CZ_PC_PURCHASE_ITEMLIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.itemList = [];

		// CZ_PURCHASE_ITEM
		for( p = 0x4; p < buf.byteLength; p += 4 ) {

			var ret2 = {};

			ret2.count = lp.getInt16( p + 0x0, true );
			ret2.ITID = lp.getUint16( p + 0x2, true );

			ret.itemList.push( ret2 );

		}

		return ret;
	},

	0xc9: function PACKET_CZ_PC_SELL_ITEMLIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.itemList = [];

		// CZ_SELL_ITEM
		for( p = 0x4; p < buf.byteLength; p += 4 ) {

			var ret2 = {};

			ret2.index = lp.getInt16( p + 0x0, true );
			ret2.count = lp.getInt16( p + 0x2, true );

			ret.itemList.push( ret2 );

		}

		return ret;
	},

	0xca: function PACKET_ZC_PC_PURCHASE_RESULT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.result = lp.getUint8( 0x2 );

		return ret;
	},

	0xcb: function PACKET_ZC_PC_SELL_RESULT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.result = lp.getUint8( 0x2 );

		return ret;
	},

	0xcc: function PACKET_CZ_DISCONNECT_CHARACTER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );

		return ret;
	},

	0xcd: function PACKET_ZC_ACK_DISCONNECT_CHARACTER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.result = lp.getUint8( 0x2 );

		return ret;
	},

	0xce: function PACKET_CZ_DISCONNECT_ALL_CHARACTER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0xcf: function PACKET_CZ_SETTING_WHISPER_PC( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.name = new Uint8Array( buf.slice( 0x2, 0x1a ) );
		ret.type = lp.getUint8( 0x1a );

		return ret;
	},

	0xd0: function PACKET_CZ_SETTING_WHISPER_STATE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.type = lp.getUint8( 0x2 );

		return ret;
	},

	0xd1: function PACKET_ZC_SETTING_WHISPER_PC( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.type = lp.getUint8( 0x2 );
		ret.result = lp.getUint8( 0x3 );

		return ret;
	},

	0xd2: function PACKET_ZC_SETTING_WHISPER_STATE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.type = lp.getUint8( 0x2 );
		ret.result = lp.getUint8( 0x3 );

		return ret;
	},

	0xd3: function PACKET_CZ_REQ_WHISPER_LIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0xd4: function PACKET_ZC_WHISPER_LIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.wisperList = [];

		// WHISPER_ITEM
		for( p = 0x4; p < buf.byteLength; p += 24 ) {

			var ret2 = {};

			ret2.name = new Uint8Array( buf.slice( p + 0x0, p + 0x18 ) );

			ret.wisperList.push( ret2 );

		}

		return ret;
	},

	0xd5: function PACKET_CZ_CREATE_CHATROOM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.size = lp.getInt16( 0x4, true );
		ret.type = lp.getUint8( 0x6 );
		ret.passwd = new Uint8Array( buf.slice( 0x7, 0xf ) );
		ret.title = new Uint8Array( buf.slice( 0xf ) );

		return ret;
	},

	0xd6: function PACKET_ZC_ACK_CREATE_CHATROOM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.result = lp.getUint8( 0x2 );

		return ret;
	},

	0xd7: function PACKET_ZC_ROOM_NEWENTRY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.AID = lp.getUint32( 0x4, true );
		ret.roomID = lp.getUint32( 0x8, true );
		ret.maxcount = lp.getInt16( 0xc, true );
		ret.curcount = lp.getInt16( 0xe, true );
		ret.type = lp.getUint8( 0x10 );
		ret.title = new Uint8Array( buf.slice( 0x11 ) );

		return ret;
	},

	0xd8: function PACKET_ZC_DESTROY_ROOM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.roomID = lp.getUint32( 0x2, true );

		return ret;
	},

	0xd9: function PACKET_CZ_REQ_ENTER_ROOM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.roomID = lp.getUint32( 0x2, true );
		ret.passwd = new Uint8Array( buf.slice( 0x6, 0xe ) );

		return ret;
	},

	0xda: function PACKET_ZC_REFUSE_ENTER_ROOM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.result = lp.getUint8( 0x2 );

		return ret;
	},

	0xdb: function PACKET_ZC_ENTER_ROOM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.roomID = lp.getUint32( 0x4, true );
		
		ret.memberList = [];

		// ROOM_MEMBER
		for( p = 0x8; p < buf.byteLength; p += 28 ) {

			var ret2 = {};

			ret2.role = lp.getUint32( p + 0x0, true );
			ret2.name = new Uint8Array( buf.slice( p + 0x4, p + 0x1c ) );

			ret.memberList.push( ret2 );

		}

		return ret;
	},

	0xdc: function PACKET_ZC_MEMBER_NEWENTRY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.curcount = lp.getInt16( 0x2, true );
		ret.name = new Uint8Array( buf.slice( 0x4, 0x1c ) );

		return ret;
	},

	0xdd: function PACKET_ZC_MEMBER_EXIT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.curcount = lp.getInt16( 0x2, true );
		ret.name = new Uint8Array( buf.slice( 0x4, 0x1c ) );
		ret.type = lp.getUint8( 0x1c );

		return ret;
	},

	0xde: function PACKET_CZ_CHANGE_CHATROOM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.size = lp.getInt16( 0x4, true );
		ret.type = lp.getUint8( 0x6 );
		ret.passwd = new Uint8Array( buf.slice( 0x7, 0xf ) );
		ret.title = new Uint8Array( buf.slice( 0xf ) );

		return ret;
	},

	0xdf: function PACKET_ZC_CHANGE_CHATROOM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.AID = lp.getUint32( 0x4, true );
		ret.roomID = lp.getUint32( 0x8, true );
		ret.maxcount = lp.getInt16( 0xc, true );
		ret.curcount = lp.getInt16( 0xe, true );
		ret.type = lp.getUint8( 0x10 );
		ret.title = new Uint8Array( buf.slice( 0x11 ) );

		return ret;
	},

	0xe0: function PACKET_CZ_REQ_ROLE_CHANGE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.role = lp.getUint32( 0x2, true );
		ret.name = new Uint8Array( buf.slice( 0x6, 0x1e ) );

		return ret;
	},

	0xe1: function PACKET_ZC_ROLE_CHANGE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.role = lp.getUint32( 0x2, true );
		ret.name = new Uint8Array( buf.slice( 0x6, 0x1e ) );

		return ret;
	},

	0xe2: function PACKET_CZ_REQ_EXPEL_MEMBER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.name = new Uint8Array( buf.slice( 0x2, 0x1a ) );

		return ret;
	},

	0xe3: function PACKET_CZ_EXIT_ROOM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0xe4: function PACKET_CZ_REQ_EXCHANGE_ITEM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );

		return ret;
	},

	0xe5: function PACKET_ZC_REQ_EXCHANGE_ITEM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.name = new Uint8Array( buf.slice( 0x2, 0x1a ) );

		return ret;
	},

	0xe6: function PACKET_CZ_ACK_EXCHANGE_ITEM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.result = lp.getUint8( 0x2 );

		return ret;
	},

	0xe7: function PACKET_ZC_ACK_EXCHANGE_ITEM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.result = lp.getUint8( 0x2 );

		return ret;
	},

	0xe8: function PACKET_CZ_ADD_EXCHANGE_ITEM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getInt16( 0x2, true );
		ret.count = lp.getInt32( 0x4, true );

		return ret;
	},

	0xe9: function PACKET_ZC_ADD_EXCHANGE_ITEM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.count = lp.getInt32( 0x2, true );
		ret.ITID = lp.getUint16( 0x6, true );
		ret.IsIdentified = lp.getUint8( 0x8 );
		ret.IsDamaged = lp.getUint8( 0x9 );
		ret.refiningLevel = lp.getUint8( 0xa );
		
		// EQUIPSLOTINFO
		ret.slot = {
			card1: lp.getUint16( 0xb, true ),
			card2: lp.getUint16( 0xd, true ),
			card3: lp.getUint16( 0xf, true ),
			card4: lp.getUint16( 0x11, true ),
		};


		return ret;
	},

	0xea: function PACKET_ZC_ACK_ADD_EXCHANGE_ITEM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Index = lp.getInt16( 0x2, true );
		ret.result = lp.getUint8( 0x4 );

		return ret;
	},

	0xeb: function PACKET_CZ_CONCLUDE_EXCHANGE_ITEM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0xec: function PACKET_ZC_CONCLUDE_EXCHANGE_ITEM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.who = lp.getUint8( 0x2 );

		return ret;
	},

	0xed: function PACKET_CZ_CANCEL_EXCHANGE_ITEM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0xee: function PACKET_ZC_CANCEL_EXCHANGE_ITEM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0xef: function PACKET_CZ_EXEC_EXCHANGE_ITEM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0xf0: function PACKET_ZC_EXEC_EXCHANGE_ITEM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.result = lp.getUint8( 0x2 );

		return ret;
	},

	0xf1: function PACKET_ZC_EXCHANGEITEM_UNDO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0xf2: function PACKET_ZC_NOTIFY_STOREITEM_COUNTINFO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.curCount = lp.getInt16( 0x2, true );
		ret.maxCount = lp.getInt16( 0x4, true );

		return ret;
	},

	0xf3: function PACKET_CZ_MOVE_ITEM_FROM_BODY_TO_STORE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getInt16( 0x2, true );
		ret.count = lp.getInt32( 0x4, true );

		return ret;
	},

	0xf4: function PACKET_ZC_ADD_ITEM_TO_STORE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getInt16( 0x2, true );
		ret.count = lp.getInt32( 0x4, true );
		ret.ITID = lp.getUint16( 0x8, true );
		ret.IsIdentified = lp.getUint8( 0xa );
		ret.IsDamaged = lp.getUint8( 0xb );
		ret.refiningLevel = lp.getUint8( 0xc );
		
		// EQUIPSLOTINFO
		ret.slot = {
			card1: lp.getUint16( 0xd, true ),
			card2: lp.getUint16( 0xf, true ),
			card3: lp.getUint16( 0x11, true ),
			card4: lp.getUint16( 0x13, true ),
		};


		return ret;
	},

	0xf5: function PACKET_CZ_MOVE_ITEM_FROM_STORE_TO_BODY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getInt16( 0x2, true );
		ret.count = lp.getInt32( 0x4, true );

		return ret;
	},

	0xf6: function PACKET_ZC_DELETE_ITEM_FROM_STORE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getInt16( 0x2, true );
		ret.count = lp.getInt32( 0x4, true );

		return ret;
	},

	0xf7: function PACKET_CZ_CLOSE_STORE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0xf8: function PACKET_ZC_CLOSE_STORE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0xf9: function PACKET_CZ_MAKE_GROUP( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.groupName = new Uint8Array( buf.slice( 0x2, 0x1a ) );

		return ret;
	},

	0xfa: function PACKET_ZC_ACK_MAKE_GROUP( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.result = lp.getUint8( 0x2 );

		return ret;
	},

	0xfb: function PACKET_ZC_GROUP_LIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.groupName = new Uint8Array( buf.slice( 0x4, 0x1c ) );
		
		ret.groupInfo = [];

		// GROUPMEMBER_INFO
		for( p = 0x1c; p < buf.byteLength; p += 46 ) {

			var ret2 = {};

			ret2.AID = lp.getUint32( p + 0x0, true );
			ret2.characterName = new Uint8Array( buf.slice( p + 0x4, p + 0x1c ) );
			ret2.mapName = new Uint8Array( buf.slice( p + 0x1c, p + 0x2c ) );
			ret2.role = lp.getUint8( p + 0x2c );
			ret2.state = lp.getUint8( p + 0x2d );

			ret.groupInfo.push( ret2 );

		}

		return ret;
	},

	0xfc: function PACKET_CZ_REQ_JOIN_GROUP( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );

		return ret;
	},

	0xfd: function PACKET_ZC_ACK_REQ_JOIN_GROUP( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.characterName = new Uint8Array( buf.slice( 0x2, 0x1a ) );
		ret.answer = lp.getUint8( 0x1a );

		return ret;
	},

	0xfe: function PACKET_ZC_REQ_JOIN_GROUP( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GRID = lp.getUint32( 0x2, true );
		ret.groupName = new Uint8Array( buf.slice( 0x6, 0x1e ) );

		return ret;
	},

	0xff: function PACKET_CZ_JOIN_GROUP( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GRID = lp.getUint32( 0x2, true );
		ret.answer = lp.getInt32( 0x6, true );

		return ret;
	},

	0x100: function PACKET_CZ_REQ_LEAVE_GROUP( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x101: function PACKET_ZC_GROUPINFO_CHANGE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.expOption = lp.getUint32( 0x2, true );

		return ret;
	},

	0x102: function PACKET_CZ_CHANGE_GROUPEXPOPTION( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.expOption = lp.getUint32( 0x2, true );

		return ret;
	},

	0x103: function PACKET_CZ_REQ_EXPEL_GROUP_MEMBER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.characterName = new Uint8Array( buf.slice( 0x6, 0x1e ) );

		return ret;
	},

	0x104: function PACKET_ZC_ADD_MEMBER_TO_GROUP( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.Role = lp.getUint32( 0x6, true );
		ret.xPos = lp.getInt16( 0xa, true );
		ret.yPos = lp.getInt16( 0xc, true );
		ret.state = lp.getUint8( 0xe );
		ret.groupName = new Uint8Array( buf.slice( 0xf, 0x27 ) );
		ret.characterName = new Uint8Array( buf.slice( 0x27, 0x3f ) );
		ret.mapName = new Uint8Array( buf.slice( 0x3f, 0x4f ) );

		return ret;
	},

	0x105: function PACKET_ZC_DELETE_MEMBER_FROM_GROUP( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.characterName = new Uint8Array( buf.slice( 0x6, 0x1e ) );
		ret.result = lp.getUint8( 0x1e );

		return ret;
	},

	0x106: function PACKET_ZC_NOTIFY_HP_TO_GROUPM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.hp = lp.getInt16( 0x6, true );
		ret.maxhp = lp.getInt16( 0x8, true );

		return ret;
	},

	0x107: function PACKET_ZC_NOTIFY_POSITION_TO_GROUPM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.xPos = lp.getInt16( 0x6, true );
		ret.yPos = lp.getInt16( 0x8, true );

		return ret;
	},

	0x108: function PACKET_CZ_REQUEST_CHAT_PARTY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.msg = new Uint8Array( buf.slice( 0x4 ) );

		return ret;
	},

	0x109: function PACKET_ZC_NOTIFY_CHAT_PARTY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.AID = lp.getUint32( 0x4, true );
		ret.msg = new Uint8Array( buf.slice( 0x8 ) );

		return ret;
	},

	0x10a: function PACKET_ZC_MVP_GETTING_ITEM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.ITID = lp.getUint16( 0x2, true );

		return ret;
	},

	0x10b: function PACKET_ZC_MVP_GETTING_SPECIAL_EXP( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.exp = lp.getUint32( 0x2, true );

		return ret;
	},

	0x10c: function PACKET_ZC_MVP( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );

		return ret;
	},

	0x10d: function PACKET_ZC_THROW_MVPITEM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x10e: function PACKET_ZC_SKILLINFO_UPDATE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.SKID = lp.getUint16( 0x2, true );
		ret.level = lp.getInt16( 0x4, true );
		ret.spcost = lp.getInt16( 0x6, true );
		ret.attackRange = lp.getInt16( 0x8, true );
		ret.upgradable = lp.getUint8( 0xa );

		return ret;
	},

	0x10f: function PACKET_ZC_SKILLINFO_LIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.skillList = [];

		// SKILLINFO
		for( p = 0x4; p < buf.byteLength; p += 37 ) {

			var ret2 = {};

			ret2.SKID = lp.getInt16( p + 0x0, true );
			ret2.type = lp.getInt32( p + 0x2, true );
			ret2.level = lp.getInt16( p + 0x6, true );
			ret2.spcost = lp.getInt16( p + 0x8, true );
			ret2.attackRange = lp.getInt16( p + 0xa, true );
			ret2.skillName = new Uint8Array( buf.slice( p + 0xc, p + 0x24 ) );
			ret2.upgradable = lp.getUint8( p + 0x24 );

			ret.skillList.push( ret2 );

		}

		return ret;
	},

	0x110: function PACKET_ZC_ACK_TOUSESKILL( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.SKID = lp.getUint16( 0x2, true );
		ret.NUM = lp.getUint32( 0x4, true );
		ret.result = lp.getUint8( 0x8 );
		ret.cause = lp.getUint8( 0x9 );

		return ret;
	},

	0x111: function PACKET_ZC_ADD_SKILL( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		
		// SKILLINFO
		ret.data = {
			SKID: lp.getUint16( p + 0x2, true ),
			type: lp.getInt32( p + 0x4, true ),
			level: lp.getInt16( p + 0x8, true ),
			spcost: lp.getInt16( p + 0xa, true ),
			attackRange: lp.getInt16( p + 0xc, true ),
			skillName: new Uint8Array( buf.slice( p + 0xe, p + 0x26 ) ),
			upgradable: lp.getUint8( p + 0x26 ),
		};


		return ret;
	},

	0x112: function PACKET_CZ_UPGRADE_SKILLLEVEL( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.SKID = lp.getUint16( 0x2, true );

		return ret;
	},

	0x113: function PACKET_CZ_USE_SKILL( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.selectedLevel = lp.getInt16( 0x2, true );
		ret.SKID = lp.getUint16( 0x4, true );
		ret.targetID = lp.getUint32( 0x6, true );

		return ret;
	},

	0x114: function PACKET_ZC_NOTIFY_SKILL( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.SKID = lp.getUint16( 0x2, true );
		ret.AID = lp.getUint32( 0x4, true );
		ret.targetID = lp.getUint32( 0x8, true );
		ret.startTime = lp.getUint32( 0xc, true );
		ret.attackMT = lp.getInt32( 0x10, true );
		ret.attackedMT = lp.getInt32( 0x14, true );
		ret.damage = lp.getInt16( 0x18, true );
		ret.level = lp.getInt16( 0x1a, true );
		ret.count = lp.getInt16( 0x1c, true );
		ret.action = lp.getUint8( 0x1e );

		return ret;
	},

	0x115: function PACKET_ZC_NOTIFY_SKILL_POSITION( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.SKID = lp.getUint16( 0x2, true );
		ret.AID = lp.getUint32( 0x4, true );
		ret.targetID = lp.getUint32( 0x8, true );
		ret.startTime = lp.getUint32( 0xc, true );
		ret.attackMT = lp.getInt32( 0x10, true );
		ret.attackedMT = lp.getInt32( 0x14, true );
		ret.xPos = lp.getInt16( 0x18, true );
		ret.yPos = lp.getInt16( 0x1a, true );
		ret.damage = lp.getInt16( 0x1c, true );
		ret.level = lp.getInt16( 0x1e, true );
		ret.count = lp.getInt16( 0x20, true );
		ret.action = lp.getUint8( 0x22 );

		return ret;
	},

	0x116: function PACKET_CZ_USE_SKILL_TOGROUND( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.selectedLevel = lp.getInt16( 0x2, true );
		ret.SKID = lp.getUint16( 0x4, true );
		ret.xPos = lp.getInt16( 0x6, true );
		ret.yPos = lp.getInt16( 0x8, true );

		return ret;
	},

	0x117: function PACKET_ZC_NOTIFY_GROUNDSKILL( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.SKID = lp.getUint16( 0x2, true );
		ret.AID = lp.getUint32( 0x4, true );
		ret.level = lp.getInt16( 0x8, true );
		ret.xPos = lp.getInt16( 0xa, true );
		ret.yPos = lp.getInt16( 0xc, true );
		ret.startTime = lp.getUint32( 0xe, true );

		return ret;
	},

	0x118: function PACKET_CZ_CANCEL_LOCKON( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x119: function PACKET_ZC_STATE_CHANGE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.bodyState = lp.getInt16( 0x6, true );
		ret.healthState = lp.getInt16( 0x8, true );
		ret.effectState = lp.getInt16( 0xa, true );
		ret.isPKModeON = lp.getUint8( 0xc );

		return ret;
	},

	0x11a: function PACKET_ZC_USE_SKILL( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.SKID = lp.getUint16( 0x2, true );
		ret.level = lp.getInt16( 0x4, true );
		ret.targetAID = lp.getUint32( 0x6, true );
		ret.srcAID = lp.getUint32( 0xa, true );
		ret.result = lp.getUint8( 0xe );

		return ret;
	},

	0x11b: function PACKET_CZ_SELECT_WARPPOINT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.SKID = lp.getUint16( 0x2, true );
		ret.mapName = new Uint8Array( buf.slice( 0x4, 0x14 ) );

		return ret;
	},

	0x11c: function PACKET_ZC_WARPLIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.SKID = lp.getUint16( 0x2, true );
		ret.mapName = new Uint8Array( buf.slice( 0x4, 0x8 ) );

		return ret;
	},

	0x11d: function PACKET_CZ_REMEMBER_WARPPOINT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x11e: function PACKET_ZC_ACK_REMEMBER_WARPPOINT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.errorCode = lp.getUint8( 0x2 );

		return ret;
	},

	0x11f: function PACKET_ZC_SKILL_ENTRY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.creatorAID = lp.getUint32( 0x6, true );
		ret.xPos = lp.getInt16( 0xa, true );
		ret.yPos = lp.getInt16( 0xc, true );
		ret.job = lp.getUint8( 0xe );
		ret.isVisible = lp.getUint8( 0xf );

		return ret;
	},

	0x120: function PACKET_ZC_SKILL_DISAPPEAR( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );

		return ret;
	},

	0x121: function PACKET_ZC_NOTIFY_CARTITEM_COUNTINFO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.curCount = lp.getInt16( 0x2, true );
		ret.maxCount = lp.getInt16( 0x4, true );
		ret.curWeight = lp.getInt32( 0x6, true );
		ret.maxWeight = lp.getInt32( 0xa, true );

		return ret;
	},

	0x122: function PACKET_ZC_CART_EQUIPMENT_ITEMLIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.itemInfo = [];

		// EQUIPMENTITEM_EXTRAINFO
		for( p = 0x4; p < buf.byteLength; p += 20 ) {

			var ret2 = {};

			ret2.index = lp.getInt16( p + 0x0, true );
			ret2.ITID = lp.getUint16( p + 0x2, true );
			ret2.type = lp.getUint8( p + 0x4 );
			ret2.IsIdentified = lp.getUint8( p + 0x5 );
			ret2.location = lp.getUint16( p + 0x6, true );
			ret2.WearState = lp.getUint16( p + 0x8, true );
			ret2.IsDamaged = lp.getUint8( p + 0xa );
			ret2.RefiningLevel = lp.getUint8( p + 0xb );
			
			// EQUIPSLOTINFO
			ret2.slot = {
				card1: lp.getUint16( p + 0xc, true ),
				card2: lp.getUint16( p + 0xe, true ),
				card3: lp.getUint16( p + 0x10, true ),
				card4: lp.getUint16( p + 0x12, true ),
			};


			ret.itemInfo.push( ret2 );

		}

		return ret;
	},

	0x123: function PACKET_ZC_CART_NORMAL_ITEMLIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.itemInfo = [];

		// NORMALITEM_EXTRAINFO
		for( p = 0x4; p < buf.byteLength; p += 10 ) {

			var ret2 = {};

			ret2.index = lp.getInt16( p + 0x0, true );
			ret2.ITID = lp.getUint16( p + 0x2, true );
			ret2.type = lp.getUint8( p + 0x4 );
			ret2.IsIdentified = lp.getUint8( p + 0x5 );
			ret2.count = lp.getInt16( p + 0x6, true );
			ret2.WearState = lp.getUint16( p + 0x8, true );

			ret.itemInfo.push( ret2 );

		}

		return ret;
	},

	0x124: function PACKET_ZC_ADD_ITEM_TO_CART( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getInt16( 0x2, true );
		ret.count = lp.getInt32( 0x4, true );
		ret.ITID = lp.getUint16( 0x8, true );
		ret.IsIdentified = lp.getUint8( 0xa );
		ret.IsDamaged = lp.getUint8( 0xb );
		ret.refiningLevel = lp.getUint8( 0xc );
		
		// EQUIPSLOTINFO
		ret.slot = {
			card1: lp.getUint16( 0xd, true ),
			card2: lp.getUint16( 0xf, true ),
			card3: lp.getUint16( 0x11, true ),
			card4: lp.getUint16( 0x13, true ),
		};


		return ret;
	},

	0x125: function PACKET_ZC_DELETE_ITEM_FROM_CART( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getInt16( 0x2, true );
		ret.count = lp.getInt32( 0x4, true );

		return ret;
	},

	0x126: function PACKET_CZ_MOVE_ITEM_FROM_BODY_TO_CART( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getInt16( 0x2, true );
		ret.count = lp.getInt32( 0x4, true );

		return ret;
	},

	0x127: function PACKET_CZ_MOVE_ITEM_FROM_CART_TO_BODY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getInt16( 0x2, true );
		ret.count = lp.getInt32( 0x4, true );

		return ret;
	},

	0x128: function PACKET_CZ_MOVE_ITEM_FROM_STORE_TO_CART( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getInt16( 0x2, true );
		ret.count = lp.getInt32( 0x4, true );

		return ret;
	},

	0x129: function PACKET_CZ_MOVE_ITEM_FROM_CART_TO_STORE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getInt16( 0x2, true );
		ret.count = lp.getInt32( 0x4, true );

		return ret;
	},

	0x12a: function PACKET_CZ_REQ_CARTOFF( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x12b: function PACKET_ZC_CARTOFF( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x12c: function PACKET_ZC_ACK_ADDITEM_TO_CART( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.result = lp.getUint8( 0x2 );

		return ret;
	},

	0x12d: function PACKET_ZC_OPENSTORE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.itemcount = lp.getInt16( 0x2, true );

		return ret;
	},

	0x12e: function PACKET_CZ_REQ_CLOSESTORE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x12f: function PACKET_CZ_REQ_OPENSTORE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.storeName = new Uint8Array( buf.slice( 0x4, 0x54 ) );
		
		ret.storeList = [];

		// STORE_ITEM
		for( p = 0x54; p < buf.byteLength; p += 8 ) {

			var ret2 = {};

			ret2.index = lp.getInt16( p + 0x0, true );
			ret2.count = lp.getInt16( p + 0x2, true );
			ret2.Price = lp.getInt32( p + 0x4, true );

			ret.storeList.push( ret2 );

		}

		return ret;
	},

	0x130: function PACKET_CZ_REQ_BUY_FROMMC( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );

		return ret;
	},

	0x131: function PACKET_ZC_STORE_ENTRY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.makerAID = lp.getUint32( 0x2, true );
		ret.storeName = new Uint8Array( buf.slice( 0x6, 0x56 ) );

		return ret;
	},

	0x132: function PACKET_ZC_DISAPPEAR_ENTRY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.makerAID = lp.getUint32( 0x2, true );

		return ret;
	},

	0x133: function PACKET_ZC_PC_PURCHASE_ITEMLIST_FROMMC( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.AID = lp.getUint32( 0x4, true );
		
		ret.itemList = [];

		// PURCHASE_ITEM_FROMMC
		for( p = 0x8; p < buf.byteLength; p += 22 ) {

			var ret2 = {};

			ret2.price = lp.getInt32( p + 0x0, true );
			ret2.count = lp.getInt16( p + 0x4, true );
			ret2.index = lp.getInt16( p + 0x6, true );
			ret2.type = lp.getUint8( p + 0x8 );
			ret2.ITID = lp.getUint16( p + 0x9, true );
			ret2.IsIdentified = lp.getUint8( p + 0xb );
			ret2.IsDamaged = lp.getUint8( p + 0xc );
			ret2.refiningLevel = lp.getUint8( p + 0xd );
			
			// EQUIPSLOTINFO
			ret2.slot = {
				card1: lp.getUint16( p + 0xe, true ),
				card2: lp.getUint16( p + 0x10, true ),
				card3: lp.getUint16( p + 0x12, true ),
				card4: lp.getUint16( p + 0x14, true ),
			};


			ret.itemList.push( ret2 );

		}

		return ret;
	},

	0x134: function PACKET_CZ_PC_PURCHASE_ITEMLIST_FROMMC( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.AID = lp.getUint32( 0x4, true );
		
		ret.itemList = [];

		// CZ_PURCHASE_ITEM_FROMMC
		for( p = 0x8; p < buf.byteLength; p += 4 ) {

			var ret2 = {};

			ret2.count = lp.getInt16( p + 0x0, true );
			ret2.index = lp.getInt16( p + 0x2, true );

			ret.itemList.push( ret2 );

		}

		return ret;
	},

	0x135: function PACKET_ZC_PC_PURCHASE_RESULT_FROMMC( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getInt16( 0x2, true );
		ret.curcount = lp.getInt16( 0x4, true );
		ret.result = lp.getUint8( 0x6 );

		return ret;
	},

	0x136: function PACKET_ZC_PC_PURCHASE_MYITEMLIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.AID = lp.getUint32( 0x4, true );
		
		ret.itemList = [];

		// PURCHASE_MYITEM
		for( p = 0x8; p < buf.byteLength; p += 22 ) {

			var ret2 = {};

			ret2.price = lp.getInt32( p + 0x0, true );
			ret2.index = lp.getInt16( p + 0x4, true );
			ret2.count = lp.getInt16( p + 0x6, true );
			ret2.type = lp.getUint8( p + 0x8 );
			ret2.ITID = lp.getUint16( p + 0x9, true );
			ret2.IsIdentified = lp.getUint8( p + 0xb );
			ret2.IsDamaged = lp.getUint8( p + 0xc );
			ret2.refiningLevel = lp.getUint8( p + 0xd );
			
			// EQUIPSLOTINFO
			ret2.slot = {
				card1: lp.getUint16( p + 0xe, true ),
				card2: lp.getUint16( p + 0x10, true ),
				card3: lp.getUint16( p + 0x12, true ),
				card4: lp.getUint16( p + 0x14, true ),
			};


			ret.itemList.push( ret2 );

		}

		return ret;
	},

	0x137: function PACKET_ZC_DELETEITEM_FROM_MCSTORE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getInt16( 0x2, true );
		ret.count = lp.getInt16( 0x4, true );

		return ret;
	},

	0x138: function PACKET_CZ_PKMODE_CHANGE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.isTurnOn = lp.getUint8( 0x2 );

		return ret;
	},

	0x139: function PACKET_ZC_ATTACK_FAILURE_FOR_DISTANCE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.targetAID = lp.getUint32( 0x2, true );
		ret.targetXPos = lp.getInt16( 0x6, true );
		ret.targetYPos = lp.getInt16( 0x8, true );
		ret.xPos = lp.getInt16( 0xa, true );
		ret.yPos = lp.getInt16( 0xc, true );
		ret.currentAttRange = lp.getInt16( 0xe, true );

		return ret;
	},

	0x13a: function PACKET_ZC_ATTACK_RANGE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.currentAttRange = lp.getInt16( 0x2, true );

		return ret;
	},

	0x13b: function PACKET_ZC_ACTION_FAILURE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.errorCode = lp.getInt16( 0x2, true );

		return ret;
	},

	0x13c: function PACKET_ZC_EQUIP_ARROW( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getInt16( 0x2, true );

		return ret;
	},

	0x13d: function PACKET_ZC_RECOVERY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.varID = lp.getInt16( 0x2, true );
		ret.amount = lp.getInt16( 0x4, true );

		return ret;
	},

	0x13e: function PACKET_ZC_USESKILL_ACK( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.targetID = lp.getUint32( 0x6, true );
		ret.xPos = lp.getInt16( 0xa, true );
		ret.yPos = lp.getInt16( 0xc, true );
		ret.SKID = lp.getUint16( 0xe, true );
		ret.property = lp.getUint32( 0x10, true );
		ret.delayTime = lp.getUint32( 0x14, true );

		return ret;
	},

	0x13f: function PACKET_CZ_ITEM_CREATE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.itemName = new Uint8Array( buf.slice( 0x2, 0x1a ) );

		return ret;
	},

	0x140: function PACKET_CZ_MOVETO_MAP( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.mapName = new Uint8Array( buf.slice( 0x2, 0x12 ) );
		ret.xPos = lp.getInt16( 0x12, true );
		ret.yPos = lp.getInt16( 0x14, true );

		return ret;
	},

	0x141: function PACKET_ZC_COUPLESTATUS( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.statusType = lp.getUint32( 0x2, true );
		ret.defaultStatus = lp.getInt32( 0x6, true );
		ret.plusStatus = lp.getInt32( 0xa, true );

		return ret;
	},

	0x142: function PACKET_ZC_OPEN_EDITDLG( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.NAID = lp.getUint32( 0x2, true );

		return ret;
	},

	0x143: function PACKET_CZ_INPUT_EDITDLG( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.NAID = lp.getUint32( 0x2, true );
		ret.value = lp.getInt32( 0x6, true );

		return ret;
	},

	0x144: function PACKET_ZC_COMPASS( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.NAID = lp.getUint32( 0x2, true );
		ret.type = lp.getInt32( 0x6, true );
		ret.xPos = lp.getInt32( 0xa, true );
		ret.yPos = lp.getInt32( 0xe, true );
		ret.id = lp.getUint8( 0x12 );
		ret.color = lp.getUint32( 0x13, true );

		return ret;
	},

	0x145: function PACKET_ZC_SHOW_IMAGE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.imageName = new Uint8Array( buf.slice( 0x2, 0x12 ) );
		ret.type = lp.getUint8( 0x12 );

		return ret;
	},

	0x146: function PACKET_CZ_CLOSE_DIALOG( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.NAID = lp.getUint32( 0x2, true );

		return ret;
	},

	0x147: function PACKET_ZC_AUTORUN_SKILL( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		
		// SKILLINFO
		ret.data = {
			SKID: lp.getUint16( 0x2, true ),
			type: lp.getInt32( 0x4, true ),
			level: lp.getInt16( 0x8, true ),
			spcost: lp.getInt16( 0xa, true ),
			attackRange: lp.getInt16( 0xc, true ),
			skillName: new Uint8Array( buf.slice( 0xe, 0x26 ) ),
			upgradable: lp.getUint8( 0x26 ),
		};


		return ret;
	},

	0x148: function PACKET_ZC_RESURRECTION( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.type = lp.getInt16( 0x6, true );

		return ret;
	},

	0x149: function PACKET_CZ_REQ_GIVE_MANNER_POINT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.otherAID = lp.getUint32( 0x2, true );
		ret.type = lp.getUint8( 0x6 );
		ret.point = lp.getInt16( 0x7, true );

		return ret;
	},

	0x14a: function PACKET_ZC_ACK_GIVE_MANNER_POINT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.result = lp.getUint32( 0x2, true );

		return ret;
	},

	0x14b: function PACKET_ZC_NOTIFY_MANNER_POINT_GIVEN( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.type = lp.getUint8( 0x2 );
		ret.otherCharName = new Uint8Array( buf.slice( 0x3, 0x1b ) );

		return ret;
	},

	0x14c: function PACKET_ZC_MYGUILD_BASIC_INFO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.relatedGuildList = [];

		// RELATED_GUILD
		for( p = 0x4; p < buf.byteLength; p += 32 ) {

			var ret2 = {};

			ret2.GDID = lp.getInt32( p + 0x0, true );
			ret2.relation = lp.getInt32( p + 0x4, true );
			ret2.GuildName = new Uint8Array( buf.slice( p + 0x8, p + 0x20 ) );

			ret.relatedGuildList.push( ret2 );

		}

		return ret;
	},

	0x14d: function PACKET_CZ_REQ_GUILD_MENUINTERFACE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x14e: function PACKET_ZC_ACK_GUILD_MENUINTERFACE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.guildMemuFlag = lp.getInt32( 0x2, true );

		return ret;
	},

	0x14f: function PACKET_CZ_REQ_GUILD_MENU( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Type = lp.getInt32( 0x2, true );

		return ret;
	},

	0x150: function PACKET_ZC_GUILD_INFO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GDID = lp.getInt32( 0x2, true );
		ret.level = lp.getInt32( 0x6, true );
		ret.userNum = lp.getInt32( 0xa, true );
		ret.maxUserNum = lp.getInt32( 0xe, true );
		ret.userAverageLevel = lp.getInt32( 0x12, true );
		ret.exp = lp.getInt32( 0x16, true );
		ret.maxExp = lp.getInt32( 0x1a, true );
		ret.point = lp.getInt32( 0x1e, true );
		ret.honor = lp.getInt32( 0x22, true );
		ret.virtue = lp.getInt32( 0x26, true );
		ret.emblemVersion = lp.getInt32( 0x2a, true );
		ret.guildname = new Uint8Array( buf.slice( 0x2e, 0x46 ) );
		ret.masterName = new Uint8Array( buf.slice( 0x46, 0x5e ) );
		ret.manageLand = new Uint8Array( buf.slice( 0x5e, 0x6e ) );

		return ret;
	},

	0x151: function PACKET_CZ_REQ_GUILD_EMBLEM_IMG( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GDID = lp.getInt32( 0x2, true );

		return ret;
	},

	0x152: function PACKET_ZC_GUILD_EMBLEM_IMG( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.GDID = lp.getInt32( 0x4, true );
		ret.emblemVersion = lp.getInt32( 0x8, true );
		ret.img = new Uint8Array( buf.slice( 0xc ) );

		return ret;
	},

	0x153: function PACKET_CZ_REGISTER_GUILD_EMBLEM_IMG( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.img = new Uint8Array( buf.slice( 0x4 ) );

		return ret;
	},

	0x154: function PACKET_ZC_MEMBERMGR_INFO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.memberInfo = [];

		// GUILD_MEMBERMGR_INFO
		for( p = 0x4; p < buf.byteLength; p += 104 ) {

			var ret2 = {};

			ret2.AID = lp.getUint32( p + 0x0, true );
			ret2.GID = lp.getUint32( p + 0x4, true );
			ret2.HeadType = lp.getInt16( p + 0x8, true );
			ret2.HeadPalette = lp.getInt16( p + 0xa, true );
			ret2.Sex = lp.getInt16( p + 0xc, true );
			ret2.Job = lp.getInt16( p + 0xe, true );
			ret2.Level = lp.getInt16( p + 0x10, true );
			ret2.MemberExp = lp.getInt32( p + 0x12, true );
			ret2.CurrentState = lp.getInt32( p + 0x16, true );
			ret2.GPositionID = lp.getInt32( p + 0x1a, true );
			ret2.Memo = new Uint8Array( buf.slice( p + 0x1e, p + 0x50 ) );
			ret2.CharName = new Uint8Array( buf.slice( p + 0x50, p + 0x68 ) );

			ret.memberInfo.push( ret2 );

		}

		return ret;
	},

	0x155: function PACKET_CZ_REQ_CHANGE_MEMBERPOS( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.memberInfo = [];

		// MEMBER_POSITION_INFO
		for( p = 0x4; p < buf.byteLength; p += 12 ) {

			var ret2 = {};

			ret2.AID = lp.getInt32( p + 0x0, true );
			ret2.GID = lp.getInt32( p + 0x4, true );
			ret2.positionID = lp.getInt32( p + 0x8, true );

			ret.memberInfo.push( ret2 );

		}

		return ret;
	},

	0x156: function PACKET_ZC_ACK_REQ_CHANGE_MEMBERS( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.memberInfo = [];

		// MEMBER_POSITION_INFO
		for( p = 0x4; p < buf.byteLength; p += 12 ) {

			var ret2 = {};

			ret2.AID = lp.getInt32( p + 0x0, true );
			ret2.GID = lp.getInt32( p + 0x4, true );
			ret2.positionID = lp.getInt32( p + 0x8, true );

			ret.memberInfo.push( ret2 );

		}

		return ret;
	},

	0x157: function PACKET_CZ_REQ_OPEN_MEMBER_INFO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getInt32( 0x2, true );

		return ret;
	},

	0x158: function PACKET_ZC_ACK_OPEN_MEMBER_INFO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x159: function PACKET_CZ_REQ_LEAVE_GUILD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GDID = lp.getUint32( 0x2, true );
		ret.AID = lp.getInt32( 0x6, true );
		ret.GID = lp.getInt32( 0xa, true );
		ret.reasonDesc = new Uint8Array( buf.slice( 0xe, 0x36 ) );

		return ret;
	},

	0x15a: function PACKET_ZC_ACK_LEAVE_GUILD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.charName = new Uint8Array( buf.slice( 0x2, 0x1a ) );
		ret.reasonDesc = new Uint8Array( buf.slice( 0x1a, 0x42 ) );

		return ret;
	},

	0x15b: function PACKET_CZ_REQ_BAN_GUILD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GDID = lp.getUint32( 0x2, true );
		ret.AID = lp.getInt32( 0x6, true );
		ret.GID = lp.getInt32( 0xa, true );
		ret.reasonDesc = new Uint8Array( buf.slice( 0xe, 0x36 ) );

		return ret;
	},

	0x15c: function PACKET_ZC_ACK_BAN_GUILD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.charName = new Uint8Array( buf.slice( 0x2, 0x1a ) );
		ret.reasonDesc = new Uint8Array( buf.slice( 0x1a, 0x42 ) );
		ret.account = new Uint8Array( buf.slice( 0x42, 0x5a ) );

		return ret;
	},

	0x15d: function PACKET_CZ_REQ_DISORGANIZE_GUILD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.key = new Uint8Array( buf.slice( 0x2, 0x2a ) );

		return ret;
	},

	0x15e: function PACKET_ZC_ACK_DISORGANIZE_GUILD_RESULT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.reason = lp.getInt32( 0x2, true );

		return ret;
	},

	0x15f: function PACKET_ZC_ACK_DISORGANIZE_GUILD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.reasonDesc = new Uint8Array( buf.slice( 0x2, 0x2a ) );

		return ret;
	},

	0x160: function PACKET_ZC_POSITION_INFO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.memberInfo = [];

		// GUILD_MEMBER_POSITION_INFO
		for( p = 0x4; p < buf.byteLength; p += 16 ) {

			var ret2 = {};

			ret2.positionID = lp.getInt32( p + 0x0, true );
			ret2.right = lp.getInt32( p + 0x4, true );
			ret2.ranking = lp.getInt32( p + 0x8, true );

			ret.memberInfo.push( ret2 );

		}

		return ret;
	},

	0x161: function PACKET_CZ_REG_CHANGE_GUILD_POSITIONINFO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.memberList = [];

		// GUILD_REG_POSITION_INFO
		for( p = 0x4; p < buf.byteLength; p += 40 ) {

			var ret2 = {};

			ret2.positionID = lp.getInt32( p + 0x0, true );
			ret2.right = lp.getInt32( p + 0x4, true );
			ret2.ranking = lp.getInt32( p + 0x8, true );
			ret2.payRate = lp.getInt32( p + 0xc, true );
			ret2.posName = new Uint8Array( buf.slice( p + 0x10, p + 0x28 ) );

			ret.memberList.push( ret2 );

		}

		return ret;
	},

	0x162: function PACKET_ZC_GUILD_SKILLINFO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.skillPoint = lp.getInt16( 0x4, true );
		
		ret.skillList = [];

		// SKILLINFO
		for( p = 0x6; p < buf.byteLength; p += 37 ) {

			var ret2 = {};

			ret2.SKID = lp.getUint16( p + 0x0, true );
			ret2.type = lp.getInt32( p + 0x2, true );
			ret2.level = lp.getInt16( p + 0x6, true );
			ret2.spcost = lp.getInt16( p + 0x8, true );
			ret2.attackRange = lp.getInt16( p + 0xa, true );
			ret2.skillName = new Uint8Array( buf.slice( p + 0xc, p + 0x24 ) );
			ret2.upgradable = lp.getUint8( p + 0x24 );

			ret.skillList.push( ret2 );

		}

		return ret;
	},

	0x163: function PACKET_ZC_BAN_LIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.banList = [];

		// GUILD_BAN_INFO
		for( p = 0x4; p < buf.byteLength; p += 88 ) {

			var ret2 = {};

			ret2.charname = new Uint8Array( buf.slice( p + 0x0, p + 0x18 ) );
			ret2.account = new Uint8Array( buf.slice( p + 0x18, p + 0x30 ) );
			ret2.reason = new Uint8Array( buf.slice( p + 0x30, p + 0x58 ) );

			ret.banList.push( ret2 );

		}

		return ret;
	},

	0x164: function PACKET_ZC_OTHER_GUILD_LIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.guildList = [];

		// OTHER_GUILD_INFO
		for( p = 0x4; p < buf.byteLength; p += 36 ) {

			var ret2 = {};

			ret2.guildname = new Uint8Array( buf.slice( p + 0x0, p + 0x18 ) );
			ret2.guildLevel = lp.getInt32( p + 0x18, true );
			ret2.guildMemberSize = lp.getInt32( p + 0x1c, true );
			ret2.guildRanking = lp.getInt32( p + 0x20, true );

			ret.guildList.push( ret2 );

		}

		return ret;
	},

	0x165: function PACKET_CZ_REQ_MAKE_GUILD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );
		ret.GName = new Uint8Array( buf.slice( 0x6, 0x1e ) );

		return ret;
	},

	0x166: function PACKET_ZC_POSITION_ID_NAME_INFO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.memberList = [];

		// MEMBER_POSITION_ID_NAME_INFO
		for( p = 0x4; p < buf.byteLength; p += 28 ) {

			var ret2 = {};

			ret2.positionID = lp.getInt32( p + 0x0, true );
			ret2.posName = new Uint8Array( buf.slice( p + 0x4, p + 0x1c ) );

			ret.memberList.push( ret2 );

		}

		return ret;
	},

	0x167: function PACKET_ZC_RESULT_MAKE_GUILD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.result = lp.getUint8( 0x2 );

		return ret;
	},

	0x168: function PACKET_CZ_REQ_JOIN_GUILD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.MyAID = lp.getUint32( 0x6, true );
		ret.MyGID = lp.getUint32( 0xa, true );

		return ret;
	},

	0x169: function PACKET_ZC_ACK_REQ_JOIN_GUILD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.answer = lp.getUint8( 0x2 );

		return ret;
	},

	0x16a: function PACKET_ZC_REQ_JOIN_GUILD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GDID = lp.getUint32( 0x2, true );
		ret.guildName = new Uint8Array( buf.slice( 0x6, 0x1e ) );

		return ret;
	},

	0x16b: function PACKET_CZ_JOIN_GUILD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GDID = lp.getUint32( 0x2, true );
		ret.answer = lp.getInt32( 0x6, true );

		return ret;
	},

	0x16c: function PACKET_ZC_UPDATE_GDID( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GDID = lp.getUint32( 0x2, true );
		ret.emblemVersion = lp.getInt32( 0x6, true );
		ret.right = lp.getInt32( 0xa, true );
		ret.isMaster = lp.getUint8( 0xe );
		ret.InterSID = lp.getInt32( 0xf, true );
		ret.GName = new Uint8Array( buf.slice( 0x13, 0x2b ) );

		return ret;
	},

	0x16d: function PACKET_ZC_UPDATE_CHARSTAT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.GID = lp.getUint32( 0x6, true );
		ret.status = lp.getInt32( 0xa, true );

		return ret;
	},

	0x16e: function PACKET_CZ_GUILD_NOTICE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GDID = lp.getUint32( 0x2, true );
		ret.subject = new Uint8Array( buf.slice( 0x6, 0x42 ) );
		ret.notice = new Uint8Array( buf.slice( 0x42, 0xba ) );

		return ret;
	},

	0x16f: function PACKET_ZC_GUILD_NOTICE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.subject = new Uint8Array( buf.slice( 0x2, 0x3e ) );
		ret.notice = new Uint8Array( buf.slice( 0x3e, 0xb6 ) );

		return ret;
	},

	0x170: function PACKET_CZ_REQ_ALLY_GUILD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.MyAID = lp.getUint32( 0x6, true );
		ret.MyGID = lp.getUint32( 0xa, true );

		return ret;
	},

	0x171: function PACKET_ZC_REQ_ALLY_GUILD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.otherAID = lp.getUint32( 0x2, true );
		ret.guildName = new Uint8Array( buf.slice( 0x6, 0x1e ) );

		return ret;
	},

	0x172: function PACKET_CZ_ALLY_GUILD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.otherAID = lp.getUint32( 0x2, true );
		ret.answer = lp.getInt32( 0x6, true );

		return ret;
	},

	0x173: function PACKET_ZC_ACK_REQ_ALLY_GUILD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.answer = lp.getUint8( 0x2 );

		return ret;
	},

	0x174: function PACKET_ZC_ACK_CHANGE_GUILD_POSITIONINFO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.memberList = [];

		// GUILD_REG_POSITION_INFO
		for( p = 0x4; p < buf.byteLength; p += 30 ) {

			var ret2 = {};

			ret2.positionID = lp.getInt32( p + 0x0, true );
			ret2.right = lp.getInt32( p + 0x4, true );
			ret2.ranking = lp.getInt32( p + 0x8, true );
			ret2.payRate = lp.getInt32( p + 0xc, true );
			ret2.posName = new Uint8Array( buf.slice( p + 0x10, p + 0x28 ) );

			ret.memberList.push( ret2 );

		}

		return ret;
	},

	0x175: function PACKET_CZ_REQ_GUILD_MEMBER_INFO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getInt32( 0x2, true );

		return ret;
	},

	0x176: function PACKET_ZC_ACK_GUILD_MEMBER_INFO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		
		// GUILD_MEMBER_INFO
		ret.Info = {
			AID: lp.getInt32( p + 0x2, true ),
			GID: lp.getInt32( p + 0x6, true ),
			head: lp.getInt16( p + 0xa, true ),
			headPalette: lp.getInt16( p + 0xc, true ),
			sex: lp.getInt16( p + 0xe, true ),
			job: lp.getInt16( p + 0x10, true ),
			level: lp.getInt16( p + 0x12, true ),
			contributionExp: lp.getInt32( p + 0x14, true ),
			currentState: lp.getInt32( p + 0x18, true ),
			positionID: lp.getInt32( p + 0x1c, true ),
			intro: new Uint8Array( buf.slice( p + 0x20, p + 0x52 ) ),
			charname: new Uint8Array( buf.slice( p + 0x52, p + 0x6a ) ),
		};


		return ret;
	},

	0x177: function PACKET_ZC_ITEMIDENTIFY_LIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.ITIDList = new Uint16Array( buf.slice( 0x4 ) );

		return ret;
	},

	0x178: function PACKET_CZ_REQ_ITEMIDENTIFY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getInt16( 0x2, true );

		return ret;
	},

	0x179: function PACKET_ZC_ACK_ITEMIDENTIFY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getInt16( 0x2, true );
		ret.result = lp.getUint8( 0x4 );

		return ret;
	},

	0x17a: function PACKET_CZ_REQ_ITEMCOMPOSITION_LIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.cardIndex = lp.getInt16( 0x2, true );

		return ret;
	},

	0x17b: function PACKET_ZC_ITEMCOMPOSITION_LIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.ITIDList = new Uint16Array( buf.slice( 0x4 ) );

		return ret;
	},

	0x17c: function PACKET_CZ_REQ_ITEMCOMPOSITION( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.cardIndex = lp.getInt16( 0x2, true );
		ret.equipIndex = lp.getInt16( 0x4, true );

		return ret;
	},

	0x17d: function PACKET_ZC_ACK_ITEMCOMPOSITION( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.equipIndex = lp.getInt16( 0x2, true );
		ret.cardIndex = lp.getInt16( 0x4, true );
		ret.result = lp.getUint8( 0x6 );

		return ret;
	},

	0x17e: function PACKET_CZ_GUILD_CHAT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.msg = new Uint8Array( buf.slice( 0x4 ) );

		return ret;
	},

	0x17f: function PACKET_ZC_GUILD_CHAT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.msg = new Uint8Array( buf.slice( 0x4 ) );

		return ret;
	},

	0x180: function PACKET_CZ_REQ_HOSTILE_GUILD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );

		return ret;
	},

	0x181: function PACKET_ZC_ACK_REQ_HOSTILE_GUILD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.result = lp.getUint8( 0x2 );

		return ret;
	},

	0x182: function PACKET_ZC_MEMBER_ADD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		
		// GUILD_MEMBER_INFO
		ret.Info = {
			AID: lp.getInt32( p + 0x2, true ),
			GID: lp.getInt32( p + 0x6, true ),
			head: lp.getInt16( p + 0xa, true ),
			headPalette: lp.getInt16( p + 0xc, true ),
			sex: lp.getInt16( p + 0xe, true ),
			job: lp.getInt16( p + 0x10, true ),
			level: lp.getInt16( p + 0x12, true ),
			contributionExp: lp.getInt32( p + 0x14, true ),
			currentState: lp.getInt32( p + 0x18, true ),
			positionID: lp.getInt32( p + 0x1c, true ),
			intro: new Uint8Array( buf.slice( p + 0x20, p + 0x52 ) ),
			charname: new Uint8Array( buf.slice( p + 0x52, p + 0x6a ) ),
		};


		return ret;
	},

	0x183: function PACKET_CZ_REQ_DELETE_RELATED_GUILD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.OpponentGDID = lp.getUint32( 0x2, true );
		ret.Relation = lp.getInt32( 0x6, true );

		return ret;
	},

	0x184: function PACKET_ZC_DELETE_RELATED_GUILD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.OpponentGDID = lp.getUint32( 0x2, true );
		ret.Relation = lp.getInt32( 0x6, true );

		return ret;
	},

	0x185: function PACKET_ZC_ADD_RELATED_GUILD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		
		// RELATED_GUILD_INFO
		ret.Info = {
			relation: lp.getInt32( p + 0x2, true ),
			GDID: lp.getInt32( p + 0x6, true ),
			guildname: new Uint8Array( buf.slice( p + 0xa, p + 0x22 ) ),
		};


		return ret;
	},

	0x186: function PACKET_COLLECTORDEAD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.ServerID = lp.getUint32( 0x2, true );

		return ret;
	},

	0x187: function PACKET_PING( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );

		return ret;
	},

	0x188: function PACKET_ZC_ACK_ITEMREFINING( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.result = lp.getInt16( 0x2, true );
		ret.itemIndex = lp.getInt16( 0x4, true );
		ret.refiningLevel = lp.getInt16( 0x6, true );

		return ret;
	},

	0x189: function PACKET_ZC_NOTIFY_MAPINFO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.type = lp.getInt16( 0x2, true );

		return ret;
	},

	0x18a: function PACKET_CZ_REQ_DISCONNECT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.type = lp.getInt16( 0x2, true );

		return ret;
	},

	0x18b: function PACKET_ZC_ACK_REQ_DISCONNECT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.result = lp.getInt16( 0x2, true );

		return ret;
	},

	0x18c: function PACKET_ZC_MONSTER_INFO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.job = lp.getInt16( 0x2, true );
		ret.level = lp.getInt16( 0x4, true );
		ret.size = lp.getInt16( 0x6, true );
		ret.hp = lp.getInt32( 0x8, true );
		ret.def = lp.getInt16( 0xc, true );
		ret.raceType = lp.getInt16( 0xe, true );
		ret.mdefPower = lp.getInt16( 0x10, true );
		ret.property = lp.getInt16( 0x12, true );
		
		// PACKET_ZC_MONSTER_INFO
		ret.propertyTable = {
			water: lp.getUint8( p + 0x14 ),
			earth: lp.getUint8( p + 0x15 ),
			fire: lp.getUint8( p + 0x16 ),
			wind: lp.getUint8( p + 0x17 ),
			poison: lp.getUint8( p + 0x18 ),
			saint: lp.getUint8( p + 0x19 ),
			dark: lp.getUint8( p + 0x1a ),
			mental: lp.getUint8( p + 0x1b ),
			undead: lp.getUint8( p + 0x1c ),
		};


		return ret;
	},

	0x18d: function PACKET_ZC_MAKABLEITEMLIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		// MAKABLEITEM_INFO
		ret.info = {
			ITID: lp.getUint16( p + 0x2, true ),
			material_ID: new Uint16Array( buf.slice( p + 0x4, p + 0xa ) ),
		};


		return ret;
	},

	0x18e: function PACKET_CZ_REQMAKINGITEM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		
		// MAKABLEITEM_INFO
		ret.info = {
			ITID: lp.getUint16( p + 0x2, true ),
			material_ID: new Uint16Array( buf.slice( p + 0x4, p + 0xa ) ),
		};


		return ret;
	},

	0x18f: function PACKET_ZC_ACK_REQMAKINGITEM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.result = lp.getInt16( 0x2, true );
		ret.ITID = lp.getUint16( 0x4, true );

		return ret;
	},

	0x190: function PACKET_CZ_USE_SKILL_TOGROUND_WITHTALKBOX( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.selectedLevel = lp.getInt16( 0x2, true );
		ret.SKID = lp.getUint16( 0x4, true );
		ret.xPos = lp.getInt16( 0x6, true );
		ret.yPos = lp.getInt16( 0x8, true );
		ret.contents = new Uint8Array( buf.slice( 0xa, 0x5a ) );

		return ret;
	},

	0x191: function PACKET_ZC_TALKBOX_CHATCONTENTS( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.contents = new Uint8Array( buf.slice( 0x6, 0x56 ) );

		return ret;
	},

	0x192: function PACKET_ZC_UPDATE_MAPINFO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.xPos = lp.getInt16( 0x2, true );
		ret.yPos = lp.getInt16( 0x4, true );
		ret.type = lp.getInt16( 0x6, true );
		ret.mapName = new Uint8Array( buf.slice( 0x8, 0x18 ) );

		return ret;
	},

	0x193: function PACKET_CZ_REQNAME_BYGID( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );

		return ret;
	},

	0x194: function PACKET_ZC_ACK_REQNAME_BYGID( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );
		ret.CName = new Uint8Array( buf.slice( 0x6, 0x1e ) );

		return ret;
	},

	0x195: function PACKET_ZC_ACK_REQNAMEALL( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.CName = new Uint8Array( buf.slice( 0x6, 0x1e ) );
		ret.PName = new Uint8Array( buf.slice( 0x1e, 0x36 ) );
		ret.GName = new Uint8Array( buf.slice( 0x36, 0x4e ) );
		ret.RName = new Uint8Array( buf.slice( 0x4e, 0x66 ) );

		return ret;
	},

	0x196: function PACKET_ZC_MSG_STATE_CHANGE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getInt16( 0x2, true );
		ret.AID = lp.getUint32( 0x4, true );
		ret.state = lp.getUint8( 0x8 );

		return ret;
	},

	0x197: function PACKET_CZ_RESET( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.type = lp.getInt16( 0x2, true );

		return ret;
	},

	0x198: function PACKET_CZ_CHANGE_MAPTYPE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.xPos = lp.getInt16( 0x2, true );
		ret.yPos = lp.getInt16( 0x4, true );
		ret.type = lp.getInt16( 0x6, true );

		return ret;
	},

	0x199: function PACKET_ZC_NOTIFY_MAPPROPERTY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.type = lp.getInt16( 0x2, true );

		return ret;
	},

	0x19a: function PACKET_ZC_NOTIFY_RANKING( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.ranking = lp.getInt32( 0x6, true );
		ret.total = lp.getInt32( 0xa, true );

		return ret;
	},

	0x19b: function PACKET_ZC_NOTIFY_EFFECT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.effectID = lp.getInt32( 0x6, true );

		return ret;
	},

	0x19d: function PACKET_CZ_CHANGE_EFFECTSTATE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.EffectState = lp.getInt32( 0x2, true );

		return ret;
	},

	0x19e: function PACKET_ZC_START_CAPTURE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x19f: function PACKET_CZ_TRYCAPTURE_MONSTER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.targetAID = lp.getUint32( 0x2, true );

		return ret;
	},

	0x1a0: function PACKET_ZC_TRYCAPTURE_MONSTER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.result = lp.getUint8( 0x2 );

		return ret;
	},

	0x1a1: function PACKET_CZ_COMMAND_PET( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.cSub = lp.getUint8( 0x2 );

		return ret;
	},

	0x1a2: function PACKET_ZC_PROPERTY_PET( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.szName = new Uint8Array( buf.slice( 0x2, 0x1a ) );
		ret.bModified = lp.getUint8( 0x1a );
		ret.nLevel = lp.getInt16( 0x1b, true );
		ret.nFullness = lp.getInt16( 0x1d, true );
		ret.nRelationship = lp.getInt16( 0x1f, true );
		ret.ITID = lp.getUint16( 0x21, true );
		ret.job = lp.getInt16( 0x23, true );

		return ret;
	},

	0x1a3: function PACKET_ZC_FEED_PET( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.cRet = lp.getUint8( 0x2 );
		ret.ITID = lp.getUint16( 0x3, true );

		return ret;
	},

	0x1a4: function PACKET_ZC_CHANGESTATE_PET( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.type = lp.getUint8( 0x2 );
		ret.GID = lp.getInt32( 0x3, true );
		ret.data = lp.getInt32( 0x7, true );

		return ret;
	},

	0x1a5: function PACKET_CZ_RENAME_PET( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.szName = new Uint8Array( buf.slice( 0x2, 0x1a ) );

		return ret;
	},

	0x1a6: function PACKET_ZC_PETEGG_LIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.eggList = [];

		// PETEGGITEM_INFO
		for( p = 0x4; p < buf.byteLength; p += 2 ) {

			var ret2 = {};

			ret2.index = lp.getInt16( p + 0x0, true );

			ret.eggList.push( ret2 );

		}

		return ret;
	},

	0x1a7: function PACKET_CZ_SELECT_PETEGG( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getInt16( 0x2, true );

		return ret;
	},

	0x1a8: function PACKET_CZ_PETEGG_INFO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getInt16( 0x2, true );

		return ret;
	},

	0x1a9: function PACKET_CZ_PET_ACT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.data = lp.getInt32( 0x2, true );

		return ret;
	},

	0x1aa: function PACKET_ZC_PET_ACT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getInt32( 0x2, true );
		ret.data = lp.getInt32( 0x6, true );

		return ret;
	},

	0x1ab: function PACKET_ZC_PAR_CHANGE_USER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.varID = lp.getUint16( 0x6, true );
		ret.count = lp.getInt32( 0x8, true );

		return ret;
	},

	0x1ac: function PACKET_ZC_SKILL_UPDATE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );

		return ret;
	},

	0x1ad: function PACKET_ZC_MAKINGARROW_LIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.arrowList = [];

		// ARROWITEM_INFO
		for( p = 0x4; p < buf.byteLength; p += 2 ) {

			var ret2 = {};

			ret2.index = lp.getInt16( p + 0x0, true );

			ret.arrowList.push( ret2 );

		}

		return ret;
	},

	0x1ae: function PACKET_CZ_REQ_MAKINGARROW( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.id = lp.getUint16( 0x2, true );

		return ret;
	},

	0x1af: function PACKET_CZ_REQ_CHANGECART( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.num = lp.getInt16( 0x2, true );

		return ret;
	},

	0x1b0: function PACKET_ZC_NPCSPRITE_CHANGE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );
		ret.type = lp.getUint8( 0x6 );
		ret.value = lp.getUint32( 0x7, true );

		return ret;
	},

	0x1b1: function PACKET_ZC_SHOWDIGIT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.type = lp.getUint8( 0x2 );
		ret.value = lp.getInt32( 0x3, true );

		return ret;
	},

	0x1b2: function PACKET_CZ_REQ_OPENSTORE2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.storeName = new Uint8Array( buf.slice( 0x4, 0x54 ) );
		ret.result = lp.getUint8( 0x54 );
		
		ret.storeList = [];

		// STORE_ITEM
		for( p = 0x55; p < buf.byteLength; p += 8 ) {

			var ret2 = {};

			ret2.index = lp.getInt16( p + 0x0, true );
			ret2.count = lp.getInt16( p + 0x2, true );
			ret2.Price = lp.getInt32( p + 0x4, true );

			ret.storeList.push( ret2 );

		}

		return ret;
	},

	0x1b3: function PACKET_ZC_SHOW_IMAGE2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.imageName = new Uint8Array( buf.slice( 0x2, 0x42 ) );
		ret.type = lp.getUint8( 0x42 );

		return ret;
	},

	0x1b4: function PACKET_ZC_CHANGE_GUILD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.GDID = lp.getUint32( 0x6, true );
		ret.emblemVersion = lp.getInt16( 0xa, true );

		return ret;
	},

	0x1b5: function PACKET_SC_BILLING_INFO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.dwAmountRemain = lp.getUint32( 0x2, true );
		ret.dwQuantityRemain = lp.getUint32( 0x6, true );
		ret.dwReserved1 = lp.getUint32( 0xa, true );
		ret.dwReserved2 = lp.getUint32( 0xe, true );

		return ret;
	},

	0x1b6: function PACKET_ZC_GUILD_INFO2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GDID = lp.getInt32( 0x2, true );
		ret.level = lp.getInt32( 0x6, true );
		ret.userNum = lp.getInt32( 0xa, true );
		ret.maxUserNum = lp.getInt32( 0xe, true );
		ret.userAverageLevel = lp.getInt32( 0x12, true );
		ret.exp = lp.getInt32( 0x16, true );
		ret.maxExp = lp.getInt32( 0x1a, true );
		ret.point = lp.getInt32( 0x1e, true );
		ret.honor = lp.getInt32( 0x22, true );
		ret.virtue = lp.getInt32( 0x26, true );
		ret.emblemVersion = lp.getInt32( 0x2a, true );
		ret.guildname = new Uint8Array( buf.slice( 0x2e, 0x46 ) );
		ret.masterName = new Uint8Array( buf.slice( 0x46, 0x5e ) );
		ret.manageLand = new Uint8Array( buf.slice( 0x5e, 0x6e ) );
		ret.zeny = lp.getInt32( 0x6e, true );

		return ret;
	},

	0x1b7: function PACKET_CZ_GUILD_ZENY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.zeny = lp.getInt32( 0x2, true );

		return ret;
	},

	0x1b8: function PACKET_ZC_GUILD_ZENY_ACK( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.ret = lp.getUint8( 0x2 );

		return ret;
	},

	0x1b9: function PACKET_ZC_DISPEL( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );

		return ret;
	},

	0x1ba: function PACKET_CZ_REMOVE_AID( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AccountName = new Uint8Array( buf.slice( 0x2, 0x1a ) );

		return ret;
	},

	0x1bb: function PACKET_CZ_SHIFT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.CharacterName = new Uint8Array( buf.slice( 0x2, 0x1a ) );

		return ret;
	},

	0x1bc: function PACKET_CZ_RECALL( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AccountName = new Uint8Array( buf.slice( 0x2, 0x1a ) );

		return ret;
	},

	0x1bd: function PACKET_CZ_RECALL_GID( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.CharacterName = new Uint8Array( buf.slice( 0x2, 0x1a ) );

		return ret;
	},

	0x1be: function PACKET_AC_ASK_PNGAMEROOM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x1bf: function PACKET_CA_REPLY_PNGAMEROOM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Permission = lp.getUint8( 0x2 );

		return ret;
	},

	0x1c0: function PACKET_CZ_REQ_REMAINTIME( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x1c1: function PACKET_ZC_REPLY_REMAINTIME( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Result = lp.getInt32( 0x2, true );
		ret.ExpirationDate = lp.getInt32( 0x6, true );
		ret.RemainTime = lp.getInt32( 0xa, true );

		return ret;
	},

	0x1c2: function PACKET_ZC_INFO_REMAINTIME( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Type = lp.getInt32( 0x2, true );
		ret.RemainTime = lp.getInt32( 0x6, true );

		return ret;
	},

	0x1c3: function PACKET_ZC_BROADCAST2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.fontColor = lp.getUint32( 0x4, true );
		ret.fontType = lp.getInt16( 0x8, true );
		ret.fontSize = lp.getInt16( 0xa, true );
		ret.fontAlign = lp.getInt16( 0xc, true );
		ret.fontY = lp.getInt16( 0xe, true );
		ret.msg = new Uint8Array( buf.slice( 0x10 ) );

		return ret;
	},

	0x1c4: function PACKET_ZC_ADD_ITEM_TO_STORE2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getInt16( 0x2, true );
		ret.count = lp.getInt32( 0x4, true );
		ret.ITID = lp.getUint16( 0x8, true );
		ret.type = lp.getUint8( 0xa );
		ret.IsIdentified = lp.getUint8( 0xb );
		ret.IsDamaged = lp.getUint8( 0xc );
		ret.refiningLevel = lp.getUint8( 0xd );
		
		// EQUIPSLOTINFO
		ret.slot = {
			card1: lp.getUint16( p + 0xe, true ),
			card2: lp.getUint16( p + 0x10, true ),
			card3: lp.getUint16( p + 0x12, true ),
			card4: lp.getUint16( p + 0x14, true ),
		};


		return ret;
	},

	0x1c5: function PACKET_ZC_ADD_ITEM_TO_CART2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getInt16( 0x2, true );
		ret.count = lp.getInt32( 0x4, true );
		ret.ITID = lp.getUint16( 0x8, true );
		ret.type = lp.getUint8( 0xa );
		ret.IsIdentified = lp.getUint8( 0xb );
		ret.IsDamaged = lp.getUint8( 0xc );
		ret.refiningLevel = lp.getUint8( 0xd );
		
		// EQUIPSLOTINFO
		ret.slot = {
			card1: lp.getUint16( p + 0xe, true ),
			card2: lp.getUint16( p + 0x10, true ),
			card3: lp.getUint16( p + 0x12, true ),
			card4: lp.getUint16( p + 0x14, true ),
		};


		return ret;
	},

	0x1c6: function PACKET_CS_REQ_ENCRYPTION( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.encCount = lp.getUint8( 0x2 );
		ret.decCount = lp.getUint8( 0x3 );

		return ret;
	},

	0x1c7: function PACKET_SC_ACK_ENCRYPTION( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x1c8: function PACKET_ZC_USE_ITEM_ACK2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getUint16( 0x2, true );
		ret.id = lp.getUint16( 0x4, true );
		ret.AID = lp.getUint32( 0x6, true );
		ret.count = lp.getInt16( 0xa, true );
		ret.result = lp.getUint8( 0xc );

		return ret;
	},

	0x1c9: function PACKET_ZC_SKILL_ENTRY2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.creatorAID = lp.getUint32( 0x6, true );
		ret.xPos = lp.getInt16( 0xa, true );
		ret.yPos = lp.getInt16( 0xc, true );
		ret.job = lp.getUint8( 0xe );
		ret.isVisible = lp.getUint8( 0xf );
		ret.isContens = lp.getUint8( 0x10 );
		ret.msg = new Uint8Array( buf.slice( 0x11, 0x61 ) );

		return ret;
	},

	0x1ca: function PACKET_CZ_REQMAKINGHOMUN( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.result = lp.getUint8( 0x2 );

		return ret;
	},

	0x1cb: function PACKET_CZ_MONSTER_TALK( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );
		ret.stateId = lp.getUint8( 0x6 );
		ret.skillId = lp.getUint8( 0x7 );
		ret.arg1 = lp.getUint8( 0x8 );

		return ret;
	},

	0x1cc: function PACKET_ZC_MONSTER_TALK( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );
		ret.stateId = lp.getUint8( 0x6 );
		ret.skillId = lp.getUint8( 0x7 );
		ret.arg1 = lp.getUint8( 0x8 );

		return ret;
	},

	0x1cd: function PACKET_ZC_AUTOSPELLLIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.SKID = new Int32Array( buf.slice( 0x2, 0x1e ) );

		return ret;
	},

	0x1ce: function PACKET_CZ_SELECTAUTOSPELL( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.SKID = lp.getInt32( 0x2, true );

		return ret;
	},

	0x1cf: function PACKET_ZC_DEVOTIONLIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.myAID = lp.getUint32( 0x2, true );
		ret.AID = new Uint32Array( buf.slice( 0x6, 0x1a ) );
		ret.range = lp.getInt16( 0x1a, true );

		return ret;
	},

	0x1d0: function PACKET_ZC_SPIRITS( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.num = lp.getInt16( 0x6, true );

		return ret;
	},

	0x1d1: function PACKET_ZC_BLADESTOP( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.srcAID = lp.getUint32( 0x2, true );
		ret.destAID = lp.getUint32( 0x6, true );
		ret.flag = lp.getInt32( 0xa, true );

		return ret;
	},

	0x1d2: function PACKET_ZC_COMBODELAY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.delayTime = lp.getUint32( 0x6, true );

		return ret;
	},

	0x1d3: function PACKET_ZC_SOUND( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.fileName = new Uint8Array( buf.slice( 0x2, 0x1a ) );
		ret.act = lp.getUint8( 0x1a );
		ret.term = lp.getUint32( 0x1b, true );
		ret.NAID = lp.getUint32( 0x1f, true );

		return ret;
	},

	0x1d4: function PACKET_ZC_OPEN_EDITDLGSTR( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.NAID = lp.getUint32( 0x2, true );

		return ret;
	},

	0x1d5: function PACKET_CZ_INPUT_EDITDLGSTR( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.NAID = lp.getUint32( 0x4, true );
		ret.msg = new Uint8Array( buf.slice( 0x8 ) );

		return ret;
	},

	0x1d6: function PACKET_ZC_NOTIFY_MAPPROPERTY2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.type = lp.getInt16( 0x2, true );

		return ret;
	},

	0x1d7: function PACKET_ZC_SPRITE_CHANGE2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );
		ret.type = lp.getUint8( 0x6 );
		ret.value = lp.getInt32( 0x7, true );

		return ret;
	},

	0x1d8: function PACKET_ZC_NOTIFY_STANDENTRY2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );
		ret.speed = lp.getInt16( 0x6, true );
		ret.bodyState = lp.getInt16( 0x8, true );
		ret.healthState = lp.getInt16( 0xa, true );
		ret.effectState = lp.getInt16( 0xc, true );
		ret.job = lp.getInt16( 0xe, true );
		ret.head = lp.getInt16( 0x10, true );
		ret.weapon = lp.getInt32( 0x12, true );
		ret.accessory = lp.getInt16( 0x16, true );
		ret.accessory2 = lp.getInt16( 0x18, true );
		ret.accessory3 = lp.getInt16( 0x1a, true );
		ret.headpalette = lp.getInt16( 0x1c, true );
		ret.bodypalette = lp.getInt16( 0x1e, true );
		ret.headDir = lp.getInt16( 0x20, true );
		ret.GUID = lp.getUint32( 0x22, true );
		ret.GEmblemVer = lp.getInt16( 0x26, true );
		ret.honor = lp.getInt16( 0x28, true );
		ret.virtue = lp.getInt16( 0x2a, true );
		ret.isPKModeON = lp.getUint8( 0x2c );
		ret.sex = lp.getUint8( 0x2d );
		ret.PosDir = new Uint8Array( buf.slice( 0x2e, 0x31 ) );
		ret.xSize = lp.getUint8( 0x31 );
		ret.ySize = lp.getUint8( 0x32 );
		ret.state = lp.getUint8( 0x33 );
		ret.clevel = lp.getInt16( 0x34, true );

		return ret;
	},

	0x1d9: function PACKET_ZC_NOTIFY_NEWENTRY2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );
		ret.speed = lp.getInt16( 0x6, true );
		ret.bodyState = lp.getInt16( 0x8, true );
		ret.healthState = lp.getInt16( 0xa, true );
		ret.effectState = lp.getInt16( 0xc, true );
		ret.job = lp.getInt16( 0xe, true );
		ret.head = lp.getInt16( 0x10, true );
		ret.weapon = lp.getInt32( 0x12, true );
		ret.accessory = lp.getInt16( 0x16, true );
		ret.accessory2 = lp.getInt16( 0x18, true );
		ret.accessory3 = lp.getInt16( 0x1a, true );
		ret.headpalette = lp.getInt16( 0x1c, true );
		ret.bodypalette = lp.getInt16( 0x1e, true );
		ret.headDir = lp.getInt16( 0x20, true );
		ret.GUID = lp.getUint32( 0x22, true );
		ret.GEmblemVer = lp.getInt16( 0x26, true );
		ret.honor = lp.getInt16( 0x28, true );
		ret.virtue = lp.getInt16( 0x2a, true );
		ret.isPKModeON = lp.getUint8( 0x2c );
		ret.sex = lp.getUint8( 0x2d );
		ret.PosDir = new Uint8Array( buf.slice( 0x2e, 0x31 ) );
		ret.xSize = lp.getUint8( 0x31 );
		ret.ySize = lp.getUint8( 0x32 );
		ret.clevel = lp.getInt16( 0x33, true );

		return ret;
	},

	0x1da: function PACKET_ZC_NOTIFY_MOVEENTRY2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );
		ret.speed = lp.getInt16( 0x6, true );
		ret.bodyState = lp.getInt16( 0x8, true );
		ret.healthState = lp.getInt16( 0xa, true );
		ret.effectState = lp.getInt16( 0xc, true );
		ret.job = lp.getInt16( 0xe, true );
		ret.head = lp.getInt16( 0x10, true );
		ret.weapon = lp.getInt32( 0x12, true );
		ret.accessory = lp.getInt16( 0x16, true );
		ret.moveStartTime = lp.getUint32( 0x18, true );
		ret.accessory2 = lp.getInt16( 0x1c, true );
		ret.accessory3 = lp.getInt16( 0x1e, true );
		ret.headpalette = lp.getInt16( 0x20, true );
		ret.bodypalette = lp.getInt16( 0x22, true );
		ret.headDir = lp.getInt16( 0x24, true );
		ret.GUID = lp.getUint32( 0x26, true );
		ret.GEmblemVer = lp.getInt16( 0x2a, true );
		ret.honor = lp.getInt16( 0x2c, true );
		ret.virtue = lp.getInt16( 0x2e, true );
		ret.isPKModeON = lp.getUint8( 0x30 );
		ret.sex = lp.getUint8( 0x31 );
		ret.MoveData = new Uint8Array( buf.slice( 0x32, 0x38 ) );
		ret.xSize = lp.getUint8( 0x38 );
		ret.ySize = lp.getUint8( 0x39 );
		ret.clevel = lp.getInt16( 0x3a, true );

		return ret;
	},

	0x1db: function PACKET_CA_REQ_HASH( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x1dc: function PACKET_AC_ACK_HASH( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.secret = new Uint8Array( buf.slice( 0x4 ) );

		return ret;
	},

	0x1dd: function PACKET_CA_LOGIN2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Version = lp.getUint32( 0x2, true );
		ret.ID = new Uint8Array( buf.slice( 0x6, 0x1e ) );
		ret.PasswdMD5 = new Uint8Array( buf.slice( 0x1e, 0x2e ) );
		ret.clienttype = lp.getUint8( 0x2e );

		return ret;
	},

	0x1de: function PACKET_ZC_NOTIFY_SKILL2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.SKID = lp.getUint16( 0x2, true );
		ret.AID = lp.getUint32( 0x4, true );
		ret.targetID = lp.getUint32( 0x8, true );
		ret.startTime = lp.getUint32( 0xc, true );
		ret.attackMT = lp.getInt32( 0x10, true );
		ret.attackedMT = lp.getInt32( 0x14, true );
		ret.damage = lp.getInt32( 0x18, true );
		ret.level = lp.getInt16( 0x1c, true );
		ret.count = lp.getInt16( 0x1e, true );
		ret.action = lp.getUint8( 0x20 );

		return ret;
	},

	0x1df: function PACKET_CZ_REQ_ACCOUNTNAME( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );

		return ret;
	},

	0x1e0: function PACKET_ZC_ACK_ACCOUNTNAME( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.name = new Uint8Array( buf.slice( 0x6, 0x1e ) );

		return ret;
	},

	0x1e1: function PACKET_ZC_SPIRITS2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.num = lp.getInt16( 0x6, true );

		return ret;
	},

	0x1e2: function PACKET_ZC_REQ_COUPLE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.GID = lp.getUint32( 0x6, true );
		ret.name = new Uint8Array( buf.slice( 0xa, 0x22 ) );

		return ret;
	},

	0x1e3: function PACKET_CZ_JOIN_COUPLE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.GID = lp.getUint32( 0x6, true );
		ret.answer = lp.getInt32( 0xa, true );

		return ret;
	},

	0x1e4: function PACKET_ZC_START_COUPLE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x1e5: function PACKET_CZ_REQ_JOIN_COUPLE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );

		return ret;
	},

	0x1e6: function PACKET_ZC_COUPLENAME( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.CoupleName = new Uint8Array( buf.slice( 0x2, 0x1a ) );

		return ret;
	},

	0x1e7: function PACKET_CZ_DORIDORI( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x1e8: function PACKET_CZ_MAKE_GROUP2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.groupName = new Uint8Array( buf.slice( 0x2, 0x1a ) );
		ret.ItemPickupRule = lp.getUint8( 0x1a );
		ret.ItemDivisionRule = lp.getUint8( 0x1b );

		return ret;
	},

	0x1e9: function PACKET_ZC_ADD_MEMBER_TO_GROUP2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.Role = lp.getUint32( 0x6, true );
		ret.xPos = lp.getInt16( 0xa, true );
		ret.yPos = lp.getInt16( 0xc, true );
		ret.state = lp.getUint8( 0xe );
		ret.groupName = new Uint8Array( buf.slice( 0xf, 0x27 ) );
		ret.characterName = new Uint8Array( buf.slice( 0x27, 0x3f ) );
		ret.mapName = new Uint8Array( buf.slice( 0x3f, 0x4f ) );
		ret.ItemPickupRule = lp.getUint8( 0x4f );
		ret.ItemDivisionRule = lp.getUint8( 0x50 );

		return ret;
	},

	0x1ea: function PACKET_ZC_CONGRATULATION( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );

		return ret;
	},

	0x1eb: function PACKET_ZC_NOTIFY_POSITION_TO_GUILDM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.xPos = lp.getInt16( 0x6, true );
		ret.yPos = lp.getInt16( 0x8, true );

		return ret;
	},

	0x1ec: function PACKET_ZC_GUILD_MEMBER_MAP_CHANGE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GDID = lp.getUint32( 0x2, true );
		ret.AID = lp.getUint32( 0x6, true );
		ret.mapName = new Uint8Array( buf.slice( 0xa, 0x1a ) );

		return ret;
	},

	0x1ed: function PACKET_CZ_CHOPOKGI( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x1ee: function PACKET_ZC_NORMAL_ITEMLIST2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.ItemInfo = [];

		// NORMALITEM_EXTRAINFO2
		for( p = 0x4; p < buf.byteLength; p += 18 ) {

			var ret2 = {};

			ret2.index = lp.getInt16( p + 0x0, true );
			ret2.ITID = lp.getUint16( p + 0x2, true );
			ret2.type = lp.getUint8( p + 0x4 );
			ret2.IsIdentified = lp.getUint8( p + 0x5 );
			ret2.count = lp.getInt16( p + 0x6, true );
			ret2.WearState = lp.getUint16( p + 0x8, true );
			
			// EQUIPSLOTINFO
			ret2.slot = {
				card1: lp.getUint16( p + 0xa, true ),
				card2: lp.getUint16( p + 0xc, true ),
				card3: lp.getUint16( p + 0xe, true ),
				card4: lp.getUint16( p + 0x10, true ),
			};


			ret.ItemInfo.push( ret2 );

		}

		return ret;
	},

	0x1ef: function PACKET_ZC_CART_NORMAL_ITEMLIST2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.ItemInfo = [];

		// NORMALITEM_EXTRAINFO2
		for( p = 0x4; p < buf.byteLength; p += 18 ) {

			var ret2 = {};

			ret2.index = lp.getInt16( p + 0x0, true );
			ret2.ITID = lp.getUint16( p + 0x2, true );
			ret2.type = lp.getUint8( p + 0x4 );
			ret2.IsIdentified = lp.getUint8( p + 0x5 );
			ret2.count = lp.getInt16( p + 0x6, true );
			ret2.WearState = lp.getUint16( p + 0x8, true );
			
			// EQUIPSLOTINFO
			ret2.slot = {
				card1: lp.getUint16( p + 0xa, true ),
				card2: lp.getUint16( p + 0xc, true ),
				card3: lp.getUint16( p + 0xe, true ),
				card4: lp.getUint16( p + 0x10, true ),
			};


			ret.ItemInfo.push( ret2 );

		}

		return ret;
	},

	0x1f0: function PACKET_ZC_STORE_NORMAL_ITEMLIST2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.ItemInfo = [];

		// NORMALITEM_EXTRAINFO2
		for( p = 0x4; p < buf.byteLength; p += 18 ) {

			var ret2 = {};

			ret2.index = lp.getInt16( p + 0x0, true );
			ret2.ITID = lp.getUint16( p + 0x2, true );
			ret2.type = lp.getUint8( p + 0x4 );
			ret2.IsIdentified = lp.getUint8( p + 0x5 );
			ret2.count = lp.getInt16( p + 0x6, true );
			ret2.WearState = lp.getUint16( p + 0x8, true );
			
			// EQUIPSLOTINFO
			ret2.slot = {
				card1: lp.getUint16( p + 0xa, true ),
				card2: lp.getUint16( p + 0xc, true ),
				card3: lp.getUint16( p + 0xe, true ),
				card4: lp.getUint16( p + 0x10, true ),
			};


			ret.ItemInfo.push( ret2 );

		}

		return ret;
	},

	0x1f1: function PACKET_AC_NOTIFY_ERROR( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.msg = new Uint8Array( buf.slice( 0x4 ) );

		return ret;
	},

	0x1f2: function PACKET_ZC_UPDATE_CHARSTAT2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.GID = lp.getUint32( 0x6, true );
		ret.status = lp.getInt32( 0xa, true );
		ret.sex = lp.getInt16( 0xe, true );
		ret.head = lp.getInt16( 0x10, true );
		ret.headPalette = lp.getInt16( 0x12, true );

		return ret;
	},

	0x1f3: function PACKET_ZC_NOTIFY_EFFECT2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.effectID = lp.getInt32( 0x6, true );

		return ret;
	},

	0x1f4: function PACKET_ZC_REQ_EXCHANGE_ITEM2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.name = new Uint8Array( buf.slice( 0x2, 0x1a ) );
		ret.GID = lp.getUint32( 0x1a, true );
		ret.level = lp.getInt16( 0x1e, true );

		return ret;
	},

	0x1f5: function PACKET_ZC_ACK_EXCHANGE_ITEM2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.result = lp.getUint8( 0x2 );
		ret.GID = lp.getUint32( 0x3, true );
		ret.level = lp.getInt16( 0x7, true );

		return ret;
	},

	0x1f6: function PACKET_ZC_REQ_BABY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.GID = lp.getUint32( 0x6, true );
		ret.name = new Uint8Array( buf.slice( 0xa, 0x22 ) );

		return ret;
	},

	0x1f7: function PACKET_CZ_JOIN_BABY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.GID = lp.getUint32( 0x6, true );
		ret.answer = lp.getInt32( 0xa, true );

		return ret;
	},

	0x1f8: function PACKET_ZC_START_BABY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x1f9: function PACKET_CZ_REQ_JOIN_BABY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );

		return ret;
	},

	0x1fa: function PACKET_CA_LOGIN3( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Version = lp.getUint32( 0x2, true );
		ret.ID = new Uint8Array( buf.slice( 0x6, 0x1e ) );
		ret.PasswdMD5 = new Uint8Array( buf.slice( 0x1e, 0x2e ) );
		ret.clienttype = lp.getUint8( 0x2e );
		ret.ClientInfo = lp.getUint8( 0x2f );

		return ret;
	},

	0x1fb: function PACKET_CH_DELETE_CHAR2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );
		ret.key = new Uint8Array( buf.slice( 0x6, 0x38 ) );

		return ret;
	},

	0x1fc: function PACKET_ZC_REPAIRITEMLIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.itemList = [];

		// REPAIRITEM_INFO
		for( p = 0x4; p < buf.byteLength; p += 13 ) {

			var ret2 = {};

			ret2.index = lp.getInt16( p + 0x0, true );
			ret2.ITID = lp.getUint16( p + 0x2, true );
			ret2.refiningLevel = lp.getUint8( p + 0x4 );
			
			// EQUIPSLOTINFO
			ret2.slot = {
				card1: lp.getUint16( p + 0x5, true ),
				card2: lp.getUint16( p + 0x7, true ),
				card3: lp.getUint16( p + 0x9, true ),
				card4: lp.getUint16( p + 0xb, true ),
			};


			ret.itemList.push( ret2 );

		}

		return ret;
	},

	0x1fd: function PACKET_CZ_REQ_ITEMREPAIR( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		
		// REPAIRITEM_INFO
		ret.TargetItemInfo = {
			index: lp.getInt16( p + 0x2, true ),
			ITID: lp.getUint16( p + 0x4, true ),
			refiningLevel: lp.getUint8( p + 0x6 ),
			
			// EQUIPSLOTINFO
			slot: {
				card1: lp.getUint16( p + 0x5, true ),
				card2: lp.getUint16( p + 0x7, true ),
				card3: lp.getUint16( p + 0x9, true ),
				card4: lp.getUint16( p + 0xb, true ),
			}

		};

		return ret;
		
	},

	0x1fe: function PACKET_ZC_ACK_ITEMREPAIR( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getInt16( 0x2, true );
		ret.result = lp.getUint8( 0x4 );

		return ret;
	},

	0x1ff: function PACKET_ZC_HIGHJUMP( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.xPos = lp.getInt16( 0x6, true );
		ret.yPos = lp.getInt16( 0x8, true );

		return ret;
	},

	0x200: function PACKET_CA_CONNECT_INFO_CHANGED( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.ID = new Uint8Array( buf.slice( 0x2, 0x1a ) );

		return ret;
	},

	0x201: function PACKET_ZC_FRIENDS_LIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.friendList = [];

		// STRUCT_FRIEND
		for( p = 0x4; p < buf.byteLength; p += 32 ) {

			var ret2 = {};

			ret2.AID = lp.getUint32( p + 0x0, true );
			ret2.GID = lp.getUint32( p + 0x4, true );
			ret2.Name = new Uint8Array( buf.slice( p + 0x8, p + 0x20 ) );

			ret.friendList.push( ret2 );

		}

		return ret;
	},

	0x202: function PACKET_CZ_ADD_FRIENDS( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.name = new Uint8Array( buf.slice( 0x2, 0x1a ) );

		return ret;
	},

	0x203: function PACKET_CZ_DELETE_FRIENDS( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.GID = lp.getUint32( 0x6, true );

		return ret;
	},

	0x204: function PACKET_CA_EXE_HASHCHECK( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.HashValue = new Uint8Array( buf.slice( 0x2, 0x12 ) );

		return ret;
	},

	0x205: function PACKET_ZC_DIVORCE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.name = new Uint8Array( buf.slice( 0x2, 0x1a ) );

		return ret;
	},

	0x206: function PACKET_ZC_FRIENDS_STATE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.GID = lp.getUint32( 0x6, true );
		ret.State = lp.getUint8( 0xa );

		return ret;
	},

	0x207: function PACKET_ZC_REQ_ADD_FRIENDS( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.ReqAID = lp.getUint32( 0x2, true );
		ret.ReqGID = lp.getUint32( 0x6, true );
		ret.Name = new Uint8Array( buf.slice( 0xa, 0x22 ) );

		return ret;
	},

	0x208: function PACKET_CZ_ACK_REQ_ADD_FRIENDS( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.ReqAID = lp.getUint32( 0x2, true );
		ret.ReqGID = lp.getUint32( 0x6, true );
		ret.Result = lp.getInt32( 0xa, true );

		return ret;
	},

	0x209: function PACKET_ZC_ADD_FRIENDS_LIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Result = lp.getInt16( 0x2, true );
		ret.AID = lp.getUint32( 0x4, true );
		ret.GID = lp.getUint32( 0x8, true );
		ret.Name = new Uint8Array( buf.slice( 0xc, 0x24 ) );

		return ret;
	},

	0x20a: function PACKET_ZC_DELETE_FRIENDS( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.GID = lp.getUint32( 0x6, true );

		return ret;
	},

	0x20b: function PACKET_CH_EXE_HASHCHECK( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.ClientType = lp.getUint8( 0x2 );
		ret.HashValue = new Uint8Array( buf.slice( 0x3, 0x13 ) );

		return ret;
	},

	0x20c: function PACKET_CZ_EXE_HASHCHECK( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.ClientType = lp.getUint8( 0x2 );
		ret.HashValue = new Uint8Array( buf.slice( 0x3, 0x13 ) );

		return ret;
	},

	0x20d: function PACKET_HC_BLOCK_CHARACTER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.characterList = [];

		// TAG_CHARACTER_BLOCK_INFO
		for( p = 0x4; p < buf.byteLength; p += 24 ) {

			var ret2 = {};

			ret2.GID = lp.getUint32( p + 0x0, true );
			ret2.szExpireDate = new Uint8Array( buf.slice( p + 0x4, p + 0x18 ) );

			ret.characterList.push( ret2 );

		}

		return ret;
	},

	0x20e: function PACKET_ZC_STARSKILL( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.mapName = new Uint8Array( buf.slice( 0x2, 0x1a ) );
		ret.monsterID = lp.getInt32( 0x1a, true );
		ret.star = lp.getUint8( 0x1e );
		ret.result = lp.getUint8( 0x1f );

		return ret;
	},

	0x20f: function PACKET_CZ_REQ_PVPPOINT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.GID = lp.getUint32( 0x6, true );

		return ret;
	},

	0x210: function PACKET_ZC_ACK_PVPPOINT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.GID = lp.getUint32( 0x6, true );
		
		// PVPINFO
		ret.PVP = {
			WinPoint: lp.getInt32( p + 0xa, true ),
			LosePoint: lp.getInt32( p + 0xe, true ),
			Point: lp.getInt32( p + 0x12, true ),
		};


		return ret;
	},

	0x211: function PACKET_ZH_MOVE_PVPWORLD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );

		return ret;
	},

	0x212: function PACKET_CZ_REQ_GIVE_MANNER_BYNAME( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.CharName = new Uint8Array( buf.slice( 0x2, 0x1a ) );

		return ret;
	},

	0x213: function PACKET_CZ_REQ_STATUS_GM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.CharName = new Uint8Array( buf.slice( 0x2, 0x1a ) );

		return ret;
	},

	0x214: function PACKET_ZC_ACK_STATUS_GM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.str = lp.getUint8( 0x2 );
		ret.standardStr = lp.getUint8( 0x3 );
		ret.agi = lp.getUint8( 0x4 );
		ret.standardAgi = lp.getUint8( 0x5 );
		ret.vit = lp.getUint8( 0x6 );
		ret.standardVit = lp.getUint8( 0x7 );
		ret.Int = lp.getUint8( 0x8 );
		ret.standardInt = lp.getUint8( 0x9 );
		ret.dex = lp.getUint8( 0xa );
		ret.standardDex = lp.getUint8( 0xb );
		ret.luk = lp.getUint8( 0xc );
		ret.standardLuk = lp.getUint8( 0xd );
		ret.attPower = lp.getInt16( 0xe, true );
		ret.refiningPower = lp.getInt16( 0x10, true );
		ret.max_mattPower = lp.getInt16( 0x12, true );
		ret.min_mattPower = lp.getInt16( 0x14, true );
		ret.itemdefPower = lp.getInt16( 0x16, true );
		ret.plusdefPower = lp.getInt16( 0x18, true );
		ret.mdefPower = lp.getInt16( 0x1a, true );
		ret.plusmdefPower = lp.getInt16( 0x1c, true );
		ret.hitSuccessValue = lp.getInt16( 0x1e, true );
		ret.avoidSuccessValue = lp.getInt16( 0x20, true );
		ret.plusAvoidSuccessValue = lp.getInt16( 0x22, true );
		ret.criticalSuccessValue = lp.getInt16( 0x24, true );
		ret.ASPD = lp.getInt16( 0x26, true );
		ret.plusASPD = lp.getInt16( 0x28, true );

		return ret;
	},

	0x215: function PACKET_ZC_SKILLMSG( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.MsgNo = lp.getInt32( 0x2, true );

		return ret;
	},

	0x216: function PACKET_ZC_BABYMSG( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.MsgNo = lp.getInt32( 0x2, true );

		return ret;
	},

	0x217: function PACKET_CZ_BLACKSMITH_RANK( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x218: function PACKET_CZ_ALCHEMIST_RANK( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x219: function PACKET_ZC_BLACKSMITH_RANK( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Name = new Uint8Array( buf.slice( 0x2, 0xc ) );
		ret.Point = new Int32Array( buf.slice( 0xf2, 0x11a ) );

		return ret;
	},

	0x21a: function PACKET_ZC_ALCHEMIST_RANK( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Name = new Uint8Array( buf.slice( 0x2, 0xc ) );
		ret.Point = new Int32Array( buf.slice( 0xf2, 0x11a ) );

		return ret;
	},

	0x21b: function PACKET_ZC_BLACKSMITH_POINT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Point = lp.getInt32( 0x2, true );
		ret.TotalPoint = lp.getInt32( 0x6, true );

		return ret;
	},

	0x21c: function PACKET_ZC_ALCHEMIST_POINT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Point = lp.getInt32( 0x2, true );
		ret.TotalPoint = lp.getInt32( 0x6, true );

		return ret;
	},

	0x21d: function PACKET_CZ_LESSEFFECT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.isLess = lp.getInt32( 0x2, true );

		return ret;
	},

	0x21e: function PACKET_ZC_LESSEFFECT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.isLess = lp.getInt32( 0x2, true );

		return ret;
	},

	0x21f: function PACKET_ZC_NOTIFY_PKINFO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.winPoint = lp.getInt32( 0x2, true );
		ret.losePoint = lp.getInt32( 0x6, true );
		ret.killName = new Uint8Array( buf.slice( 0xa, 0x22 ) );
		ret.killedName = new Uint8Array( buf.slice( 0x22, 0x3a ) );
		
		// _FILETIME
		ret.expireTime = {
			dwLowDateTime: lp.getUint32( p + 0x3a, true ),
			dwHighDateTime: lp.getUint32( p + 0x3e, true ),
		};


		return ret;
	},

	0x220: function PACKET_ZC_NOTIFY_CRAZYKILLER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.isCrazyKiller = lp.getInt32( 0x6, true );

		return ret;
	},

	0x221: function PACKET_ZC_NOTIFY_WEAPONITEMLIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.itemList = [];

		// REPAIRITEM_INFO
		for( p = 0x4; p < buf.byteLength; p += 13 ) {

			var ret2 = {};

			ret2.index = lp.getInt16( p + 0x0, true );
			ret2.ITID = lp.getUint16( p + 0x2, true );
			ret2.refiningLevel = lp.getUint8( p + 0x4 );
			
			// EQUIPSLOTINFO
			ret2.slot = {
				card1: lp.getUint16( p + 0x5, true ),
				card2: lp.getUint16( p + 0x7, true ),
				card3: lp.getUint16( p + 0x9, true ),
				card4: lp.getUint16( p + 0xb, true ),
			};


			ret.itemList.push( ret2 );

		}

		return ret;
	},

	0x222: function PACKET_CZ_REQ_WEAPONREFINE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Index = lp.getInt32( 0x2, true );

		return ret;
	},

	0x223: function PACKET_ZC_ACK_WEAPONREFINE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.msg = lp.getInt32( 0x2, true );
		ret.ITID = lp.getUint16( 0x6, true );

		return ret;
	},

	0x224: function PACKET_ZC_TAEKWON_POINT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Point = lp.getInt32( 0x2, true );
		ret.TotalPoint = lp.getInt32( 0x6, true );

		return ret;
	},

	0x225: function PACKET_CZ_TAEKWON_RANK( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x226: function PACKET_ZC_TAEKWON_RANK( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Name = new Uint8Array( buf.slice( 0x2, 0xc ) );
		ret.Point = new Int32Array( buf.slice( 0xf2, 0x11a ) );

		return ret;
	},

	0x227: function PACKET_ZC_GAME_GUARD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AuthData = new Uint32Array( buf.slice( 0x2, 0x12 ) );

		return ret;
	},

	0x228: function PACKET_CZ_ACK_GAME_GUARD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AuthData = new Uint32Array( buf.slice( 0x2, 0x12 ) );

		return ret;
	},

	0x229: function PACKET_ZC_STATE_CHANGE3( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.bodyState = lp.getInt16( 0x6, true );
		ret.healthState = lp.getInt16( 0x8, true );
		ret.effectState = lp.getInt32( 0xa, true );
		ret.isPKModeON = lp.getUint8( 0xe );

		return ret;
	},

	0x22a: function PACKET_ZC_NOTIFY_STANDENTRY3( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );
		ret.speed = lp.getInt16( 0x6, true );
		ret.bodyState = lp.getInt16( 0x8, true );
		ret.healthState = lp.getInt16( 0xa, true );
		ret.effectState = lp.getInt32( 0xc, true );
		ret.job = lp.getInt16( 0x10, true );
		ret.head = lp.getInt16( 0x12, true );
		ret.weapon = lp.getInt32( 0x14, true );
		ret.accessory = lp.getInt16( 0x18, true );
		ret.accessory2 = lp.getInt16( 0x1a, true );
		ret.accessory3 = lp.getInt16( 0x1c, true );
		ret.headpalette = lp.getInt16( 0x1e, true );
		ret.bodypalette = lp.getInt16( 0x20, true );
		ret.headDir = lp.getInt16( 0x22, true );
		ret.GUID = lp.getUint32( 0x24, true );
		ret.GEmblemVer = lp.getInt16( 0x28, true );
		ret.honor = lp.getInt16( 0x2a, true );
		ret.virtue = lp.getInt32( 0x2c, true );
		ret.isPKModeON = lp.getUint8( 0x30 );
		ret.sex = lp.getUint8( 0x31 );
		ret.PosDir = new Uint8Array( buf.slice( 0x32, 0x35 ) );
		ret.xSize = lp.getUint8( 0x35 );
		ret.ySize = lp.getUint8( 0x36 );
		ret.state = lp.getUint8( 0x37 );
		ret.clevel = lp.getInt16( 0x38, true );

		return ret;
	},

	0x22b: function PACKET_ZC_NOTIFY_NEWENTRY3( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );
		ret.speed = lp.getInt16( 0x6, true );
		ret.bodyState = lp.getInt16( 0x8, true );
		ret.healthState = lp.getInt16( 0xa, true );
		ret.effectState = lp.getInt32( 0xc, true );
		ret.job = lp.getInt16( 0x10, true );
		ret.head = lp.getInt16( 0x12, true );
		ret.weapon = lp.getInt32( 0x14, true );
		ret.accessory = lp.getInt16( 0x18, true );
		ret.accessory2 = lp.getInt16( 0x1a, true );
		ret.accessory3 = lp.getInt16( 0x1c, true );
		ret.headpalette = lp.getInt16( 0x1e, true );
		ret.bodypalette = lp.getInt16( 0x20, true );
		ret.headDir = lp.getInt16( 0x22, true );
		ret.GUID = lp.getUint32( 0x24, true );
		ret.GEmblemVer = lp.getInt16( 0x28, true );
		ret.honor = lp.getInt16( 0x2a, true );
		ret.virtue = lp.getInt32( 0x2c, true );
		ret.isPKModeON = lp.getUint8( 0x30 );
		ret.sex = lp.getUint8( 0x31 );
		ret.PosDir = new Uint8Array( buf.slice( 0x32, 0x35 ) );
		ret.xSize = lp.getUint8( 0x35 );
		ret.ySize = lp.getUint8( 0x36 );
		ret.clevel = lp.getInt16( 0x37, true );

		return ret;
	},

	0x22c: function PACKET_ZC_NOTIFY_MOVEENTRY3( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.objecttype = lp.getUint8( 0x2 );
		ret.GID = lp.getUint32( 0x3, true );
		ret.speed = lp.getInt16( 0x7, true );
		ret.bodyState = lp.getInt16( 0x9, true );
		ret.healthState = lp.getInt16( 0xb, true );
		ret.effectState = lp.getInt32( 0xd, true );
		ret.job = lp.getInt16( 0x11, true );
		ret.head = lp.getInt16( 0x13, true );
		ret.weapon = lp.getInt32( 0x15, true );
		ret.accessory = lp.getInt16( 0x19, true );
		ret.moveStartTime = lp.getUint32( 0x1b, true );
		ret.accessory2 = lp.getInt16( 0x1f, true );
		ret.accessory3 = lp.getInt16( 0x21, true );
		ret.headpalette = lp.getInt16( 0x23, true );
		ret.bodypalette = lp.getInt16( 0x25, true );
		ret.headDir = lp.getInt16( 0x27, true );
		ret.GUID = lp.getUint32( 0x29, true );
		ret.GEmblemVer = lp.getInt16( 0x2d, true );
		ret.honor = lp.getInt16( 0x2f, true );
		ret.virtue = lp.getInt32( 0x31, true );
		ret.isPKModeON = lp.getUint8( 0x35 );
		ret.sex = lp.getUint8( 0x36 );
		ret.MoveData = new Uint8Array( buf.slice( 0x37, 0x3d ) );
		ret.xSize = lp.getUint8( 0x3d );
		ret.ySize = lp.getUint8( 0x3e );
		ret.clevel = lp.getInt16( 0x3f, true );

		return ret;
	},

	0x22d: function PACKET_CZ_COMMAND_MER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.type = lp.getInt16( 0x2, true );
		ret.command = lp.getUint8( 0x4 );

		return ret;
	},

	0x22e: function PACKET_ZC_PROPERTY_HOMUN( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.szName = new Uint8Array( buf.slice( 0x2, 0x1a ) );
		ret.bModified = lp.getUint8( 0x1a );
		ret.nLevel = lp.getInt16( 0x1b, true );
		ret.nFullness = lp.getInt16( 0x1d, true );
		ret.nRelationship = lp.getInt16( 0x1f, true );
		ret.ITID = lp.getUint16( 0x21, true );
		ret.atk = lp.getInt16( 0x23, true );
		ret.Matk = lp.getInt16( 0x25, true );
		ret.hit = lp.getInt16( 0x27, true );
		ret.critical = lp.getInt16( 0x29, true );
		ret.def = lp.getInt16( 0x2b, true );
		ret.Mdef = lp.getInt16( 0x2d, true );
		ret.flee = lp.getInt16( 0x2f, true );
		ret.aspd = lp.getInt16( 0x31, true );
		ret.hp = lp.getInt16( 0x33, true );
		ret.maxHP = lp.getInt16( 0x35, true );
		ret.sp = lp.getInt16( 0x37, true );
		ret.maxSP = lp.getInt16( 0x39, true );
		ret.exp = lp.getInt32( 0x3b, true );
		ret.maxEXP = lp.getInt32( 0x3f, true );
		ret.SKPoint = lp.getInt16( 0x43, true );
		ret.ATKRange = lp.getInt16( 0x45, true );

		return ret;
	},

	0x230: function PACKET_ZC_CHANGESTATE_MER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.type = lp.getUint8( 0x2 );
		ret.state = lp.getUint8( 0x3 );
		ret.GID = lp.getInt32( 0x4, true );
		ret.data = lp.getInt32( 0x8, true );

		return ret;
	},

	0x231: function PACKET_CZ_RENAME_MER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.name = new Uint8Array( buf.slice( 0x2, 0x1a ) );

		return ret;
	},

	0x232: function PACKET_CZ_REQUEST_MOVENPC( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );
		ret.dest = new Uint8Array( buf.slice( 0x6, 0x9 ) );

		return ret;
	},

	0x233: function PACKET_CZ_REQUEST_ACTNPC( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );
		ret.targetGID = lp.getUint32( 0x6, true );
		ret.action = lp.getUint8( 0xa );

		return ret;
	},

	0x234: function PACKET_CZ_REQUEST_MOVETOOWNER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );

		return ret;
	},

	0x23a: function PACKET_ZC_REQ_STORE_PASSWORD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Info = lp.getInt16( 0x2, true );

		return ret;
	},

	0x23b: function PACKET_CZ_ACK_STORE_PASSWORD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Type = lp.getInt16( 0x2, true );
		ret.Password = new Uint8Array( buf.slice( 0x4, 0x14 ) );
		ret.NewPassword = new Uint8Array( buf.slice( 0x14, 0x24 ) );

		return ret;
	},

	0x23c: function PACKET_ZC_RESULT_STORE_PASSWORD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Result = lp.getInt16( 0x2, true );
		ret.ErrorCount = lp.getInt16( 0x4, true );

		return ret;
	},

	0x23d: function PACKET_AC_EVENT_RESULT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.EventItemCount = lp.getUint32( 0x2, true );

		return ret;
	},

	0x23e: function PACKET_HC_REQUEST_CHARACTER_PASSWORD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Result = lp.getInt16( 0x2, true );
		ret.dummyValue = lp.getUint32( 0x4, true );

		return ret;
	},

	0x23f: function PACKET_CZ_MAIL_GET_LIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x240: function PACKET_ZC_MAIL_REQ_GET_LIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.MailNumber = lp.getInt32( 0x4, true );
		
		ret.mailList = [];

		// MAIL_LIST
		for( p = 0x8; p < buf.byteLength; p += 73 ) {

			var ret2 = {};

			ret2.MailID = lp.getUint32( p + 0x0, true );
			ret2.HEADER = new Uint8Array( buf.slice( p + 0x4, p + 0x2c ) );
			ret2.isOpen = lp.getUint8( p + 0x2c );
			ret2.FromName = new Uint8Array( buf.slice( p + 0x2d, p + 0x45 ) );
			ret2.DeleteTime = lp.getInt32( p + 0x45, true );

			ret.mailList.push( ret2 );

		}

		return ret;
	},

	0x241: function PACKET_CZ_MAIL_OPEN( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.MailID = lp.getInt32( 0x2, true );

		return ret;
	},

	0x242: function PACKET_ZC_MAIL_REQ_OPEN( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.MailID = lp.getInt32( 0x4, true );
		ret.Header = new Uint8Array( buf.slice( 0x8, 0x30 ) );
		ret.FromName = new Uint8Array( buf.slice( 0x30, 0x48 ) );
		ret.DeleteTime = lp.getInt32( 0x48, true );
		ret.Money = lp.getUint32( 0x4c, true );
		ret.count = lp.getInt32( 0x50, true );
		ret.ITID = lp.getUint16( 0x54, true );
		ret.Type = lp.getUint16( 0x56, true );
		ret.IsIdentified = lp.getUint8( 0x58 );
		ret.IsDamaged = lp.getUint8( 0x59 );
		ret.refiningLevel = lp.getUint8( 0x5a );
		
		// EQUIPSLOTINFO
		ret.slot = {
			card1: lp.getUint16( p + 0x5b, true ),
			card2: lp.getUint16( p + 0x5d, true ),
			card3: lp.getUint16( p + 0x5f, true ),
			card4: lp.getUint16( p + 0x61, true ),
		};

		ret.msg_len = lp.getUint8( 0x63 );
		ret.msg = new Uint8Array( buf.slice( 0x64 ) );

		return ret;
	},

	0x243: function PACKET_CZ_MAIL_DELETE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.MailID = lp.getInt32( 0x2, true );

		return ret;
	},

	0x244: function PACKET_CZ_MAIL_GET_ITEM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.MailID = lp.getInt32( 0x2, true );

		return ret;
	},

	0x245: function PACKET_ZC_MAIL_REQ_GET_ITEM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Result = lp.getUint8( 0x2 );

		return ret;
	},

	0x246: function PACKET_CZ_MAIL_RESET_ITEM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Type = lp.getInt16( 0x2, true );

		return ret;
	},

	0x247: function PACKET_CZ_MAIL_ADD_ITEM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getInt16( 0x2, true );
		ret.count = lp.getInt32( 0x4, true );

		return ret;
	},

	0x248: function PACKET_CZ_MAIL_SEND( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.ReceiveName = new Uint8Array( buf.slice( 0x4, 0x1c ) );
		ret.Header = new Uint8Array( buf.slice( 0x1c, 0x44 ) );
		ret.msg_len = lp.getUint32( 0x44, true );
		ret.msg = new Uint8Array( buf.slice( 0x48 ) );

		return ret;
	},

	0x249: function PACKET_ZC_MAIL_REQ_SEND( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Result = lp.getUint8( 0x2 );

		return ret;
	},

	0x24a: function PACKET_ZC_MAIL_RECEIVE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.MailID = lp.getUint32( 0x2, true );
		ret.Header = new Uint8Array( buf.slice( 0x6, 0x2e ) );
		ret.FromName = new Uint8Array( buf.slice( 0x2e, 0x46 ) );

		return ret;
	},

	0x24b: function PACKET_CZ_AUCTION_CREATE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Type = lp.getInt16( 0x2, true );

		return ret;
	},

	0x24c: function PACKET_CZ_AUCTION_ADD_ITEM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getInt16( 0x2, true );
		ret.count = lp.getInt32( 0x4, true );

		return ret;
	},

	0x24d: function PACKET_CZ_AUCTION_ADD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.NowMoney = lp.getUint32( 0x2, true );
		ret.MaxMoney = lp.getUint32( 0x6, true );
		ret.DeleteHour = lp.getInt16( 0xa, true );

		return ret;
	},

	0x24e: function PACKET_CZ_AUCTION_ADD_CANCEL( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AuctionID = lp.getUint32( 0x2, true );

		return ret;
	},

	0x24f: function PACKET_CZ_AUCTION_BUY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AuctionID = lp.getUint32( 0x2, true );
		ret.Money = lp.getUint32( 0x6, true );

		return ret;
	},

	0x250: function PACKET_ZC_AUCTION_RESULT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Result = lp.getUint8( 0x2 );

		return ret;
	},

	0x251: function PACKET_CZ_AUCTION_ITEM_SEARCH( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Type = lp.getInt16( 0x2, true );
		ret.AuctionID = lp.getUint32( 0x4, true );
		ret.Name = new Uint8Array( buf.slice( 0x8, 0x20 ) );
		ret.Page = lp.getUint16( 0x20, true );

		return ret;
	},

	0x252: function PACKET_ZC_AUCTION_ITEM_REQ_SEARCH( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.MaxPage = lp.getInt32( 0x4, true );
		ret.Number = lp.getInt32( 0x8, true );
		
		ret.auctionItemList = [];

		// AUCTION_ITEM_SEARCH_INFO
		for( p = 0xc; p < buf.byteLength; p += 83 ) {

			var ret2 = {};

			ret2.AuctionID = lp.getUint32( p + 0x0, true );
			ret2.SellerName = new Uint8Array( buf.slice( p + 0x4, p + 0x1c ) );
			ret2.ITID = lp.getUint16( p + 0x1c, true );
			ret2.Type = lp.getInt32( p + 0x1e, true );
			ret2.count = lp.getInt16( p + 0x22, true );
			ret2.IsIdentified = lp.getUint8( p + 0x24 );
			ret2.IsDamaged = lp.getUint8( p + 0x25 );
			ret2.refiningLevel = lp.getUint8( p + 0x26 );
			
			// EQUIPSLOTINFO
			ret2.slot = {
				card1: lp.getUint16( p + 0x27, true ),
				card2: lp.getUint16( p + 0x29, true ),
				card3: lp.getUint16( p + 0x2b, true ),
				card4: lp.getUint16( p + 0x2d, true ),
			};

			ret2.NowPrice = lp.getInt32( p + 0x2f, true );
			ret2.MaxPrice = lp.getInt32( p + 0x33, true );
			ret2.BuyerName = new Uint8Array( buf.slice( p + 0x37, p + 0x4f ) );
			ret2.DeleteTime = lp.getInt32( p + 0x4f, true );

			ret.auctionItemList.push( ret2 );

		}

		return ret;
	},

	0x253: function PACKET_ZC_STARPLACE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.which = lp.getUint8( 0x2 );

		return ret;
	},

	0x254: function PACKET_CZ_AGREE_STARPLACE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.which = lp.getUint8( 0x2 );

		return ret;
	},

	0x255: function PACKET_ZC_ACK_MAIL_ADD_ITEM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Index = lp.getInt16( 0x2, true );
		ret.result = lp.getUint8( 0x4 );

		return ret;
	},

	0x256: function PACKET_ZC_ACK_AUCTION_ADD_ITEM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Index = lp.getInt16( 0x2, true );
		ret.result = lp.getUint8( 0x4 );

		return ret;
	},

	0x257: function PACKET_ZC_ACK_MAIL_DELETE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.MailID = lp.getInt32( 0x2, true );
		ret.Result = lp.getUint16( 0x6, true );

		return ret;
	},

	0x258: function PACKET_CA_REQ_GAME_GUARD_CHECK( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x259: function PACKET_AC_ACK_GAME_GUARD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.ucAnswer = lp.getUint8( 0x2 );

		return ret;
	},

	0x25a: function PACKET_ZC_MAKINGITEM_LIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.idList = new Uint16Array( buf.slice( 0x4 ) );

		return ret;
	},

	0x25b: function PACKET_CZ_REQ_MAKINGITEM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.mkType = lp.getInt16( 0x2, true );
		ret.id = lp.getUint16( 0x4, true );

		return ret;
	},

	0x25c: function PACKET_CZ_AUCTION_REQ_MY_INFO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Type = lp.getInt16( 0x2, true );

		return ret;
	},

	0x25d: function PACKET_CZ_AUCTION_REQ_MY_SELL_STOP( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AuctionID = lp.getUint32( 0x2, true );

		return ret;
	},

	0x25e: function PACKET_ZC_AUCTION_ACK_MY_SELL_STOP( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Result = lp.getInt16( 0x2, true );

		return ret;
	},

	0x25f: function PACKET_ZC_AUCTION_WINDOWS( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Type = lp.getInt32( 0x2, true );

		return ret;
	},

	0x260: function PACKET_ZC_MAIL_WINDOWS( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Type = lp.getInt32( 0x2, true );

		return ret;
	},

	0x261: function PACKET_AC_REQ_LOGIN_OLDEKEY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.m_SeedValue = new Uint8Array( buf.slice( 0x2, 0xb ) );

		return ret;
	},

	0x262: function PACKET_AC_REQ_LOGIN_NEWEKEY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.m_SeedValue = new Uint8Array( buf.slice( 0x2, 0xb ) );

		return ret;
	},

	0x263: function PACKET_AC_REQ_LOGIN_CARDPASS( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.m_SeedValue = new Uint8Array( buf.slice( 0x2, 0xb ) );

		return ret;
	},

	0x264: function PACKET_CA_ACK_LOGIN_OLDEKEY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.m_SeedValue = new Uint8Array( buf.slice( 0x2, 0xb ) );
		ret.m_EKey = new Uint8Array( buf.slice( 0xb, 0x14 ) );

		return ret;
	},

	0x265: function PACKET_CA_ACK_LOGIN_NEWEKEY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.m_SeedValue = new Uint8Array( buf.slice( 0x2, 0xb ) );
		ret.m_EKey = new Uint8Array( buf.slice( 0xb, 0x14 ) );

		return ret;
	},

	0x266: function PACKET_CA_ACK_LOGIN_CARDPASS( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.m_cardPass = new Uint8Array( buf.slice( 0x2, 0x1e ) );

		return ret;
	},

	0x267: function PACKET_AC_ACK_EKEY_FAIL_NOTEXIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.errorCode = lp.getInt16( 0x2, true );

		return ret;
	},

	0x268: function PACKET_AC_ACK_EKEY_FAIL_NOTUSESEKEY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.errorCode = lp.getInt16( 0x2, true );

		return ret;
	},

	0x269: function PACKET_AC_ACK_EKEY_FAIL_NOTUSEDEKEY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.errorCode = lp.getInt16( 0x2, true );

		return ret;
	},

	0x26a: function PACKET_AC_ACK_EKEY_FAIL_AUTHREFUSE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.errorCode = lp.getInt16( 0x2, true );

		return ret;
	},

	0x26b: function PACKET_AC_ACK_EKEY_FAIL_INPUTEKEY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.errorCode = lp.getInt16( 0x2, true );

		return ret;
	},

	0x26c: function PACKET_AC_ACK_EKEY_FAIL_NOTICE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.errorCode = lp.getInt16( 0x2, true );

		return ret;
	},

	0x26d: function PACKET_AC_ACK_EKEY_FAIL_NEEDCARDPASS( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.errorCode = lp.getInt16( 0x2, true );

		return ret;
	},

	0x26e: function PACKET_AC_ACK_AUTHEKEY_FAIL_NOTMATCHCARDPASS( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.errorCode = lp.getInt16( 0x2, true );

		return ret;
	},

	0x26f: function PACKET_AC_ACK_FIRST_LOGIN( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x270: function PACKET_AC_REQ_LOGIN_ACCOUNT_INFO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x271: function PACKET_CA_ACK_LOGIN_ACCOUNT_INFO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.sex = lp.getInt16( 0x2, true );
		ret.bPoint = lp.getInt16( 0x4, true );
		ret.E_mail = new Uint8Array( buf.slice( 0x6, 0x28 ) );

		return ret;
	},

	0x272: function PACKET_AC_ACK_PT_ID_INFO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.szPTID = new Uint8Array( buf.slice( 0x2, 0x17 ) );
		ret.szPTNumID = new Uint8Array( buf.slice( 0x17, 0x2c ) );

		return ret;
	},

	0x273: function PACKET_CZ_REQ_MAIL_RETURN( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.MailID = lp.getInt32( 0x2, true );
		ret.ReceiveName = new Uint8Array( buf.slice( 0x6, 0x1e ) );

		return ret;
	},

	0x274: function PACKET_ZC_ACK_MAIL_RETURN( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.MailID = lp.getInt32( 0x2, true );
		ret.Result = lp.getInt16( 0x6, true );

		return ret;
	},

	0x275: function PACKET_CH_ENTER2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.AuthCode = lp.getInt32( 0x6, true );
		ret.userLevel = lp.getUint32( 0xa, true );
		ret.clientType = lp.getUint16( 0xe, true );
		ret.Sex = lp.getUint8( 0x10 );
		ret.macData = new Uint8Array( buf.slice( 0x11, 0x21 ) );
		ret.iAccountSID = lp.getInt32( 0x21, true );

		return ret;
	},

	0x276: function PACKET_AC_ACCEPT_LOGIN2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.AuthCode = lp.getInt32( 0x4, true );
		ret.AID = lp.getUint32( 0x8, true );
		ret.userLevel = lp.getUint32( 0xc, true );
		ret.lastLoginIP = lp.getUint32( 0x10, true );
		ret.lastLoginTime = new Uint8Array( buf.slice( 0x14, 0x2e ) );
		ret.Sex = lp.getUint8( 0x2e );
		ret.iAccountSID = lp.getInt32( 0x2f, true );

		return ret;
	},

	0x277: function PACKET_CA_LOGIN_PCBANG( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Version = lp.getUint32( 0x2, true );
		ret.ID = new Uint8Array( buf.slice( 0x6, 0x1e ) );
		ret.Passwd = new Uint8Array( buf.slice( 0x1e, 0x36 ) );
		ret.clienttype = lp.getUint8( 0x36 );
		ret.IP = new Uint8Array( buf.slice( 0x37, 0x47 ) );
		ret.MacAdress = new Uint8Array( buf.slice( 0x47, 0x54 ) );

		return ret;
	},

	0x278: function PACKET_ZC_NOTIFY_PCBANG( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x279: function PACKET_CZ_HUNTINGLIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x27a: function PACKET_ZC_HUNTINGLIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.HuntingList = [];

		// PACKET_MOB_HUNTING
		for( p = 0x4; p < buf.byteLength; p += 12 ) {

			var ret2 = {};

			ret2.questID = lp.getUint32( p + 0x0, true );
			ret2.mobGID = lp.getUint32( p + 0x4, true );
			ret2.maxCount = lp.getInt16( p + 0x8, true );
			ret2.count = lp.getInt16( p + 0xa, true );

			ret.HuntingList.push( ret2 );

		}

		return ret;
	},

	0x27b: function PACKET_ZC_PCBANG_EFFECT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.ExpFactor = lp.getInt32( 0x2, true );
		ret.ExpFactor2 = lp.getInt32( 0x6, true );
		ret.DropFactor = lp.getInt32( 0xa, true );

		return ret;
	},

	0x27c: function PACKET_CA_LOGIN4( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Version = lp.getUint32( 0x2, true );
		ret.ID = new Uint8Array( buf.slice( 0x6, 0x1e ) );
		ret.PasswdMD5 = new Uint8Array( buf.slice( 0x1e, 0x2e ) );
		ret.clienttype = lp.getUint8( 0x2e );
		ret.macData = new Uint8Array( buf.slice( 0x2f, 0x3c ) );

		return ret;
	},

	0x27d: function PACKET_ZC_PROPERTY_MERCE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.name = new Uint8Array( buf.slice( 0x2, 0x1a ) );
		ret.level = lp.getInt16( 0x1a, true );
		ret.faith = lp.getInt16( 0x1c, true );
		ret.summonCount = lp.getInt16( 0x1e, true );
		ret.atk = lp.getInt16( 0x20, true );
		ret.Matk = lp.getInt16( 0x22, true );
		ret.hit = lp.getInt16( 0x24, true );
		ret.critical = lp.getInt16( 0x26, true );
		ret.def = lp.getInt16( 0x28, true );
		ret.Mdef = lp.getInt16( 0x2a, true );
		ret.flee = lp.getInt16( 0x2c, true );
		ret.aspd = lp.getInt16( 0x2e, true );
		ret.hp = lp.getInt16( 0x30, true );
		ret.maxHP = lp.getInt16( 0x32, true );
		ret.sp = lp.getInt16( 0x34, true );
		ret.maxSP = lp.getInt16( 0x36, true );
		ret.ATKRange = lp.getInt16( 0x38, true );
		ret.exp = lp.getInt32( 0x3a, true );

		return ret;
	},

	0x27e: function PACKET_ZC_SHANDA_PROTECT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.CodeLen = lp.getInt16( 0x4, true );
		ret.Code = new Uint8Array( buf.slice( 0x6 ) );

		return ret;
	},

	0x27f: function PACKET_CA_CLIENT_TYPE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.ClientType = lp.getInt16( 0x2, true );
		ret.nVer = lp.getInt32( 0x4, true );

		return ret;
	},

	0x280: function PACKET_ZC_GANGSI_POINT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Point = lp.getInt32( 0x2, true );
		ret.TotalPoint = lp.getInt32( 0x6, true );
		ret.PacketSwitch = lp.getInt16( 0xa, true );

		return ret;
	},

	0x281: function PACKET_CZ_GANGSI_RANK( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketSwitch = lp.getInt16( 0x2, true );

		return ret;
	},

	0x282: function PACKET_ZC_GANGSI_RANK( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Name = new Uint8Array( buf.slice( 0x2, 0xc ) );
		ret.Point = new Int32Array( buf.slice( 0xf2, 0x11a ) );
		ret.PacketSwitch = lp.getInt16( 0x11a, true );

		return ret;
	},

	0x283: function PACKET_ZC_AID( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );

		return ret;
	},

	0x284: function PACKET_ZC_NOTIFY_EFFECT3( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.effectID = lp.getInt32( 0x6, true );
		ret.numdata = lp.getInt32( 0xa, true );

		return ret;
	},

	0x285: function PACKET_ZC_DEATH_QUESTION( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Qcategory = lp.getInt16( 0x2, true );
		ret.Qnum = lp.getInt16( 0x4, true );

		return ret;
	},

	0x286: function PACKET_CZ_DEATH_QUESTION( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Qanswer = lp.getInt16( 0x2, true );

		return ret;
	},

	0x287: function PACKET_ZC_PC_CASH_POINT_ITEMLIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.CashPoint = lp.getUint32( 0x4, true );
		
		ret.itemList = [];

		// PURCHASE_ITEM
		for( p = 0x8; p < buf.byteLength; p += 11 ) {

			var ret2 = {};

			ret2.price = lp.getInt32( p + 0x0, true );
			ret2.discountprice = lp.getInt32( p + 0x4, true );
			ret2.type = lp.getUint8( p + 0x8 );
			ret2.ITID = lp.getUint16( p + 0x9, true );

			ret.itemList.push( ret2 );

		}

		return ret;
	},

	0x288: function PACKET_CZ_PC_BUY_CASH_POINT_ITEM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.ITID = lp.getUint16( 0x2, true );
		ret.count = lp.getInt16( 0x4, true );

		return ret;
	},

	0x289: function PACKET_ZC_PC_CASH_POINT_UPDATE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.CashPoint = lp.getUint32( 0x2, true );
		ret.Error = lp.getInt16( 0x6, true );

		return ret;
	},

	0x28a: function PACKET_ZC_NPC_SHOWEFST_UPDATE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.effectState = lp.getInt32( 0x6, true );
		ret.clevel = lp.getInt32( 0xa, true );
		ret.showEFST = lp.getInt32( 0xe, true );

		return ret;
	},

	0x28c: function PACKET_CH_SELECT_CHAR_GOINGTOBEUSED( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.dwAID = lp.getUint32( 0x2, true );
		ret.nCountSelectedChar = lp.getInt32( 0x6, true );
		ret.ardwSelectedGID = new Uint32Array( buf.slice( 0xa, 0x2e ) );

		return ret;
	},

	0x28d: function PACKET_CH_REQ_IS_VALID_CHARNAME( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.dwAID = lp.getUint32( 0x2, true );
		ret.dwGID = lp.getUint32( 0x6, true );
		ret.szCharName = new Uint8Array( buf.slice( 0xa, 0x22 ) );

		return ret;
	},

	0x28e: function PACKET_HC_ACK_IS_VALID_CHARNAME( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.sResult = lp.getInt16( 0x2, true );

		return ret;
	},

	0x28f: function PACKET_CH_REQ_CHANGE_CHARNAME( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.dwGID = lp.getUint32( 0x2, true );

		return ret;
	},

	0x290: function PACKET_HC_ACK_CHANGE_CHARNAME( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.sResult = lp.getInt16( 0x2, true );

		return ret;
	},

	0x291: function PACKET_ZC_MSG( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.msg = lp.getUint16( 0x2, true );

		return ret;
	},

	0x292: function PACKET_CZ_STANDING_RESURRECTION( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x293: function PACKET_ZC_BOSS_INFO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.infoType = lp.getUint8( 0x2 );
		ret.xPos = lp.getInt32( 0x3, true );
		ret.yPos = lp.getInt32( 0x7, true );
		ret.minHour = lp.getUint16( 0xb, true );
		ret.minMinute = lp.getUint16( 0xd, true );
		ret.maxHour = lp.getUint16( 0xf, true );
		ret.maxMinute = lp.getUint16( 0x11, true );
		ret.name = new Uint8Array( buf.slice( 0x13, 0x46 ) );

		return ret;
	},

	0x294: function PACKET_ZC_READ_BOOK( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.bookID = lp.getUint32( 0x2, true );
		ret.page = lp.getUint32( 0x6, true );

		return ret;
	},

	0x295: function PACKET_ZC_EQUIPMENT_ITEMLIST2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.ItemInfo = [];

		// EQUIPMENTITEM_EXTRAINFO2
		for( p = 0x4; p < buf.byteLength; p += 24 ) {

			var ret2 = {};

			ret2.index = lp.getInt16( p + 0x0, true );
			ret2.ITID = lp.getUint16( p + 0x2, true );
			ret2.type = lp.getUint8( p + 0x4 );
			ret2.IsIdentified = lp.getUint8( p + 0x5 );
			ret2.location = lp.getUint16( p + 0x6, true );
			ret2.WearState = lp.getUint16( p + 0x8, true );
			ret2.IsDamaged = lp.getUint8( p + 0xa );
			ret2.RefiningLevel = lp.getUint8( p + 0xb );
			
			// EQUIPSLOTINFO
			ret2.slot = {
				card1: lp.getUint16( p + 0xc, true ),
				card2: lp.getUint16( p + 0xe, true ),
				card3: lp.getUint16( p + 0x10, true ),
				card4: lp.getUint16( p + 0x12, true ),
			};

			ret2.HireExpireDate = lp.getInt32( p + 0x14, true );

			ret.ItemInfo.push( ret2 );

		}

		return ret;
	},

	0x296: function PACKET_ZC_STORE_EQUIPMENT_ITEMLIST2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.ItemInfo = [];

		// EQUIPMENTITEM_EXTRAINFO2
		for( p = 0x4; p < buf.byteLength; p += 24 ) {

			var ret2 = {};

			ret2.index = lp.getInt16( p + 0x0, true );
			ret2.ITID = lp.getUint16( p + 0x2, true );
			ret2.type = lp.getUint8( p + 0x4 );
			ret2.IsIdentified = lp.getUint8( p + 0x5 );
			ret2.location = lp.getUint16( p + 0x6, true );
			ret2.WearState = lp.getUint16( p + 0x8, true );
			ret2.IsDamaged = lp.getUint8( p + 0xa );
			ret2.RefiningLevel = lp.getUint8( p + 0xb );
			
			// EQUIPSLOTINFO
			ret2.slot = {
				card1: lp.getUint16( p + 0xc, true ),
				card2: lp.getUint16( p + 0xe, true ),
				card3: lp.getUint16( p + 0x10, true ),
				card4: lp.getUint16( p + 0x12, true ),
			};

			ret2.HireExpireDate = lp.getInt32( p + 0x14, true );

			ret.ItemInfo.push( ret2 );

		}

		return ret;
	},

	0x297: function PACKET_ZC_CART_EQUIPMENT_ITEMLIST2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.ItemInfo = [];

		// EQUIPMENTITEM_EXTRAINFO2
		for( p = 0x4; p < buf.byteLength; p += 24 ) {

			var ret2 = {};

			ret2.index = lp.getInt16( p + 0x0, true );
			ret2.ITID = lp.getUint16( p + 0x2, true );
			ret2.type = lp.getUint8( p + 0x4 );
			ret2.IsIdentified = lp.getUint8( p + 0x5 );
			ret2.location = lp.getUint16( p + 0x6, true );
			ret2.WearState = lp.getUint16( p + 0x8, true );
			ret2.IsDamaged = lp.getUint8( p + 0xa );
			ret2.RefiningLevel = lp.getUint8( p + 0xb );
			
			// EQUIPSLOTINFO
			ret2.slot = {
				card1: lp.getUint16( p + 0xc, true ),
				card2: lp.getUint16( p + 0xe, true ),
				card3: lp.getUint16( p + 0x10, true ),
				card4: lp.getUint16( p + 0x12, true ),
			};

			ret2.HireExpireDate = lp.getInt32( p + 0x14, true );

			ret.ItemInfo.push( ret2 );

		}

		return ret;
	},

	0x298: function PACKET_ZC_CASH_TIME_COUNTER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.ITID = lp.getUint16( 0x2, true );
		ret.RemainSecond = lp.getUint32( 0x4, true );

		return ret;
	},

	0x299: function PACKET_ZC_CASH_ITEM_DELETE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getInt16( 0x2, true );
		ret.ITID = lp.getUint16( 0x4, true );

		return ret;
	},

	0x29a: function PACKET_ZC_ITEM_PICKUP_ACK2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Index = lp.getUint16( 0x2, true );
		ret.count = lp.getUint16( 0x4, true );
		ret.ITID = lp.getUint16( 0x6, true );
		ret.IsIdentified = lp.getUint8( 0x8 );
		ret.IsDamaged = lp.getUint8( 0x9 );
		ret.refiningLevel = lp.getUint8( 0xa );
		
		// EQUIPSLOTINFO
		ret.slot = {
			card1: lp.getUint16( p + 0xb, true ),
			card2: lp.getUint16( p + 0xd, true ),
			card3: lp.getUint16( p + 0xf, true ),
			card4: lp.getUint16( p + 0x11, true ),
		};

		ret.location = lp.getUint16( 0x13, true );
		ret.type = lp.getUint8( 0x15 );
		ret.result = lp.getUint8( 0x16 );
		ret.HireExpireDate = lp.getInt32( 0x17, true );

		return ret;
	},

	0x29b: function PACKET_ZC_MER_INIT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getInt32( 0x2, true );
		ret.atk = lp.getInt16( 0x6, true );
		ret.Matk = lp.getInt16( 0x8, true );
		ret.hit = lp.getInt16( 0xa, true );
		ret.critical = lp.getInt16( 0xc, true );
		ret.def = lp.getInt16( 0xe, true );
		ret.Mdef = lp.getInt16( 0x10, true );
		ret.flee = lp.getInt16( 0x12, true );
		ret.aspd = lp.getInt16( 0x14, true );
		ret.name = new Uint8Array( buf.slice( 0x16, 0x2e ) );
		ret.level = lp.getInt16( 0x2e, true );
		ret.hp = lp.getInt32( 0x30, true );
		ret.maxHP = lp.getInt32( 0x34, true );
		ret.sp = lp.getInt32( 0x38, true );
		ret.maxSP = lp.getInt32( 0x3c, true );
		ret.ExpireDate = lp.getInt32( 0x40, true );
		ret.faith = lp.getInt16( 0x44, true );
		ret.toal_call_num = lp.getInt32( 0x46, true );
		ret.approval_monster_kill_counter = lp.getInt32( 0x4a, true );
		ret.ATKRange = lp.getInt16( 0x4e, true );

		return ret;
	},

	0x29c: function PACKET_ZC_MER_PROPERTY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.atk = lp.getInt16( 0x2, true );
		ret.Matk = lp.getInt16( 0x4, true );
		ret.hit = lp.getInt16( 0x6, true );
		ret.critical = lp.getInt16( 0x8, true );
		ret.def = lp.getInt16( 0xa, true );
		ret.Mdef = lp.getInt16( 0xc, true );
		ret.flee = lp.getInt16( 0xe, true );
		ret.aspd = lp.getInt16( 0x10, true );
		ret.name = new Uint8Array( buf.slice( 0x12, 0x2a ) );
		ret.level = lp.getInt16( 0x2a, true );
		ret.hp = lp.getInt16( 0x2c, true );
		ret.maxHP = lp.getInt16( 0x2e, true );
		ret.sp = lp.getInt16( 0x30, true );
		ret.maxSP = lp.getInt16( 0x32, true );
		ret.ExpireDate = lp.getInt32( 0x34, true );
		ret.faith = lp.getInt16( 0x38, true );
		ret.toal_call_num = lp.getInt32( 0x3a, true );
		ret.approval_monster_kill_counter = lp.getInt32( 0x3e, true );

		return ret;
	},

	0x29d: function PACKET_ZC_MER_SKILLINFO_LIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.skillList = [];

		// SKILLINFO
		for( p = 0x4; p < buf.byteLength; p += 37 ) {

			var ret2 = {};

			ret2.SKID = lp.getInt16( p + 0x0, true );
			ret2.type = lp.getInt32( p + 0x2, true );
			ret2.level = lp.getInt16( p + 0x6, true );
			ret2.spcost = lp.getInt16( p + 0x8, true );
			ret2.attackRange = lp.getInt16( p + 0xa, true );
			ret2.skillName = new Uint8Array( buf.slice( p + 0xc, p + 0x24 ) );
			ret2.upgradable = lp.getUint8( p + 0x24 );

			ret.skillList.push( ret2 );

		}

		return ret;
	},

	0x29e: function PACKET_ZC_MER_SKILLINFO_UPDATE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.SKID = lp.getUint16( 0x2, true );
		ret.level = lp.getInt16( 0x4, true );
		ret.spcost = lp.getInt16( 0x6, true );
		ret.attackRange = lp.getInt16( 0x8, true );
		ret.upgradable = lp.getUint8( 0xa );

		return ret;
	},

	0x29f: function PACKET_CZ_MER_COMMAND( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.command = lp.getUint8( 0x2 );

		return ret;
	},

	0x2a0: function UNUSED_PACKET_CZ_MER_USE_SKILL( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.selectedLevel = lp.getInt16( 0x2, true );
		ret.SKID = lp.getUint16( 0x4, true );
		ret.targetID = lp.getUint32( 0x6, true );

		return ret;
	},

	0x2a1: function UNUSED_PACKET_CZ_MER_UPGRADE_SKILLLEVEL( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.SKID = lp.getUint16( 0x2, true );

		return ret;
	},

	0x2a2: function PACKET_ZC_MER_PAR_CHANGE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.var = lp.getUint16( 0x2, true );
		ret.value = lp.getInt32( 0x4, true );

		return ret;
	},

	0x2a3: function PACKET_ZC_GAMEGUARD_LINGO_KEY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.packetType = lp.getInt16( 0x0, true );
		
		// PGG_LINGO_KEY_TEMP
		ret.lingoKey = {
			dwAlgNum: lp.getUint32( p + 0x2, true ),
			dwAlgKey1: lp.getUint32( p + 0x6, true ),
			dwAlgKey2: lp.getUint32( p + 0xa, true ),
			dwSeed: lp.getUint32( p + 0xe, true ),
		};


		return ret;
	},

	0x2a5: function PACKET_CZ_KSY_EVENT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getInt16( 0x2, true );
		ret.count = lp.getInt32( 0x4, true );

		return ret;
	},

	0x2aa: function PACKET_ZC_REQ_CASH_PASSWORD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Info = lp.getInt16( 0x2, true );

		return ret;
	},

	0x2ab: function PACKET_CZ_ACK_CASH_PASSWORD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Type = lp.getInt16( 0x2, true );
		ret.Password = new Uint8Array( buf.slice( 0x4, 0x14 ) );
		ret.NewPassword = new Uint8Array( buf.slice( 0x14, 0x24 ) );

		return ret;
	},

	0x2ac: function PACKET_ZC_RESULT_CASH_PASSWORD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Result = lp.getInt16( 0x2, true );
		ret.ErrorCount = lp.getInt16( 0x4, true );

		return ret;
	},

	0x2ad: function PACKET_AC_REQUEST_SECOND_PASSWORD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Result = lp.getInt16( 0x2, true );
		ret.dwSeed = lp.getUint32( 0x4, true );

		return ret;
	},

	0x2b0: function PACKET_CA_LOGIN_HAN( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Version = lp.getUint32( 0x2, true );
		ret.ID = new Uint8Array( buf.slice( 0x6, 0x1e ) );
		ret.Passwd = new Uint8Array( buf.slice( 0x1e, 0x36 ) );
		ret.clienttype = lp.getUint8( 0x36 );
		ret.m_szIP = new Uint8Array( buf.slice( 0x37, 0x47 ) );
		ret.m_szMacAddr = new Uint8Array( buf.slice( 0x47, 0x54 ) );
		ret.isHanGameUser = lp.getUint8( 0x54 );

		return ret;
	},

	0x2b1: function PACKET_ZC_ALL_QUEST_LIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.questCount = lp.getInt32( 0x4, true );
		
		ret.QuestList = [];

		// PACKET_ZC_QUEST_INFO
		for( p = 0x8; p < buf.byteLength; p += 5 ) {

			var ret2 = {};

			ret2.questID = lp.getUint32( p + 0x0, true );
			ret2.active = lp.getUint8( p + 0x4 );

			ret.QuestList.push( ret2 );

		}

		return ret;
	},

	0x2b2: function PACKET_ZC_ALL_QUEST_MISSION( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.count = lp.getInt32( 0x4, true );
		
		ret.QuestMissionList = [];

		// PACKET_ZC_QUEST_MISSION_INFO
		for( p = 0x8; p < buf.byteLength; p += 104 ) {

			var ret2 = {};

			ret2.questID = lp.getUint32( p + 0x0, true );
			ret2.quest_svrTime = lp.getInt32( p + 0x4, true );
			ret2.quest_endTime = lp.getInt32( p + 0x8, true );
			ret2.count = lp.getInt16( p + 0xc, true );
			
			// PACKET_ZC_MISSION_HUNT
			ret2.hunt = [];
			
			for( var i = 0; i < 3; i++, p += 30 ) {
			
				ret3 = {
					mobGID: lp.getUint32( p + 0xe, true ),
					huntCount: lp.getInt16( p + 0x12, true ),
					mobName: new Uint8Array( buf.slice( p + 0x14, p + 0x2c ) ),
				};
				
				ret2.hunt.push( ret3 );
				
			}

			ret.QuestMissionList.push( ret2 );

		}

		return ret;
	},

	0x2b3: function PACKET_ZC_ADD_QUEST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.questID = lp.getUint32( 0x2, true );
		ret.active = lp.getUint8( 0x6 );
		ret.quest_svrTime = lp.getInt32( 0x7, true );
		ret.quest_endTime = lp.getInt32( 0xb, true );
		ret.count = lp.getInt16( 0xf, true );
		
		// PACKET_ZC_MISSION_HUNT
		ret.hunt = [];
		
		for( var i = 0; i < 3; i++, p += 30 ) {
		
			ret2 = {
				mobGID: lp.getUint32( p + 0xe, true ),
				huntCount: lp.getInt16( p + 0x12, true ),
				mobName: new Uint8Array( buf.slice( p + 0x14, p + 0x2c ) ),
			};
			
			ret.hunt.push( ret2 );
			
		}

		return ret;
	},

	0x2b4: function PACKET_ZC_DEL_QUEST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.questID = lp.getUint32( 0x2, true );

		return ret;
	},

	0x2b5: function PACKET_ZC_UPDATE_MISSION_HUNT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.count = lp.getInt16( 0x4, true );
		
		ret.MobHuntList = [];

		// PACKET_MOB_HUNTING
		for( p = 0x6; p < buf.byteLength; p += 12 ) {

			var ret2 = {};

			ret2.questID = lp.getUint32( p + 0x0, true );
			ret2.mobGID = lp.getUint32( p + 0x4, true );
			ret2.maxCount = lp.getInt16( p + 0x8, true );
			ret2.count = lp.getInt16( p + 0xa, true );

			ret.MobHuntList.push( ret2 );

		}

		return ret;
	},

	0x2b6: function PACKET_CZ_ACTIVE_QUEST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.questID = lp.getUint32( 0x2, true );
		ret.active = lp.getUint8( 0x6 );

		return ret;
	},

	0x2b7: function PACKET_ZC_ACTIVE_QUEST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.questID = lp.getUint32( 0x2, true );
		ret.active = lp.getUint8( 0x6 );

		return ret;
	},

	0x2b8: function PACKET_ZC_ITEM_PICKUP_PARTY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.accountID = lp.getUint32( 0x2, true );
		ret.ITID = lp.getUint16( 0x6, true );
		ret.IsIdentified = lp.getUint8( 0x8 );
		ret.IsDamaged = lp.getUint8( 0x9 );
		ret.refiningLevel = lp.getUint8( 0xa );
		
		// EQUIPSLOTINFO
		ret.slot = {
			card1: lp.getUint16( p + 0xb, true ),
			card2: lp.getUint16( p + 0xd, true ),
			card3: lp.getUint16( p + 0xf, true ),
			card4: lp.getUint16( p + 0x11, true ),
		};

		ret.location = lp.getUint16( 0x13, true );
		ret.type = lp.getUint8( 0x15 );

		return ret;
	},

	0x2b9: function PACKET_ZC_SHORTCUT_KEY_LIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		
		// ShortCutKey
		ret.ShortCutKey = {
			isSkill: lp.getUint8( p + 0x2 ),
			ID: lp.getUint32( p + 0x3, true ),
			count: lp.getInt16( p + 0x7, true ),
		};


		return ret;
	},

	0x2ba: function PACKET_CZ_SHORTCUT_KEY_CHANGE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Index = lp.getUint16( 0x2, true );
		
		// ShortCutKey
		ret.ShortCutKey = {
			isSkill: lp.getUint8( p + 0x4 ),
			ID: lp.getUint32( p + 0x5, true ),
			count: lp.getInt16( p + 0x9, true ),
		};


		return ret;
	},

	0x2bb: function PACKET_ZC_EQUIPITEM_DAMAGED( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.wearLocation = lp.getUint16( 0x2, true );
		ret.accountID = lp.getUint32( 0x4, true );

		return ret;
	},

	0x2bc: function PACKET_ZC_NOTIFY_PCBANG_PLAYING_TIME( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.TimeMinute = lp.getInt32( 0x2, true );

		return ret;
	},

	0x2bf: function PACKET_ZC_SRPACKETR2_INIT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.ProtectFactor = lp.getUint16( 0x2, true );
		ret.DeformSeedFactor = lp.getUint32( 0x4, true );
		ret.DeformAddFactor = lp.getUint32( 0x8, true );

		return ret;
	},

	0x2c0: function PACKET_CZ_SRPACKETR2_START( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.ProtectFactor = lp.getUint16( 0x2, true );

		return ret;
	},

	0x2c1: function PACKET_ZC_NPC_CHAT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.accountID = lp.getUint32( 0x4, true );
		ret.color = lp.getUint32( 0x8, true );
		ret.msg = new Uint8Array( buf.slice( 0xc ) );

		return ret;
	},

	0x2c2: function PACKET_ZC_FORMATSTRING_MSG( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.msg = lp.getUint16( 0x4, true );
		ret.value = new Uint8Array( buf.slice( 0x6 ) );

		return ret;
	},

	0x2c4: function PACKET_CZ_PARTY_JOIN_REQ( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.characterName = new Uint8Array( buf.slice( 0x2, 0x1a ) );

		return ret;
	},

	0x2c5: function PACKET_ZC_PARTY_JOIN_REQ_ACK( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.characterName = new Uint8Array( buf.slice( 0x2, 0x1a ) );
		ret.answer = lp.getInt32( 0x1a, true );

		return ret;
	},

	0x2c6: function PACKET_ZC_PARTY_JOIN_REQ( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GRID = lp.getUint32( 0x2, true );
		ret.groupName = new Uint8Array( buf.slice( 0x6, 0x1e ) );

		return ret;
	},

	0x2c7: function PACKET_CZ_PARTY_JOIN_REQ_ACK( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GRID = lp.getUint32( 0x2, true );
		ret.bAccept = lp.getUint8( 0x6 );

		return ret;
	},

	0x2c8: function PACKET_CZ_PARTY_CONFIG( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.bRefuseJoinMsg = lp.getUint8( 0x2 );

		return ret;
	},

	0x2c9: function PACKET_ZC_PARTY_CONFIG( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.bRefuseJoinMsg = lp.getUint8( 0x2 );

		return ret;
	},

	0x2ca: function PACKET_HC_REFUSE_SELECTCHAR( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.ErrorCode = lp.getUint8( 0x2 );

		return ret;
	},

	0x2cb: function PACKET_ZC_MEMORIALDUNGEON_SUBSCRIPTION_INFO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.MemorialDungeonName = new Uint8Array( buf.slice( 0x2, 0x3f ) );
		ret.PriorityOrderNum = lp.getInt16( 0x3f, true );

		return ret;
	},

	0x2cc: function PACKET_ZC_MEMORIALDUNGEON_SUBSCRIPTION_NOTIFY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PriorityOrderNum = lp.getInt16( 0x2, true );

		return ret;
	},

	0x2cd: function PACKET_ZC_MEMORIALDUNGEON_INFO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.MemorialDungeonName = new Uint8Array( buf.slice( 0x2, 0x3f ) );
		ret.DestroyDate = lp.getUint32( 0x3f, true );
		ret.EnterTimeOutDate = lp.getUint32( 0x43, true );

		return ret;
	},

	0x2ce: function PACKET_ZC_MEMORIALDUNGEON_NOTIFY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Type = lp.getInt32( 0x2, true );
		ret.EnterLimitDate = lp.getUint32( 0x6, true );

		return ret;
	},

	0x2cf: function PACKET_CZ_MEMORIALDUNGEON_COMMAND( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Command = lp.getInt32( 0x2, true );

		return ret;
	},

	0x2d0: function PACKET_ZC_EQUIPMENT_ITEMLIST3( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.ItemInfo = [];

		// EQUIPMENTITEM_EXTRAINFO301
		for( p = 0x4; p < buf.byteLength; p += 28 ) {

			var ret2 = {};

			ret2.index = lp.getInt16( p + 0x0, true );
			ret2.ITID = lp.getUint16( p + 0x2, true );
			ret2.type = lp.getUint8( p + 0x4 );
			ret2.IsIdentified = lp.getUint8( p + 0x5 );
			ret2.location = lp.getUint16( p + 0x6, true );
			ret2.WearState = lp.getUint16( p + 0x8, true );
			ret2.IsDamaged = lp.getUint8( p + 0xa );
			ret2.RefiningLevel = lp.getUint8( p + 0xb );
			
			// EQUIPSLOTINFO
			ret2.slot = {
				card1: lp.getUint16( p + 0xc, true ),
				card2: lp.getUint16( p + 0xe, true ),
				card3: lp.getUint16( p + 0x10, true ),
				card4: lp.getUint16( p + 0x12, true ),
			};

			ret2.HireExpireDate = lp.getInt32( p + 0x14, true );
			ret2.bindOnEquipType = lp.getUint16( p + 0x18, true );
			ret2.wItemSpriteNumber = lp.getUint16( p + 0x1a, true );

			ret.ItemInfo.push( ret2 );

		}

		return ret;
	},

	0x2d1: function PACKET_ZC_STORE_EQUIPMENT_ITEMLIST3( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.ItemInfo = [];

		// EQUIPMENTITEM_EXTRAINFO301
		for( p = 0x4; p < buf.byteLength; p += 28 ) {

			var ret2 = {};

			ret2.index = lp.getInt16( p + 0x0, true );
			ret2.ITID = lp.getUint16( p + 0x2, true );
			ret2.type = lp.getUint8( p + 0x4 );
			ret2.IsIdentified = lp.getUint8( p + 0x5 );
			ret2.location = lp.getUint16( p + 0x6, true );
			ret2.WearState = lp.getUint16( p + 0x8, true );
			ret2.IsDamaged = lp.getUint8( p + 0xa );
			ret2.RefiningLevel = lp.getUint8( p + 0xb );
			
			// EQUIPSLOTINFO
			ret2.slot = {
				card1: lp.getUint16( p + 0xc, true ),
				card2: lp.getUint16( p + 0xe, true ),
				card3: lp.getUint16( p + 0x10, true ),
				card4: lp.getUint16( p + 0x12, true ),
			};

			ret2.HireExpireDate = lp.getInt32( p + 0x14, true );
			ret2.bindOnEquipType = lp.getUint16( p + 0x18, true );
			ret2.wItemSpriteNumber = lp.getUint16( p + 0x1a, true );

			ret.ItemInfo.push( ret2 );

		}

		return ret;
	},

	0x2d2: function PACKET_ZC_CART_EQUIPMENT_ITEMLIST3( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.ItemInfo = [];

		// EQUIPMENTITEM_EXTRAINFO301
		for( p = 0x4; p < buf.byteLength; p += 28 ) {

			var ret2 = {};

			ret2.index = lp.getInt16( p + 0x0, true );
			ret2.ITID = lp.getUint16( p + 0x2, true );
			ret2.type = lp.getUint8( p + 0x4 );
			ret2.IsIdentified = lp.getUint8( p + 0x5 );
			ret2.location = lp.getUint16( p + 0x6, true );
			ret2.WearState = lp.getUint16( p + 0x8, true );
			ret2.IsDamaged = lp.getUint8( p + 0xa );
			ret2.RefiningLevel = lp.getUint8( p + 0xb );
			
			// EQUIPSLOTINFO
			ret2.slot = {
				card1: lp.getUint16( p + 0xc, true ),
				card2: lp.getUint16( p + 0xe, true ),
				card3: lp.getUint16( p + 0x10, true ),
				card4: lp.getUint16( p + 0x12, true ),
			};

			ret2.HireExpireDate = lp.getInt32( p + 0x14, true );
			ret2.bindOnEquipType = lp.getUint16( p + 0x18, true );
			ret2.wItemSpriteNumber = lp.getUint16( p + 0x1a, true );

			ret.ItemInfo.push( ret2 );

		}

		return ret;
	},

	0x2d3: function PACKET_ZC_NOTIFY_BIND_ON_EQUIP( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getUint16( 0x2, true );

		return ret;
	},

	0x2d4: function PACKET_ZC_ITEM_PICKUP_ACK3( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Index = lp.getUint16( 0x2, true );
		ret.count = lp.getUint16( 0x4, true );
		ret.ITID = lp.getUint16( 0x6, true );
		ret.IsIdentified = lp.getUint8( 0x8 );
		ret.IsDamaged = lp.getUint8( 0x9 );
		ret.refiningLevel = lp.getUint8( 0xa );
		
		// EQUIPSLOTINFO
		ret.slot = {
			card1: lp.getUint16( p + 0xb, true ),
			card2: lp.getUint16( p + 0xd, true ),
			card3: lp.getUint16( p + 0xf, true ),
			card4: lp.getUint16( p + 0x11, true ),
		};

		ret.location = lp.getUint16( 0x13, true );
		ret.type = lp.getUint8( 0x15 );
		ret.result = lp.getUint8( 0x16 );
		ret.HireExpireDate = lp.getInt32( 0x17, true );
		ret.bindOnEquipType = lp.getUint16( 0x1b, true );

		return ret;
	},

	0x2d5: function PACKET_ZC_ISVR_DISCONNECT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x2d6: function PACKET_CZ_EQUIPWIN_MICROSCOPE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );

		return ret;
	},

	0x2d7: function PACKET_ZC_EQUIPWIN_MICROSCOPE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.characterName = new Uint8Array( buf.slice( 0x4, 0x1c ) );
		ret.job = lp.getInt16( 0x1c, true );
		ret.head = lp.getInt16( 0x1e, true );
		ret.accessory = lp.getInt16( 0x20, true );
		ret.accessory2 = lp.getInt16( 0x22, true );
		ret.accessory3 = lp.getInt16( 0x24, true );
		ret.headpalette = lp.getInt16( 0x26, true );
		ret.bodypalette = lp.getInt16( 0x28, true );
		ret.sex = lp.getUint8( 0x2a );
		
		ret.ItemInfo = [];

		// EQUIPMENTITEM_EXTRAINFO301
		for( p = 0x2b; p < buf.byteLength; p += 28 ) {

			var ret2 = {};

			ret2.index = lp.getInt16( p + 0x0, true );
			ret2.ITID = lp.getUint16( p + 0x2, true );
			ret2.type = lp.getUint8( p + 0x4 );
			ret2.IsIdentified = lp.getUint8( p + 0x5 );
			ret2.location = lp.getUint16( p + 0x6, true );
			ret2.WearState = lp.getUint16( p + 0x8, true );
			ret2.IsDamaged = lp.getUint8( p + 0xa );
			ret2.RefiningLevel = lp.getUint8( p + 0xb );
			
			// EQUIPSLOTINFO
			ret2.slot = {
				card1: lp.getUint16( p + 0xc, true ),
				card2: lp.getUint16( p + 0xe, true ),
				card3: lp.getUint16( p + 0x10, true ),
				card4: lp.getUint16( p + 0x12, true ),
			};

			ret2.HireExpireDate = lp.getInt32( p + 0x14, true );
			ret2.bindOnEquipType = lp.getUint16( p + 0x18, true );
			ret2.wItemSpriteNumber = lp.getUint16( p + 0x1a, true );

			ret.ItemInfo.push( ret2 );

		}

		return ret;
	},

	0x2d8: function PACKET_CZ_CONFIG( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Config = lp.getInt32( 0x2, true );
		ret.Value = lp.getInt32( 0x6, true );

		return ret;
	},

	0x2d9: function PACKET_ZC_CONFIG( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Config = lp.getInt32( 0x2, true );
		ret.Value = lp.getInt32( 0x6, true );

		return ret;
	},

	0x2da: function PACKET_ZC_CONFIG_NOTIFY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.bOpenEquipmentWin = lp.getUint8( 0x2 );

		return ret;
	},

	0x2db: function PACKET_CZ_BATTLEFIELD_CHAT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.msg = new Uint8Array( buf.slice( 0x4 ) );

		return ret;
	},

	0x2dc: function PACKET_ZC_BATTLEFIELD_CHAT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.accountID = lp.getUint32( 0x4, true );
		ret.name = new Uint8Array( buf.slice( 0x8, 0x20 ) );
		ret.msg = new Uint8Array( buf.slice( 0x20 ) );

		return ret;
	},

	0x2dd: function PACKET_ZC_BATTLEFIELD_NOTIFY_CAMPINFO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.accountID = lp.getUint32( 0x2, true );
		ret.name = new Uint8Array( buf.slice( 0x6, 0x1e ) );
		ret.camp = lp.getInt16( 0x1e, true );

		return ret;
	},

	0x2de: function PACKET_ZC_BATTLEFIELD_NOTIFY_POINT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.pointCampA = lp.getInt16( 0x2, true );
		ret.pointCampB = lp.getInt16( 0x4, true );

		return ret;
	},

	0x2df: function PACKET_ZC_BATTLEFIELD_NOTIFY_POSITION( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.accountID = lp.getUint32( 0x2, true );
		ret.name = new Uint8Array( buf.slice( 0x6, 0x1e ) );
		ret.job = lp.getUint16( 0x1e, true );
		ret.x = lp.getInt16( 0x20, true );
		ret.y = lp.getInt16( 0x22, true );

		return ret;
	},

	0x2e0: function PACKET_ZC_BATTLEFIELD_NOTIFY_HP( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.accountID = lp.getUint32( 0x2, true );
		ret.name = new Uint8Array( buf.slice( 0x6, 0x1e ) );
		ret.hp = lp.getInt16( 0x1e, true );
		ret.maxHp = lp.getInt16( 0x20, true );

		return ret;
	},

	0x2e1: function PACKET_ZC_NOTIFY_ACT2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );
		ret.targetGID = lp.getUint32( 0x6, true );
		ret.startTime = lp.getUint32( 0xa, true );
		ret.attackMT = lp.getInt32( 0xe, true );
		ret.attackedMT = lp.getInt32( 0x12, true );
		ret.damage = lp.getInt32( 0x16, true );
		ret.count = lp.getInt16( 0x1a, true );
		ret.action = lp.getUint8( 0x1c );
		ret.leftDamage = lp.getInt32( 0x1d, true );

		return ret;
	},

	0x2e6: function PACKET_CZ_BOT_CHECK( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.IsBot = lp.getInt32( 0x2, true );

		return ret;
	},

	0x2e7: function PACKET_ZC_MAPPROPERTY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.type = lp.getInt16( 0x4, true );
		ret.mapInfoTable = new Int32Array( buf.slice( 0x6 ) );

		return ret;
	},

	0x2e8: function PACKET_ZC_NORMAL_ITEMLIST3( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.ItemInfo = [];

		// NORMALITEM_EXTRAINFO3
		for( p = 0x4; p < buf.byteLength; p += 22 ) {

			var ret2 = {};

			ret2.index = lp.getInt16( p + 0x0, true );
			ret2.ITID = lp.getUint16( p + 0x2, true );
			ret2.type = lp.getUint8( p + 0x4 );
			ret2.IsIdentified = lp.getUint8( p + 0x5 );
			ret2.count = lp.getInt16( p + 0x6, true );
			ret2.WearState = lp.getUint16( p + 0x8, true );
			
			// EQUIPSLOTINFO
			ret2.slot = {
				card1: lp.getUint16( p + 0xa, true ),
				card2: lp.getUint16( p + 0xc, true ),
				card3: lp.getUint16( p + 0xe, true ),
				card4: lp.getUint16( p + 0x10, true ),
			};

			ret2.HireExpireDate = lp.getInt32( p + 0x12, true );

			ret.ItemInfo.push( ret2 );

		}

		return ret;
	},

	0x2e9: function PACKET_ZC_CART_NORMAL_ITEMLIST3( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.ItemInfo = [];

		// NORMALITEM_EXTRAINFO3
		for( p = 0x4; p < buf.byteLength; p += 22 ) {

			var ret2 = {};

			ret2.index = lp.getInt16( p + 0x0, true );
			ret2.ITID = lp.getUint16( p + 0x2, true );
			ret2.type = lp.getUint8( p + 0x4 );
			ret2.IsIdentified = lp.getUint8( p + 0x5 );
			ret2.count = lp.getInt16( p + 0x6, true );
			ret2.WearState = lp.getUint16( p + 0x8, true );
			
			// EQUIPSLOTINFO
			ret2.slot = {
				card1: lp.getUint16( p + 0xa, true ),
				card2: lp.getUint16( p + 0xc, true ),
				card3: lp.getUint16( p + 0xe, true ),
				card4: lp.getUint16( p + 0x10, true ),
			};

			ret2.HireExpireDate = lp.getInt32( p + 0x12, true );

			ret.ItemInfo.push( ret2 );

		}

		return ret;
	},

	0x2ea: function PACKET_ZC_STORE_NORMAL_ITEMLIST3( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.ItemInfo = [];

		// NORMALITEM_EXTRAINFO3
		for( p = 0x4; p < buf.byteLength; p += 22 ) {

			var ret2 = {};

			ret2.index = lp.getInt16( p + 0x0, true );
			ret2.ITID = lp.getUint16( p + 0x2, true );
			ret2.type = lp.getUint8( p + 0x4 );
			ret2.IsIdentified = lp.getUint8( p + 0x5 );
			ret2.count = lp.getInt16( p + 0x6, true );
			ret2.WearState = lp.getUint16( p + 0x8, true );
			
			// EQUIPSLOTINFO
			ret2.slot = {
				card1: lp.getUint16( p + 0xa, true ),
				card2: lp.getUint16( p + 0xc, true ),
				card3: lp.getUint16( p + 0xe, true ),
				card4: lp.getUint16( p + 0x10, true ),
			};

			ret2.HireExpireDate = lp.getInt32( p + 0x12, true );

			ret.ItemInfo.push( ret2 );

		}

		return ret;
	},

	0x2eb: function PACKET_ZC_ACCEPT_ENTER2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.startTime = lp.getUint32( 0x2, true );
		ret.PosDir = new Uint8Array( buf.slice( 0x6, 0x9 ) );
		ret.xSize = lp.getUint8( 0x9 );
		ret.ySize = lp.getUint8( 0xa );
		ret.font = lp.getInt16( 0xb, true );

		return ret;
	},

	0x2ec: function PACKET_ZC_NOTIFY_MOVEENTRY4( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.objecttype = lp.getUint8( 0x2 );
		ret.GID = lp.getUint32( 0x3, true );
		ret.speed = lp.getInt16( 0x7, true );
		ret.bodyState = lp.getInt16( 0x9, true );
		ret.healthState = lp.getInt16( 0xb, true );
		ret.effectState = lp.getInt32( 0xd, true );
		ret.job = lp.getInt16( 0x11, true );
		ret.head = lp.getInt16( 0x13, true );
		ret.weapon = lp.getInt32( 0x15, true );
		ret.accessory = lp.getInt16( 0x19, true );
		ret.moveStartTime = lp.getUint32( 0x1b, true );
		ret.accessory2 = lp.getInt16( 0x1f, true );
		ret.accessory3 = lp.getInt16( 0x21, true );
		ret.headpalette = lp.getInt16( 0x23, true );
		ret.bodypalette = lp.getInt16( 0x25, true );
		ret.headDir = lp.getInt16( 0x27, true );
		ret.GUID = lp.getUint32( 0x29, true );
		ret.GEmblemVer = lp.getInt16( 0x2d, true );
		ret.honor = lp.getInt16( 0x2f, true );
		ret.virtue = lp.getInt32( 0x31, true );
		ret.isPKModeON = lp.getUint8( 0x35 );
		ret.sex = lp.getUint8( 0x36 );
		ret.MoveData = new Uint8Array( buf.slice( 0x37, 0x3d ) );
		ret.xSize = lp.getUint8( 0x3d );
		ret.ySize = lp.getUint8( 0x3e );
		ret.clevel = lp.getInt16( 0x3f, true );
		ret.font = lp.getInt16( 0x41, true );

		return ret;
	},

	0x2ed: function PACKET_ZC_NOTIFY_NEWENTRY4( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );
		ret.speed = lp.getInt16( 0x6, true );
		ret.bodyState = lp.getInt16( 0x8, true );
		ret.healthState = lp.getInt16( 0xa, true );
		ret.effectState = lp.getInt32( 0xc, true );
		ret.job = lp.getInt16( 0x10, true );
		ret.head = lp.getInt16( 0x12, true );
		ret.weapon = lp.getInt32( 0x14, true );
		ret.accessory = lp.getInt16( 0x18, true );
		ret.accessory2 = lp.getInt16( 0x1a, true );
		ret.accessory3 = lp.getInt16( 0x1c, true );
		ret.headpalette = lp.getInt16( 0x1e, true );
		ret.bodypalette = lp.getInt16( 0x20, true );
		ret.headDir = lp.getInt16( 0x22, true );
		ret.GUID = lp.getUint32( 0x24, true );
		ret.GEmblemVer = lp.getInt16( 0x28, true );
		ret.honor = lp.getInt16( 0x2a, true );
		ret.virtue = lp.getInt32( 0x2c, true );
		ret.isPKModeON = lp.getUint8( 0x30 );
		ret.sex = lp.getUint8( 0x31 );
		ret.PosDir = new Uint8Array( buf.slice( 0x32, 0x35 ) );
		ret.xSize = lp.getUint8( 0x35 );
		ret.ySize = lp.getUint8( 0x36 );
		ret.clevel = lp.getInt16( 0x37, true );
		ret.font = lp.getInt16( 0x39, true );

		return ret;
	},

	0x2ee: function PACKET_ZC_NOTIFY_STANDENTRY4( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );
		ret.speed = lp.getInt16( 0x6, true );
		ret.bodyState = lp.getInt16( 0x8, true );
		ret.healthState = lp.getInt16( 0xa, true );
		ret.effectState = lp.getInt32( 0xc, true );
		ret.job = lp.getInt16( 0x10, true );
		ret.head = lp.getInt16( 0x12, true );
		ret.weapon = lp.getInt32( 0x14, true );
		ret.accessory = lp.getInt16( 0x18, true );
		ret.accessory2 = lp.getInt16( 0x1a, true );
		ret.accessory3 = lp.getInt16( 0x1c, true );
		ret.headpalette = lp.getInt16( 0x1e, true );
		ret.bodypalette = lp.getInt16( 0x20, true );
		ret.headDir = lp.getInt16( 0x22, true );
		ret.GUID = lp.getUint32( 0x24, true );
		ret.GEmblemVer = lp.getInt16( 0x28, true );
		ret.honor = lp.getInt16( 0x2a, true );
		ret.virtue = lp.getInt32( 0x2c, true );
		ret.isPKModeON = lp.getUint8( 0x30 );
		ret.sex = lp.getUint8( 0x31 );
		ret.PosDir = new Uint8Array( buf.slice( 0x32, 0x35 ) );
		ret.xSize = lp.getUint8( 0x35 );
		ret.ySize = lp.getUint8( 0x36 );
		ret.state = lp.getUint8( 0x37 );
		ret.clevel = lp.getInt16( 0x38, true );
		ret.font = lp.getInt16( 0x3a, true );

		return ret;
	},

	0x2ef: function PACKET_ZC_NOTIFY_FONT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.font = lp.getInt16( 0x6, true );

		return ret;
	},

	0x2f0: function PACKET_ZC_PROGRESS( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.color = lp.getUint32( 0x2, true );
		ret.time = lp.getUint32( 0x6, true );

		return ret;
	},

	0x2f1: function PACKET_CZ_PROGRESS( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x2f2: function PACKET_ZC_PROGRESS_CANCEL( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x35c: function PACKET_CZ_OPEN_SIMPLE_CASHSHOP_ITEMLIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x35d: function PACKET_ZC_SIMPLE_CASHSHOP_POINT_ITEMLIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.CashPoint = lp.getUint32( 0x4, true );
		ret.md_itemcount = lp.getInt16( 0x8, true );
		ret.md_itemSize = lp.getInt16( 0xa, true );
		ret.best_itemcount = lp.getInt16( 0xc, true );
		ret.best_itemsize = lp.getInt16( 0xe, true );
		
		ret.ItemList = [];

		// PURCHASE_ITEM
		for( p = 0x10; p < buf.byteLength; p += 11 ) {

			var ret2 = {};

			ret2.price = lp.getInt32( p + 0x0, true );
			ret2.discountprice = lp.getInt32( p + 0x4, true );
			ret2.type = lp.getUint8( p + 0x8 );
			ret2.ITID = lp.getUint16( p + 0x9, true );

			ret.ItemList.push( ret2 );

		}

		return ret;
	},

	0x35e: function PACKET_CZ_CLOSE_WINDOW( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x3dd: function PACKET_AHC_GAME_GUARD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AuthData = new Uint32Array( buf.slice( 0x2, 0x12 ) );

		return ret;
	},

	0x3de: function PACKET_CAH_ACK_GAME_GUARD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AuthData = new Uint32Array( buf.slice( 0x2, 0x12 ) );

		return ret;
	},

	0x436: function PACKET_CZ_ENTER2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.GID = lp.getUint32( 0x6, true );
		ret.AuthCode = lp.getInt32( 0xa, true );
		ret.clientTime = lp.getUint32( 0xe, true );
		ret.Sex = lp.getUint8( 0x12 );

		return ret;
	},

	0x437: function PACKET_CZ_REQUEST_ACT2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.targetGID = lp.getUint32( 0x2, true );
		ret.action = lp.getUint8( 0x6 );

		return ret;
	},

	0x438: function PACKET_CZ_USE_SKILL2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.selectedLevel = lp.getInt16( 0x2, true );
		ret.SKID = lp.getUint16( 0x4, true );
		ret.targetID = lp.getUint32( 0x6, true );

		return ret;
	},

	0x439: function PACKET_CZ_USE_ITEM2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getUint16( 0x2, true );
		ret.AID = lp.getUint32( 0x4, true );

		return ret;
	},

	0x43d: function PACKET_ZC_SKILL_POSTDELAY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.SKID = lp.getUint16( 0x2, true );
		ret.DelayTM = lp.getUint32( 0x4, true );

		return ret;
	},

	0x43e: function PACKET_ZC_SKILL_POSTDELAY_LIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.delayList = [];

		// SKILL_POSTDELAY
		for( p = 0x4; p < buf.byteLength; p += 6 ) {

			var ret2 = {};

			ret2.SKID = lp.getUint16( p + 0x0, true );
			ret2.DelayTM = lp.getUint32( p + 0x2, true );

			ret.delayList.push( ret2 );

		}

		return ret;
	},

	0x43f: function PACKET_ZC_MSG_STATE_CHANGE2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getInt16( 0x2, true );
		ret.AID = lp.getUint32( 0x4, true );
		ret.state = lp.getUint8( 0x8 );
		ret.RemainMS = lp.getUint32( 0x9, true );
		ret.val = new Int32Array( buf.slice( 0xd, 0x19 ) );

		return ret;
	},

	0x440: function PACKET_ZC_MILLENNIUMSHIELD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.num = lp.getInt16( 0x6, true );
		ret.state = lp.getInt16( 0x8, true );

		return ret;
	},

	0x441: function PACKET_ZC_SKILLINFO_DELETE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.SKID = lp.getUint16( 0x2, true );

		return ret;
	},

	0x442: function PACKET_ZC_SKILL_SELECT_REQUEST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.why = lp.getInt32( 0x4, true );
		ret.SKIDList = new Uint16Array( buf.slice( 0x8 ) );

		return ret;
	},

	0x443: function PACKET_CZ_SKILL_SELECT_RESPONSE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.why = lp.getInt32( 0x2, true );
		ret.SKID = lp.getUint16( 0x6, true );

		return ret;
	},

	0x444: function PACKET_ZC_SIMPLE_CASH_POINT_ITEMLIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.CashPoint = lp.getUint32( 0x4, true );
		
		ret.ItemList = [];

		// PURCHASE_ITEM
		for( p = 0x8; p < buf.byteLength; p += 11 ) {

			var ret2 = {};

			ret2.price = lp.getInt32( p + 0x0, true );
			ret2.discountprice = lp.getInt32( p + 0x4, true );
			ret2.type = lp.getUint8( p + 0x8 );
			ret2.ITID = lp.getUint16( p + 0x9, true );

			ret.ItemList.push( ret2 );

		}

		return ret;
	},

	0x445: function PACKET_CZ_SIMPLE_BUY_CASH_POINT_ITEM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.ITID = lp.getUint16( 0x2, true );
		ret.count = lp.getInt16( 0x4, true );

		return ret;
	},

	0x446: function PACKET_ZC_QUEST_NOTIFY_EFFECT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.npcID = lp.getUint32( 0x2, true );
		ret.xPos = lp.getInt16( 0x6, true );
		ret.yPos = lp.getInt16( 0x8, true );
		ret.effect = lp.getInt16( 0xa, true );
		ret.type = lp.getInt16( 0xc, true );

		return ret;
	},

	0x447: function PACKET_CZ_BLOCKING_PLAY_CANCEL( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x448: function PACKET_HC_CHARACTER_LIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		
		ret.CharacterList = [];

		// CHARACTER_LIST
		for( p = 0x4; p < buf.byteLength; p += 5 ) {

			var ret2 = {};

			ret2.dwGID = lp.getUint32( p + 0x0, true );
			ret2.SlotIdx = lp.getUint8( p + 0x4 );

			ret.CharacterList.push( ret2 );

		}

		return ret;
	},

	0x449: function PACKET_ZC_HACKSH_ERROR_MSG( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.ErrorID = lp.getInt16( 0x2, true );

		return ret;
	},

	0x44a: function PACKET_CZ_CLIENT_VERSION( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.clientVer = lp.getInt32( 0x2, true );

		return ret;
	},

	0x44b: function PACKET_CZ_CLOSE_SIMPLECASH_SHOP( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x7d0: function PACKET_ZC_ES_RESULT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.esNo = lp.getInt16( 0x2, true );
		ret.esMsg = lp.getInt16( 0x4, true );

		return ret;
	},

	0x7d1: function PACKET_CZ_ES_GET_LIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x7d2: function PACKET_ZC_ES_LIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.Count = lp.getInt16( 0x4, true );

		return ret;
	},

	0x7d3: function PACKET_CZ_ES_CHOOSE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.esNo = lp.getInt16( 0x2, true );

		return ret;
	},

	0x7d4: function PACKET_CZ_ES_CANCEL( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.esNo = lp.getInt16( 0x2, true );

		return ret;
	},

	0x7d5: function PACKET_ZC_ES_READY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.esNo = lp.getInt16( 0x2, true );

		return ret;
	},

	0x7d6: function PACKET_ZC_ES_GOTO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.esNo = lp.getInt16( 0x2, true );

		return ret;
	},

	0x7d7: function PACKET_CZ_GROUPINFO_CHANGE_V2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.expOption = lp.getUint32( 0x2, true );
		ret.ItemPickupRule = lp.getUint8( 0x6 );
		ret.ItemDivisionRule = lp.getUint8( 0x7 );

		return ret;
	},

	0x7d8: function PACKET_ZC_REQ_GROUPINFO_CHANGE_V2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.expOption = lp.getUint32( 0x2, true );
		ret.ItemPickupRule = lp.getUint8( 0x6 );
		ret.ItemDivisionRule = lp.getUint8( 0x7 );

		return ret;
	},

	// MANUAL
	0x7d9: function PACKET_ZC_SHORTCUT_KEY_LIST_V2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		
		// ShortCutKey
		ret.ShortCutKey = [];
		
		for( var p = 0; p < 38 * 7; p += 7) {
			ret.ShortCutKey.push({
				isSkill: lp.getUint8( p + 0x0 ),
				ID: lp.getUint32( p + 0x1, true ),
				count: lp.getInt16( p + 0x5, true ),			
			});
		}
		
		return ret;
	},

	0x7da: function PACKET_CZ_CHANGE_GROUP_MASTER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );

		return ret;
	},

	0x7db: function PACKET_ZC_HO_PAR_CHANGE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.var = lp.getUint16( 0x2, true );
		ret.value = lp.getInt32( 0x4, true );

		return ret;
	},

	0x7dc: function PACKET_CZ_SEEK_PARTY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Option = lp.getUint32( 0x2, true );

		return ret;
	},

	0x7dd: function PACKET_ZC_SEEK_PARTY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Name = new Uint8Array( buf.slice( 0x2, 0x1a ) );
		ret.Job = lp.getUint32( 0x1a, true );
		ret.Level = lp.getUint32( 0x1e, true );
		ret.mapName = new Uint8Array( buf.slice( 0x22, 0x32 ) );
		ret.Option = lp.getUint32( 0x32, true );

		return ret;
	},

	0x7de: function PACKET_CZ_SEEK_PARTY_MEMBER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Job = lp.getUint32( 0x2, true );
		ret.Level = lp.getUint32( 0x6, true );
		ret.mapName = new Uint8Array( buf.slice( 0xa, 0x1a ) );
		ret.Option = lp.getUint32( 0x1a, true );

		return ret;
	},

	0x7df: function PACKET_ZC_SEEK_PARTY_MEMBER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Name = new Uint8Array( buf.slice( 0x2, 0x1a ) );
		ret.Job = lp.getUint32( 0x1a, true );
		ret.Level = lp.getUint32( 0x1e, true );
		ret.mapName = new Uint8Array( buf.slice( 0x22, 0x32 ) );
		ret.Option = lp.getUint32( 0x32, true );

		return ret;
	},

	0x7e0: function PACKET_ZC_ES_NOTI_MYINFO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.esNo = lp.getInt16( 0x2, true );
		ret.esname = new Uint8Array( buf.slice( 0x4, 0x3a ) );

		return ret;
	},

	0x7e1: function PACKET_ZC_SKILLINFO_UPDATE2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.SKID = lp.getUint16( 0x2, true );
		ret.type = lp.getInt32( 0x4, true );
		ret.level = lp.getInt16( 0x8, true );
		ret.spcost = lp.getInt16( 0xa, true );
		ret.attackRange = lp.getInt16( 0xc, true );
		ret.upgradable = lp.getUint8( 0xe );

		return ret;
	},

	0x7e2: function PACKET_ZC_MSG_VALUE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.msg = lp.getUint16( 0x2, true );
		ret.value = lp.getInt32( 0x4, true );

		return ret;
	},

	0x7e3: function PACKET_ZC_ITEMLISTWIN_OPEN( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Type = lp.getInt32( 0x2, true );

		return ret;
	},

	0x7e4: function PACKET_CZ_ITEMLISTWIN_RES( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.Type = lp.getInt32( 0x4, true );
		ret.Action = lp.getInt32( 0x8, true );
		ret.MaterialList = lp.getUint16( 0xc, true );

		return ret;
	},

	0x7e5: function PACKET_CH_ENTER_CHECKBOT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.dwAID = lp.getUint32( 0x4, true );
		ret.szStringInfo = new Uint8Array( buf.slice( 0x8 ) );

		return ret;
	},

	0x7e6: function PACKET_ZC_MSG_SKILL( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.SKID = lp.getUint16( 0x2, true );
		ret.MSGID = lp.getInt32( 0x4, true );

		return ret;
	},

	0x7e7: function PACKET_CH_CHECKBOT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.dwAID = lp.getUint32( 0x4, true );
		ret.szStringInfo = new Uint8Array( buf.slice( 0x8, 0x20 ) );

		return ret;
	},

	0x7e8: function PACKET_HC_CHECKBOT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.img = new Uint8Array( buf.slice( 0x4 ) );

		return ret;
	},

	0x7e9: function PACKET_HC_CHECKBOT_RESULT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.Result = lp.getUint8( 0x4 );

		return ret;
	},

	0x7ea: function PACKET_CZ_BATTLE_FIELD_LIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x7eb: function PACKET_ZC_BATTLE_FIELD_LIST( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.Count = lp.getInt16( 0x4, true );
		ret.ack_type = lp.getInt16( 0x6, true );
		
		ret.InfoList = [];

		// BATTLE_FIELD_INFO
		for( p = 0x8; p < buf.byteLength; p += 62 ) {

			var ret2 = {};

			ret2.BFNO = lp.getUint32( p + 0x0, true );
			ret2.BattleFieldName = new Uint8Array( buf.slice( p + 0x4, p + 0x3c ) );
			ret2.JoinTeam = lp.getInt16( p + 0x3c, true );

			ret.InfoList.push( ret2 );

		}

		return ret;
	},

	0x7ec: function PACKET_CZ_JOIN_BATTLE_FIELD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.BFNO = lp.getUint32( 0x2, true );
		ret.JoinTeam = lp.getInt16( 0x6, true );

		return ret;
	},

	0x7ed: function PACKET_ZC_JOIN_BATTLE_FIELD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.BFNO = lp.getUint32( 0x2, true );
		ret.JoinTeam = lp.getInt16( 0x6, true );
		ret.Result = lp.getInt16( 0x8, true );

		return ret;
	},

	0x7ee: function PACKET_CZ_CANCEL_BATTLE_FIELD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.BFNO = lp.getUint32( 0x2, true );

		return ret;
	},

	0x7ef: function PACKET_ZC_CANCEL_BATTLE_FIELD( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.BFNO = lp.getUint32( 0x2, true );
		ret.Result = lp.getInt16( 0x6, true );

		return ret;
	},

	0x7f0: function PACKET_CZ_REQ_BATTLE_STATE_MONITOR( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.BFNO = lp.getUint32( 0x2, true );
		ret.PowerSwitch = lp.getInt16( 0x6, true );

		return ret;
	},

	0x7f1: function PACKET_ZC_ACK_BATTLE_STATE_MONITOR( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.BFNO = lp.getUint32( 0x2, true );
		ret.PlayCount = lp.getInt16( 0x6, true );
		ret.BattleState = lp.getInt16( 0x8, true );
		ret.TeamCount_A = lp.getInt16( 0xa, true );
		ret.TeamCount_B = lp.getInt16( 0xc, true );
		ret.MyCount = lp.getInt16( 0xe, true );
		ret.JoinTeam = lp.getInt16( 0x10, true );

		return ret;
	},

	0x7f2: function PACKET_ZC_BATTLE_NOTI_START_STEP( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.BFNO = lp.getUint32( 0x2, true );
		ret.Result = lp.getInt16( 0x6, true );

		return ret;
	},

	0x7f3: function PACKET_ZC_BATTLE_JOIN_NOTI_DEFER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.BFNO = lp.getUint32( 0x2, true );

		return ret;
	},

	0x7f4: function PACKET_ZC_BATTLE_JOIN_DISABLE_STATE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Enable = lp.getUint8( 0x2 );

		return ret;
	},

	0x7f5: function PACKET_CZ_GM_FULLSTRIP( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.TargetAID = lp.getUint32( 0x2, true );

		return ret;
	},

	0x7f6: function PACKET_ZC_NOTIFY_EXP( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.amount = lp.getInt32( 0x6, true );
		ret.varID = lp.getUint16( 0xa, true );
		ret.expType = lp.getInt16( 0xc, true );

		return ret;
	},

	0x7f7: function PACKET_ZC_NOTIFY_MOVEENTRY7( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.objecttype = lp.getUint8( 0x4 );
		ret.GID = lp.getUint32( 0x5, true );
		ret.speed = lp.getInt16( 0x9, true );
		ret.bodyState = lp.getInt16( 0xb, true );
		ret.healthState = lp.getInt16( 0xd, true );
		ret.effectState = lp.getInt32( 0xf, true );
		ret.job = lp.getInt16( 0x13, true );
		ret.head = lp.getInt16( 0x15, true );
		ret.weapon = lp.getInt32( 0x17, true );
		ret.accessory = lp.getInt16( 0x1b, true );
		ret.moveStartTime = lp.getUint32( 0x1d, true );
		ret.accessory2 = lp.getInt16( 0x21, true );
		ret.accessory3 = lp.getInt16( 0x23, true );
		ret.headpalette = lp.getInt16( 0x25, true );
		ret.bodypalette = lp.getInt16( 0x27, true );
		ret.headDir = lp.getInt16( 0x29, true );
		ret.GUID = lp.getUint32( 0x2b, true );
		ret.GEmblemVer = lp.getInt16( 0x2f, true );
		ret.honor = lp.getInt16( 0x31, true );
		ret.virtue = lp.getInt32( 0x33, true );
		ret.isPKModeON = lp.getUint8( 0x37 );
		ret.sex = lp.getUint8( 0x38 );
		ret.MoveData = new Uint8Array( buf.slice( 0x39, 0x3f ) );
		ret.xSize = lp.getUint8( 0x3f );
		ret.ySize = lp.getUint8( 0x40 );
		ret.clevel = lp.getInt16( 0x41, true );
		ret.font = lp.getInt16( 0x43, true );
		ret.name = new Uint8Array( buf.slice( 0x45, 0x5d ) );

		return ret;
	},

	0x7f8: function PACKET_ZC_NOTIFY_NEWENTRY5( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.objecttype = lp.getUint8( 0x4 );
		ret.GID = lp.getUint32( 0x5, true );
		ret.speed = lp.getInt16( 0x9, true );
		ret.bodyState = lp.getInt16( 0xb, true );
		ret.healthState = lp.getInt16( 0xd, true );
		ret.effectState = lp.getInt32( 0xf, true );
		ret.job = lp.getInt16( 0x13, true );
		ret.head = lp.getInt16( 0x15, true );
		ret.weapon = lp.getInt32( 0x17, true );
		ret.accessory = lp.getInt16( 0x1b, true );
		ret.accessory2 = lp.getInt16( 0x1d, true );
		ret.accessory3 = lp.getInt16( 0x1f, true );
		ret.headpalette = lp.getInt16( 0x21, true );
		ret.bodypalette = lp.getInt16( 0x23, true );
		ret.headDir = lp.getInt16( 0x25, true );
		ret.GUID = lp.getUint32( 0x27, true );
		ret.GEmblemVer = lp.getInt16( 0x2b, true );
		ret.honor = lp.getInt16( 0x2d, true );
		ret.virtue = lp.getInt32( 0x2f, true );
		ret.isPKModeON = lp.getUint8( 0x33 );
		ret.sex = lp.getUint8( 0x34 );
		ret.PosDir = new Uint8Array( buf.slice( 0x35, 0x38 ) );
		ret.xSize = lp.getUint8( 0x38 );
		ret.ySize = lp.getUint8( 0x39 );
		ret.clevel = lp.getInt16( 0x3a, true );
		ret.font = lp.getInt16( 0x3c, true );
		ret.name = new Uint8Array( buf.slice( 0x3e, 0x56 ) );

		return ret;
	},

	0x7f9: function PACKET_ZC_NOTIFY_STANDENTRY5( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.objecttype = lp.getUint8( 0x4 );
		ret.GID = lp.getUint32( 0x5, true );
		ret.speed = lp.getInt16( 0x9, true );
		ret.bodyState = lp.getInt16( 0xb, true );
		ret.healthState = lp.getInt16( 0xd, true );
		ret.effectState = lp.getInt32( 0xf, true );
		ret.job = lp.getInt16( 0x13, true );
		ret.head = lp.getInt16( 0x15, true );
		ret.weapon = lp.getInt32( 0x17, true );
		ret.accessory = lp.getInt16( 0x1b, true );
		ret.accessory2 = lp.getInt16( 0x1d, true );
		ret.accessory3 = lp.getInt16( 0x1f, true );
		ret.headpalette = lp.getInt16( 0x21, true );
		ret.bodypalette = lp.getInt16( 0x23, true );
		ret.headDir = lp.getInt16( 0x25, true );
		ret.GUID = lp.getUint32( 0x27, true );
		ret.GEmblemVer = lp.getInt16( 0x2b, true );
		ret.honor = lp.getInt16( 0x2d, true );
		ret.virtue = lp.getInt32( 0x2f, true );
		ret.isPKModeON = lp.getUint8( 0x33 );
		ret.sex = lp.getUint8( 0x34 );
		ret.PosDir = new Uint8Array( buf.slice( 0x35, 0x38 ) );
		ret.xSize = lp.getUint8( 0x38 );
		ret.ySize = lp.getUint8( 0x39 );
		ret.state = lp.getUint8( 0x3a );
		ret.clevel = lp.getInt16( 0x3b, true );
		ret.font = lp.getInt16( 0x3d, true );
		ret.name = new Uint8Array( buf.slice( 0x3f, 0x57 ) );

		return ret;
	},

	0x7fa: function PACKET_ZC_DELETE_ITEM_FROM_BODY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.DeleteType = lp.getInt16( 0x2, true );
		ret.Index = lp.getUint16( 0x4, true );
		ret.Count = lp.getInt16( 0x6, true );

		return ret;
	},

	0x7fb: function PACKET_ZC_USESKILL_ACK2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.targetID = lp.getUint32( 0x6, true );
		ret.xPos = lp.getInt16( 0xa, true );
		ret.yPos = lp.getInt16( 0xc, true );
		ret.SKID = lp.getUint16( 0xe, true );
		ret.property = lp.getUint32( 0x10, true );
		ret.delayTime = lp.getUint32( 0x14, true );
		ret.isDisposable = lp.getUint8( 0x18 );

		return ret;
	},

	0x7fc: function PACKET_ZC_CHANGE_GROUP_MASTER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.OldMasterAID = lp.getUint32( 0x2, true );
		ret.NewMasterAID = lp.getUint32( 0x6, true );

		return ret;
	},

	0x7fe: function PACKET_ZC_PLAY_NPC_BGM( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Bgm = new Uint8Array( buf.slice( 0x2, 0x1a ) );

		return ret;
	},

	0x7ff: function PACKET_ZC_DEFINE_CHECK( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.Result = lp.getInt32( 0x4, true );

		return ret;
	},

	0x800: function PACKET_ZC_PC_PURCHASE_ITEMLIST_FROMMC2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.AID = lp.getUint32( 0x4, true );
		ret.UniqueID = lp.getUint32( 0x8, true );
		
		ret.itemList = [];

		// PURCHASE_ITEM_FROMMC
		for( p = 0xc; p < buf.byteLength; p += 22 ) {

			var ret2 = {};

			ret2.price = lp.getInt32( p + 0x0, true );
			ret2.count = lp.getInt16( p + 0x4, true );
			ret2.index = lp.getInt16( p + 0x6, true );
			ret2.type = lp.getUint8( p + 0x8 );
			ret2.ITID = lp.getUint16( p + 0x9, true );
			ret2.IsIdentified = lp.getUint8( p + 0xb );
			ret2.IsDamaged = lp.getUint8( p + 0xc );
			ret2.refiningLevel = lp.getUint8( p + 0xd );
			
			// EQUIPSLOTINFO
			ret2.slot = {
				card1: lp.getUint16( p + 0xe, true ),
				card2: lp.getUint16( p + 0x10, true ),
				card3: lp.getUint16( p + 0x12, true ),
				card4: lp.getUint16( p + 0x14, true ),
			};


			ret.itemList.push( ret2 );

		}

		return ret;
	},

	0x801: function PACKET_CZ_PC_PURCHASE_ITEMLIST_FROMMC2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.AID = lp.getUint32( 0x4, true );
		ret.UniqueID = lp.getUint32( 0x8, true );
		
		ret.itemList = [];

		// CZ_PURCHASE_ITEM_FROMMC
		for( p = 0xc; p < buf.byteLength; p += 4 ) {

			var ret2 = {};

			ret2.count = lp.getInt16( p + 0x0, true );
			ret2.index = lp.getInt16( p + 0x2, true );

			ret.itemList.push( ret2 );

		}

		return ret;
	},

	0x802: function PACKET_CZ_PARTY_BOOKING_REQ_REGISTER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		
		// PARTY_BOOKING_DETAIL
		ret.RegisterInfo = {
			Level: lp.getInt16( p + 0x2, true ),
			MapID: lp.getInt16( p + 0x4, true ),
			Job: new Int16Array( buf.slice( p + 0x6, p + 0x12 ) ),
		};


		return ret;
	},

	0x803: function PACKET_ZC_PARTY_BOOKING_ACK_REGISTER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Result = lp.getInt16( 0x2, true );

		return ret;
	},

	0x804: function PACKET_CZ_PARTY_BOOKING_REQ_SEARCH( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Level = lp.getInt16( 0x2, true );
		ret.MapID = lp.getInt16( 0x4, true );
		ret.Job = lp.getInt16( 0x6, true );
		ret.LastIndex = lp.getUint32( 0x8, true );
		ret.ResultCount = lp.getInt16( 0xc, true );

		return ret;
	},

	0x805: function PACKET_ZC_PARTY_BOOKING_ACK_SEARCH( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.IsExistMoreResult = lp.getUint8( 0x4 );
		
		ret.Info = [];

		// PARTY_BOOKING_AD_INFO
		for( p = 0x5; p < buf.byteLength; p += 48 ) {

			var ret2 = {};

			ret2.Index = lp.getUint32( p + 0x0, true );
			ret2.CharName = new Uint8Array( buf.slice( p + 0x4, p + 0x1c ) );
			ret2.ExpireTime = lp.getInt32( p + 0x1c, true );
			
			// PARTY_BOOKING_DETAIL
			ret2.Detail = {
				Level: lp.getInt16( p + 0x20, true ),
				MapID: lp.getInt16( p + 0x22, true ),
				Job: new Int16Array( buf.slice( p + 0x24, p + 0x30 ) ),
			};


			ret.Info.push( ret2 );

		}

		return ret;
	},

	0x806: function PACKET_CZ_PARTY_BOOKING_REQ_DELETE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x807: function PACKET_ZC_PARTY_BOOKING_ACK_DELETE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Result = lp.getInt16( 0x2, true );

		return ret;
	},

	0x808: function PACKET_CZ_PARTY_BOOKING_REQ_UPDATE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Job = new Int16Array( buf.slice( 0x2, 0xe ) );

		return ret;
	},

	0x809: function PACKET_ZC_PARTY_BOOKING_NOTIFY_INSERT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		
		// PARTY_BOOKING_AD_INFO
		ret.Info = {
			Index: lp.getUint32( p + 0x2, true ),
			CharName: new Uint8Array( buf.slice( p + 0x6, p + 0x1e ) ),
			ExpireTime: lp.getInt32( p + 0x1e, true ),
			
			// PARTY_BOOKING_DETAIL
			Detail: {
				Level: lp.getInt16( p + 0x20, true ),
				MapID: lp.getInt16( p + 0x22, true ),
				Job1: lp.getInt16( p + 0x24, true ),
				Job2: lp.getInt16( p + 0x26, true ),
				Job3: lp.getInt16( p + 0x28, true ),
				Job4: lp.getInt16( p + 0x2a, true ),
				Job5: lp.getInt16( p + 0x2c, true ),
				Job6: lp.getInt16( p + 0x2e, true ),
			},

		};


		return ret;
	},

	0x80a: function PACKET_ZC_PARTY_BOOKING_NOTIFY_UPDATE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Index = lp.getUint32( 0x2, true );
		ret.Job1 = lp.getInt16( 0x6, true );
		ret.Job2 = lp.getInt16( 0x8, true );
		ret.Job3 = lp.getInt16( 0xa, true );
		ret.Job4 = lp.getInt16( 0xc, true );
		ret.Job5 = lp.getInt16( 0xe, true );
		ret.Job6 = lp.getInt16( 0x10, true );

		return ret;
	},

	0x80b: function PACKET_ZC_PARTY_BOOKING_NOTIFY_DELETE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Index = lp.getUint32( 0x2, true );

		return ret;
	},

	0x80c: function PACKET_CZ_SIMPLE_CASH_BTNSHOW( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x80d: function PACKET_ZC_SIMPLE_CASH_BTNSHOW( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.show = lp.getUint8( 0x2 );

		return ret;
	},

	0x80e: function PACKET_ZC_NOTIFY_HP_TO_GROUPM_R2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.hp = lp.getInt32( 0x6, true );
		ret.maxhp = lp.getInt32( 0xa, true );

		return ret;
	},

	0x80f: function PACKET_ZC_ADD_EXCHANGE_ITEM2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.ITID = lp.getUint16( 0x2, true );
		ret.type = lp.getUint8( 0x4 );
		ret.count = lp.getInt32( 0x5, true );
		ret.IsIdentified = lp.getUint8( 0x9 );
		ret.IsDamaged = lp.getUint8( 0xa );
		ret.refiningLevel = lp.getUint8( 0xb );
		
		// EQUIPSLOTINFO
		ret.slot = {
			card1: lp.getUint16( p + 0xc, true ),
			card2: lp.getUint16( p + 0xe, true ),
			card3: lp.getUint16( p + 0x10, true ),
			card4: lp.getUint16( p + 0x12, true ),
		};


		return ret;
	},

	0x810: function PACKET_ZC_OPEN_BUYING_STORE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.count = lp.getUint8( 0x2 );

		return ret;
	},

	0x811: function PACKET_CZ_REQ_OPEN_BUYING_STORE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.LimitZeny = lp.getUint32( 0x4, true );
		ret.result = lp.getUint8( 0x8 );
		ret.storeName = new Uint8Array( buf.slice( 0x9, 0x59 ) );
		
		ret.ItemList = [];

		// PRODUCTINFO_IN_BUYING_STORE
		for( p = 0x59; p < buf.byteLength; p += 8 ) {

			var ret2 = {};

			ret2.ITID = lp.getUint16( p + 0x0, true );
			ret2.count = lp.getInt16( p + 0x2, true );
			ret2.price = lp.getInt32( p + 0x4, true );

			ret.ItemList.push( ret2 );

		}

		return ret;
	},

	0x812: function PACKET_ZC_FAILED_OPEN_BUYING_STORE_TO_BUYER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Result = lp.getInt16( 0x2, true );
		ret.total_weight = lp.getInt32( 0x4, true );

		return ret;
	},

	0x813: function PACKET_ZC_MYITEMLIST_BUYING_STORE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.AID = lp.getUint32( 0x4, true );
		ret.limitZeny = lp.getInt32( 0x8, true );
		
		ret.ItemList = [];

		// BUYING_STORE_ITEMLIST
		for( p = 0xc; p < buf.byteLength; p += 9 ) {

			var ret2 = {};

			ret2.price = lp.getInt32( p + 0x0, true );
			ret2.count = lp.getInt16( p + 0x4, true );
			ret2.type = lp.getUint8( p + 0x6 );
			ret2.ITID = lp.getUint16( p + 0x7, true );

			ret.ItemList.push( ret2 );

		}

		return ret;
	},

	0x814: function PACKET_ZC_BUYING_STORE_ENTRY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.makerAID = lp.getUint32( 0x2, true );
		ret.storeName = new Uint8Array( buf.slice( 0x6, 0x56 ) );

		return ret;
	},

	0x815: function PACKET_CZ_REQ_CLOSE_BUYING_STORE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x816: function PACKET_ZC_DISAPPEAR_BUYING_STORE_ENTRY( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.makerAID = lp.getUint32( 0x2, true );

		return ret;
	},

	0x817: function PACKET_CZ_REQ_CLICK_TO_BUYING_STORE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.makerAID = lp.getUint32( 0x2, true );

		return ret;
	},

	0x818: function PACKET_ZC_ACK_ITEMLIST_BUYING_STORE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.makerAID = lp.getUint32( 0x4, true );
		ret.StoreID = lp.getUint32( 0x8, true );
		ret.limitZeny = lp.getInt32( 0xc, true );
		
		ret.ItemList = [];

		// BUYING_STORE_ITEMLIST
		for( p = 0x10; p < buf.byteLength; p += 9 ) {

			var ret2 = {};

			ret2.price = lp.getInt32( p + 0x0, true );
			ret2.count = lp.getInt16( p + 0x4, true );
			ret2.type = lp.getUint8( p + 0x6 );
			ret2.ITID = lp.getUint16( p + 0x7, true );

			ret.ItemList.push( ret2 );

		}

		return ret;
	},

	0x819: function PACKET_CZ_REQ_TRADE_BUYING_STORE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.makerAID = lp.getUint32( 0x4, true );
		ret.StoreID = lp.getUint32( 0x8, true );
		
		ret.ItemList = [];

		// TRADE_ITEM_BUYING_STORE
		for( p = 0xc; p < buf.byteLength; p += 6 ) {

			var ret2 = {};

			ret2.index = lp.getUint16( p + 0x0, true );
			ret2.ITID = lp.getUint16( p + 0x2, true );
			ret2.count = lp.getInt16( p + 0x4, true );

			ret.ItemList.push( ret2 );

		}

		return ret;
	},

	0x81a: function PACKET_ZC_FAILED_TRADE_BUYING_STORE_TO_BUYER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Result = lp.getInt16( 0x2, true );

		return ret;
	},

	0x81b: function PACKET_ZC_UPDATE_ITEM_FROM_BUYING_STORE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.ITID = lp.getUint16( 0x2, true );
		ret.count = lp.getInt16( 0x4, true );
		ret.limitZeny = lp.getInt32( 0x6, true );

		return ret;
	},

	0x81c: function PACKET_ZC_ITEM_DELETE_BUYING_STORE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.index = lp.getInt16( 0x2, true );
		ret.count = lp.getInt16( 0x4, true );
		ret.zeny = lp.getInt32( 0x6, true );

		return ret;
	},

	0x81d: function PACKET_ZC_EL_INIT( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getInt32( 0x2, true );
		ret.hp = lp.getInt32( 0x6, true );
		ret.maxHP = lp.getInt32( 0xa, true );
		ret.sp = lp.getInt32( 0xe, true );
		ret.maxSP = lp.getInt32( 0x12, true );

		return ret;
	},

	0x81e: function PACKET_ZC_EL_PAR_CHANGE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.var = lp.getUint16( 0x2, true );
		ret.value = lp.getInt32( 0x4, true );

		return ret;
	},

	0x81f: function PACKET_ZC_BROADCAST4( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PakcetType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.Msgtype = lp.getUint8( 0x4 );
		ret.ColorRGB = lp.getUint32( 0x5, true );
		ret.msg = new Uint8Array( buf.slice( 0x9 ) );

		return ret;
	},

	0x820: function PACKET_ZC_COSTUME_SPRITE_CHANGE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );
		ret.type = lp.getUint8( 0x6 );
		ret.value = lp.getInt32( 0x7, true );

		return ret;
	},

	0x821: function PACKET_AC_OTP_USER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x822: function PACKET_CA_OTP_AUTH_REQ( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.OTPCode = new Uint8Array( buf.slice( 0x2, 0x9 ) );

		return ret;
	},

	0x823: function PACKET_AC_OTP_AUTH_ACK( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.LoginResult = lp.getUint16( 0x4, true );

		return ret;
	},

	0x824: function PACKET_ZC_FAILED_TRADE_BUYING_STORE_TO_SELLER( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Result = lp.getInt16( 0x2, true );
		ret.ITID = lp.getUint16( 0x4, true );

		return ret;
	},

	0x825a: function PACKET_CA_SSO_LOGIN_REQa( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.Version = lp.getUint32( 0x4, true );
		ret.clienttype = lp.getUint8( 0x8 );
		ret.ID = new Uint8Array( buf.slice( 0x9, 0x21 ) );
		ret.MacAddr = new Uint8Array( buf.slice( 0x21, 0x32 ) );
		ret.IpAddr = new Uint8Array( buf.slice( 0x32, 0x41 ) );
		ret.t1 = new Uint8Array( buf.slice( 0x41 ) );

		return ret;
	},

	0x825: function PACKET_CA_SSO_LOGIN_REQ( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.Version = lp.getUint32( 0x4, true );
		ret.clienttype = lp.getUint8( 0x8 );
		ret.ID = new Uint8Array( buf.slice( 0x9, 0x21 ) );
		ret.Passwd = new Uint8Array( buf.slice( 0x21, 0x3c ) );
		ret.MacAdress = new Uint8Array( buf.slice( 0x3c, 0x4d ) );
		ret.IP = new Uint8Array( buf.slice( 0x4d, 0x5c ) );
		ret.t1 = new Uint8Array( buf.slice( 0x5c ) );

		return ret;
	},

	0x826: function PACKET_AC_SSO_LOGIN_ACK( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Result = lp.getUint16( 0x2, true );

		return ret;
	},

	0x827: function PACKET_CH_DELETE_CHAR3_RESERVED( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );

		return ret;
	},

	0x828: function PACKET_HC_DELETE_CHAR3_RESERVED( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );
		ret.Result = lp.getInt32( 0x6, true );
		ret.DeleteReservedDate = lp.getInt32( 0xa, true );

		return ret;
	},

	0x829: function PACKET_CH_DELETE_CHAR3( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );
		ret.Birth = new Uint8Array( buf.slice( 0x6, 0xc ) );

		return ret;
	},

	0x82a: function PACKET_HC_DELETE_CHAR3( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );
		ret.Result = lp.getInt32( 0x6, true );

		return ret;
	},

	0x82b: function PACKET_CH_DELETE_CHAR3_CANCEL( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );

		return ret;
	},

	0x82c: function PACKET_HC_DELETE_CHAR3_CANCEL( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.GID = lp.getUint32( 0x2, true );
		ret.Result = lp.getInt32( 0x6, true );

		return ret;
	},

	0x835: function PACKET_CZ_SEARCH_STORE_INFO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.StoreType = lp.getUint8( 0x4 );
		ret.maxPrice = lp.getUint32( 0x5, true );
		ret.minPrice = lp.getUint32( 0x9, true );
		ret.ItemIDListSize = lp.getUint8( 0xd );
		ret.CardIDListSize = lp.getUint8( 0xe );

		return ret;
	},

	0x836: function PACKET_ZC_SEARCH_STORE_INFO_ACK( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.PacketLength = lp.getInt16( 0x2, true );
		ret.IsFirstPage = lp.getUint8( 0x4 );
		ret.IsNexPage = lp.getUint8( 0x5 );
		ret.RemainedSearchCnt = lp.getUint8( 0x6 );
		
		ret.SSI_List = [];

		// ResultItemInfo
		for( p = 0x7; p < buf.byteLength; p += 106 ) {

			var ret2 = {};

			ret2.SSI_ID = lp.getUint32( p + 0x0, true );
			ret2.AID = lp.getUint32( p + 0x4, true );
			ret2.StoreName = new Uint8Array( buf.slice( p + 0x8, p + 0x58 ) );
			ret2.ITID = lp.getUint16( p + 0x58, true );
			ret2.ItemType = lp.getUint8( p + 0x5a );
			ret2.price = lp.getInt32( p + 0x5b, true );
			ret2.count = lp.getUint16( p + 0x5f, true );
			ret2.refiningLevel = lp.getUint8( p + 0x61 );
			ret2.card1 = lp.getUint16( p + 0x62, true );
			ret2.card2 = lp.getUint16( p + 0x64, true );
			ret2.card3 = lp.getUint16( p + 0x66, true );
			ret2.card4 = lp.getUint16( p + 0x68, true );

			ret.SSI_List.push( ret2 );

		}

		return ret;
	},

	0x837: function PACKET_ZC_SEARCH_STORE_INFO_FAILED( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.Reason = lp.getUint8( 0x2 );

		return ret;
	},

	0x838: function PACKET_CZ_SEARCH_STORE_INFO_NEXT_PAGE( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x839: function PACKET_ZC_ACK_BAN_GUILD_SSO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.charName = new Uint8Array( buf.slice( 0x2, 0x1a ) );
		ret.reasonDesc = new Uint8Array( buf.slice( 0x1a, 0x42 ) );

		return ret;
	},

	0x83a: function PACKET_ZC_OPEN_SEARCH_STORE_INFO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.OpenType = lp.getInt16( 0x2, true );
		ret.SearchCntMax = lp.getUint8( 0x4 );

		return ret;
	},

	0x83b: function PACKET_CZ_CLOSE_SEARCH_STORE_INFO( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );

		return ret;
	},

	0x83c: function PACKET_CZ_SSILIST_ITEM_CLICK( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.AID = lp.getUint32( 0x2, true );
		ret.SSI_ID = lp.getUint32( 0x6, true );
		ret.ITID = lp.getUint16( 0xa, true );

		return ret;
	},

	0x83d: function PACKET_ZC_SSILIST_ITEM_CLICK_ACK( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.x = lp.getInt16( 0x2, true );
		ret.y = lp.getInt16( 0x4, true );

		return ret;
	},

	0x83e: function PACKET_AC_REFUSE_LOGIN_R2( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.ErrorCode = lp.getUint32( 0x2, true );
		ret.blockDate = new Uint8Array( buf.slice( 0x6, 0x1a ) );

		return ret;
	},

	0x841: function PACKET_CH_SELECT_ACCESSIBLE_MAPNAME( buf ) {

 		var lp = new DataView( buf );
		var ret = {};

		ret.PacketType = lp.getInt16( 0x0, true );
		ret.CharNum = lp.getUint8( 0x2 );
		ret.mapListNum = lp.getUint8( 0x3 );

		return ret;
	},

};